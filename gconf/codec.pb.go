// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gconf/codec.proto

package gconf

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_iov_one_weave "github.com/iov-one/weave"
	coin "github.com/iov-one/weave/coin"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Conf is a container to store a single value of one of supported types.
type ConfigurationValue struct {
	// Types that are valid to be assigned to Value:
	//	*ConfigurationValue_Int64
	//	*ConfigurationValue_String_
	//	*ConfigurationValue_Address
	//	*ConfigurationValue_Coin
	Value isConfigurationValue_Value `protobuf_oneof:"value"`
}

func (m *ConfigurationValue) Reset()         { *m = ConfigurationValue{} }
func (m *ConfigurationValue) String() string { return proto.CompactTextString(m) }
func (*ConfigurationValue) ProtoMessage()    {}
func (*ConfigurationValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_02107aacdd64eba6, []int{0}
}
func (m *ConfigurationValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigurationValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigurationValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigurationValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigurationValue.Merge(m, src)
}
func (m *ConfigurationValue) XXX_Size() int {
	return m.Size()
}
func (m *ConfigurationValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigurationValue.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigurationValue proto.InternalMessageInfo

type isConfigurationValue_Value interface {
	isConfigurationValue_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ConfigurationValue_Int64 struct {
	Int64 int64 `protobuf:"varint,1,opt,name=int64,proto3,oneof"`
}
type ConfigurationValue_String_ struct {
	String_ string `protobuf:"bytes,2,opt,name=string,proto3,oneof"`
}
type ConfigurationValue_Address struct {
	Address github_com_iov_one_weave.Address `protobuf:"bytes,3,opt,name=address,proto3,oneof,casttype=github.com/iov-one/weave.Address"`
}
type ConfigurationValue_Coin struct {
	Coin *coin.Coin `protobuf:"bytes,4,opt,name=coin,proto3,oneof"`
}

func (*ConfigurationValue_Int64) isConfigurationValue_Value()   {}
func (*ConfigurationValue_String_) isConfigurationValue_Value() {}
func (*ConfigurationValue_Address) isConfigurationValue_Value() {}
func (*ConfigurationValue_Coin) isConfigurationValue_Value()    {}

func (m *ConfigurationValue) GetValue() isConfigurationValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ConfigurationValue) GetInt64() int64 {
	if x, ok := m.GetValue().(*ConfigurationValue_Int64); ok {
		return x.Int64
	}
	return 0
}

func (m *ConfigurationValue) GetString_() string {
	if x, ok := m.GetValue().(*ConfigurationValue_String_); ok {
		return x.String_
	}
	return ""
}

func (m *ConfigurationValue) GetAddress() github_com_iov_one_weave.Address {
	if x, ok := m.GetValue().(*ConfigurationValue_Address); ok {
		return x.Address
	}
	return nil
}

func (m *ConfigurationValue) GetCoin() *coin.Coin {
	if x, ok := m.GetValue().(*ConfigurationValue_Coin); ok {
		return x.Coin
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ConfigurationValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ConfigurationValue_OneofMarshaler, _ConfigurationValue_OneofUnmarshaler, _ConfigurationValue_OneofSizer, []interface{}{
		(*ConfigurationValue_Int64)(nil),
		(*ConfigurationValue_String_)(nil),
		(*ConfigurationValue_Address)(nil),
		(*ConfigurationValue_Coin)(nil),
	}
}

func _ConfigurationValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ConfigurationValue)
	// value
	switch x := m.Value.(type) {
	case *ConfigurationValue_Int64:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Int64))
	case *ConfigurationValue_String_:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.String_)
	case *ConfigurationValue_Address:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.Address)
	case *ConfigurationValue_Coin:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Coin); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ConfigurationValue.Value has unexpected type %T", x)
	}
	return nil
}

func _ConfigurationValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ConfigurationValue)
	switch tag {
	case 1: // value.int64
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &ConfigurationValue_Int64{int64(x)}
		return true, err
	case 2: // value.string
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &ConfigurationValue_String_{x}
		return true, err
	case 3: // value.address
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Value = &ConfigurationValue_Address{github_com_iov_one_weave.Address(x)}
		return true, err
	case 4: // value.coin
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(coin.Coin)
		err := b.DecodeMessage(msg)
		m.Value = &ConfigurationValue_Coin{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ConfigurationValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ConfigurationValue)
	// value
	switch x := m.Value.(type) {
	case *ConfigurationValue_Int64:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Int64))
	case *ConfigurationValue_String_:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.String_)))
		n += len(x.String_)
	case *ConfigurationValue_Address:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Address)))
		n += len(x.Address)
	case *ConfigurationValue_Coin:
		s := proto.Size(x.Coin)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*ConfigurationValue)(nil), "gconf.ConfigurationValue")
}

func init() { proto.RegisterFile("gconf/codec.proto", fileDescriptor_02107aacdd64eba6) }

var fileDescriptor_02107aacdd64eba6 = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8f, 0xb1, 0x4e, 0xc3, 0x30,
	0x18, 0x84, 0x6d, 0xda, 0xb4, 0xc2, 0xb0, 0xe0, 0x01, 0x59, 0x1d, 0x8c, 0x85, 0x18, 0xc2, 0xd0,
	0x44, 0x02, 0xc4, 0x0c, 0xe9, 0x92, 0x39, 0x03, 0x7b, 0xe2, 0x38, 0xc6, 0x12, 0xf8, 0x47, 0x89,
	0x13, 0x5e, 0x83, 0x77, 0xe1, 0x25, 0x18, 0x3b, 0x32, 0x21, 0x94, 0xbc, 0x05, 0x13, 0x8a, 0x03,
	0x52, 0x97, 0x6e, 0xff, 0x77, 0xff, 0x9d, 0x74, 0x47, 0x4e, 0xb4, 0x04, 0x5b, 0xc5, 0x12, 0x4a,
	0x25, 0xa3, 0x97, 0x1a, 0x1c, 0xd0, 0xc0, 0x4b, 0xab, 0x4b, 0x6d, 0xdc, 0x63, 0x5b, 0x44, 0x12,
	0x9e, 0x63, 0x03, 0xdd, 0x1a, 0xac, 0x8a, 0x5f, 0x55, 0xde, 0xa9, 0x58, 0x82, 0xb1, 0xbb, 0x89,
	0xd5, 0x7a, 0xc7, 0xaa, 0x41, 0x43, 0xec, 0xe5, 0xa2, 0xad, 0x3c, 0x79, 0xf0, 0xd7, 0x64, 0x3f,
	0x7f, 0xc7, 0x84, 0x6e, 0xc0, 0x56, 0x46, 0xb7, 0x75, 0xee, 0x0c, 0xd8, 0x87, 0xfc, 0xa9, 0x55,
	0xf4, 0x94, 0x04, 0xc6, 0xba, 0xdb, 0x1b, 0x86, 0x05, 0x0e, 0x67, 0x29, 0xca, 0x26, 0xa4, 0x8c,
	0x2c, 0x1a, 0x57, 0x1b, 0xab, 0xd9, 0x81, 0xc0, 0xe1, 0x61, 0x8a, 0xb2, 0x3f, 0xa6, 0x77, 0x64,
	0x99, 0x97, 0x65, 0xad, 0x9a, 0x86, 0xcd, 0x04, 0x0e, 0x8f, 0x93, 0x8b, 0x9f, 0xaf, 0x33, 0xb1,
	0xaf, 0x77, 0x74, 0x3f, 0x79, 0x53, 0x94, 0xfd, 0xc7, 0xa8, 0x20, 0xf3, 0x71, 0x0d, 0x9b, 0x0b,
	0x1c, 0x1e, 0x5d, 0x91, 0x68, 0x84, 0x68, 0x03, 0xc6, 0xa6, 0x28, 0xf3, 0x9f, 0x64, 0x49, 0x82,
	0x6e, 0xac, 0x97, 0xb0, 0x8f, 0x9e, 0xe3, 0x6d, 0xcf, 0xf1, 0x77, 0xcf, 0xf1, 0xdb, 0xc0, 0xd1,
	0x76, 0xe0, 0xe8, 0x73, 0xe0, 0xa8, 0x58, 0xf8, 0x59, 0xd7, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x10, 0xe1, 0xa0, 0xff, 0x4c, 0x01, 0x00, 0x00,
}

func (m *ConfigurationValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigurationValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn1, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *ConfigurationValue_Int64) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintCodec(dAtA, i, uint64(m.Int64))
	return i, nil
}
func (m *ConfigurationValue_String_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintCodec(dAtA, i, uint64(len(m.String_)))
	i += copy(dAtA[i:], m.String_)
	return i, nil
}
func (m *ConfigurationValue_Address) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Address != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	return i, nil
}
func (m *ConfigurationValue_Coin) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Coin != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Coin.Size()))
		n2, err := m.Coin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func encodeVarintCodec(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ConfigurationValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *ConfigurationValue_Int64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCodec(uint64(m.Int64))
	return n
}
func (m *ConfigurationValue_String_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.String_)
	n += 1 + l + sovCodec(uint64(l))
	return n
}
func (m *ConfigurationValue_Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Address != nil {
		l = len(m.Address)
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ConfigurationValue_Coin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Coin != nil {
		l = m.Coin.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}

func sovCodec(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCodec(x uint64) (n int) {
	return sovCodec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConfigurationValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigurationValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigurationValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &ConfigurationValue_Int64{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &ConfigurationValue_String_{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Value = &ConfigurationValue_Address{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &coin.Coin{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &ConfigurationValue_Coin{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCodec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCodec
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCodec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCodec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCodec(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCodec
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCodec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCodec   = fmt.Errorf("proto: integer overflow")
)
