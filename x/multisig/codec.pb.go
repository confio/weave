// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/multisig/codec.proto

package multisig

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_iov_one_weave "github.com/iov-one/weave"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Contract struct {
	// Participants defines a list of all signatures that are allowed to sign the
	// contract.
	Participants []*Participant `protobuf:"bytes,1,rep,name=participants,proto3" json:"participants,omitempty"`
	// Activation threshold defines the minimal weight value that must be
	// provided from participants in order to activate the contract. Weight is
	// computed as the sum of weights of all participating signatures.
	ActivationThreshold Weight `protobuf:"varint,2,opt,name=activation_threshold,json=activationThreshold,proto3,casttype=Weight" json:"activation_threshold,omitempty"`
	// Admin threshold defines the minimal weight value that must be provided
	// from participants in order to administrate the contract. Weight is
	// computed as the sum of weights of all participating signatures.
	AdminThreshold Weight `protobuf:"varint,3,opt,name=admin_threshold,json=adminThreshold,proto3,casttype=Weight" json:"admin_threshold,omitempty"`
}

func (m *Contract) Reset()         { *m = Contract{} }
func (m *Contract) String() string { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()    {}
func (*Contract) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5080d98b87cf9a7, []int{0}
}
func (m *Contract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Contract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Contract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Contract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contract.Merge(m, src)
}
func (m *Contract) XXX_Size() int {
	return m.Size()
}
func (m *Contract) XXX_DiscardUnknown() {
	xxx_messageInfo_Contract.DiscardUnknown(m)
}

var xxx_messageInfo_Contract proto.InternalMessageInfo

func (m *Contract) GetParticipants() []*Participant {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *Contract) GetActivationThreshold() Weight {
	if m != nil {
		return m.ActivationThreshold
	}
	return 0
}

func (m *Contract) GetAdminThreshold() Weight {
	if m != nil {
		return m.AdminThreshold
	}
	return 0
}

// Participant clubs together a signature with a weight. The greater the weight
// the greater the power of a signature.
type Participant struct {
	Signature github_com_iov_one_weave.Address `protobuf:"bytes,1,opt,name=signature,proto3,casttype=github.com/iov-one/weave.Address" json:"signature,omitempty"`
	Weight    Weight                           `protobuf:"varint,2,opt,name=weight,proto3,casttype=Weight" json:"weight,omitempty"`
}

func (m *Participant) Reset()         { *m = Participant{} }
func (m *Participant) String() string { return proto.CompactTextString(m) }
func (*Participant) ProtoMessage()    {}
func (*Participant) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5080d98b87cf9a7, []int{1}
}
func (m *Participant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Participant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Participant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Participant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Participant.Merge(m, src)
}
func (m *Participant) XXX_Size() int {
	return m.Size()
}
func (m *Participant) XXX_DiscardUnknown() {
	xxx_messageInfo_Participant.DiscardUnknown(m)
}

var xxx_messageInfo_Participant proto.InternalMessageInfo

func (m *Participant) GetSignature() github_com_iov_one_weave.Address {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Participant) GetWeight() Weight {
	if m != nil {
		return m.Weight
	}
	return 0
}

type CreateContractMsg struct {
	Participants        []*Participant `protobuf:"bytes,1,rep,name=participants,proto3" json:"participants,omitempty"`
	ActivationThreshold Weight         `protobuf:"varint,2,opt,name=activation_threshold,json=activationThreshold,proto3,casttype=Weight" json:"activation_threshold,omitempty"`
	AdminThreshold      Weight         `protobuf:"varint,3,opt,name=admin_threshold,json=adminThreshold,proto3,casttype=Weight" json:"admin_threshold,omitempty"`
}

func (m *CreateContractMsg) Reset()         { *m = CreateContractMsg{} }
func (m *CreateContractMsg) String() string { return proto.CompactTextString(m) }
func (*CreateContractMsg) ProtoMessage()    {}
func (*CreateContractMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5080d98b87cf9a7, []int{2}
}
func (m *CreateContractMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateContractMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateContractMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateContractMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateContractMsg.Merge(m, src)
}
func (m *CreateContractMsg) XXX_Size() int {
	return m.Size()
}
func (m *CreateContractMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateContractMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CreateContractMsg proto.InternalMessageInfo

func (m *CreateContractMsg) GetParticipants() []*Participant {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *CreateContractMsg) GetActivationThreshold() Weight {
	if m != nil {
		return m.ActivationThreshold
	}
	return 0
}

func (m *CreateContractMsg) GetAdminThreshold() Weight {
	if m != nil {
		return m.AdminThreshold
	}
	return 0
}

type UpdateContractMsg struct {
	ContractID          []byte         `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	Participants        []*Participant `protobuf:"bytes,2,rep,name=participants,proto3" json:"participants,omitempty"`
	ActivationThreshold Weight         `protobuf:"varint,3,opt,name=activation_threshold,json=activationThreshold,proto3,casttype=Weight" json:"activation_threshold,omitempty"`
	AdminThreshold      Weight         `protobuf:"varint,4,opt,name=admin_threshold,json=adminThreshold,proto3,casttype=Weight" json:"admin_threshold,omitempty"`
}

func (m *UpdateContractMsg) Reset()         { *m = UpdateContractMsg{} }
func (m *UpdateContractMsg) String() string { return proto.CompactTextString(m) }
func (*UpdateContractMsg) ProtoMessage()    {}
func (*UpdateContractMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5080d98b87cf9a7, []int{3}
}
func (m *UpdateContractMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateContractMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateContractMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateContractMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateContractMsg.Merge(m, src)
}
func (m *UpdateContractMsg) XXX_Size() int {
	return m.Size()
}
func (m *UpdateContractMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateContractMsg.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateContractMsg proto.InternalMessageInfo

func (m *UpdateContractMsg) GetContractID() []byte {
	if m != nil {
		return m.ContractID
	}
	return nil
}

func (m *UpdateContractMsg) GetParticipants() []*Participant {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *UpdateContractMsg) GetActivationThreshold() Weight {
	if m != nil {
		return m.ActivationThreshold
	}
	return 0
}

func (m *UpdateContractMsg) GetAdminThreshold() Weight {
	if m != nil {
		return m.AdminThreshold
	}
	return 0
}

func init() {
	proto.RegisterType((*Contract)(nil), "multisig.Contract")
	proto.RegisterType((*Participant)(nil), "multisig.Participant")
	proto.RegisterType((*CreateContractMsg)(nil), "multisig.CreateContractMsg")
	proto.RegisterType((*UpdateContractMsg)(nil), "multisig.UpdateContractMsg")
}

func init() { proto.RegisterFile("x/multisig/codec.proto", fileDescriptor_e5080d98b87cf9a7) }

var fileDescriptor_e5080d98b87cf9a7 = []byte{
	// 366 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x93, 0x3f, 0x4f, 0xfa, 0x40,
	0x1c, 0xc6, 0x39, 0xf8, 0x85, 0xf0, 0xfb, 0x82, 0x18, 0xea, 0x9f, 0x34, 0x0e, 0xa5, 0x69, 0x1c,
	0x58, 0x68, 0x13, 0x99, 0x1c, 0x1c, 0x2c, 0x2e, 0x0c, 0x26, 0xa6, 0xd1, 0x38, 0x92, 0xa3, 0x77,
	0xb6, 0x97, 0x40, 0xaf, 0xe9, 0x5d, 0xc1, 0x97, 0xe1, 0xdb, 0x71, 0x75, 0x72, 0x64, 0x74, 0x22,
	0xa6, 0xbc, 0x04, 0x37, 0x26, 0x93, 0x93, 0x0a, 0x8a, 0x89, 0x89, 0x4e, 0x6e, 0x7d, 0xfa, 0xfd,
	0x3c, 0x77, 0xdf, 0xe7, 0x49, 0x0e, 0xf6, 0x6f, 0x9d, 0x51, 0x3a, 0x94, 0x4c, 0xb0, 0xc0, 0xf1,
	0x39, 0xa1, 0xbe, 0x1d, 0x27, 0x5c, 0x72, 0xad, 0x92, 0xff, 0x3d, 0x68, 0x07, 0x4c, 0x86, 0xe9,
	0xc0, 0xf6, 0xf9, 0xc8, 0x09, 0x78, 0xc0, 0x1d, 0x05, 0x0c, 0xd2, 0x1b, 0xa5, 0x94, 0x50, 0x5f,
	0x6f, 0x46, 0xeb, 0x1e, 0x41, 0xa5, 0xcb, 0x23, 0x99, 0x60, 0x5f, 0x6a, 0xc7, 0x50, 0x8b, 0x71,
	0x22, 0x99, 0xcf, 0x62, 0x1c, 0x49, 0xa1, 0x23, 0xb3, 0xd4, 0xaa, 0x1e, 0xed, 0xd9, 0xf9, 0xe1,
	0xf6, 0xc5, 0x6a, 0xea, 0x7d, 0x40, 0xb5, 0x13, 0xd8, 0xc5, 0xbe, 0x64, 0x63, 0x2c, 0x19, 0x8f,
	0xfa, 0x32, 0x4c, 0xa8, 0x08, 0xf9, 0x90, 0xe8, 0x45, 0x13, 0xb5, 0xb6, 0x5c, 0x58, 0xcc, 0x9a,
	0xe5, 0x6b, 0xca, 0x82, 0x50, 0x7a, 0x3b, 0x2b, 0xee, 0x32, 0xc7, 0xb4, 0x0e, 0x6c, 0x63, 0x32,
	0x62, 0xeb, 0xce, 0xd2, 0x86, 0xb3, 0xae, 0x90, 0x77, 0x93, 0x95, 0x42, 0x75, 0x6d, 0x21, 0xcd,
	0x85, 0xff, 0x82, 0x05, 0x11, 0x96, 0x69, 0x42, 0x75, 0x64, 0xa2, 0x56, 0xcd, 0x3d, 0x5c, 0xcc,
	0x9a, 0xe6, 0x5a, 0x21, 0x8c, 0x8f, 0xdb, 0x3c, 0xa2, 0xce, 0x84, 0xe2, 0x31, 0xb5, 0x4f, 0x09,
	0x49, 0xa8, 0x10, 0xde, 0xca, 0xa6, 0x59, 0x50, 0x9e, 0xa8, 0xcb, 0xbe, 0x58, 0x7c, 0x39, 0xb1,
	0x1e, 0x10, 0x34, 0xba, 0x09, 0xc5, 0x92, 0xe6, 0xc5, 0x9d, 0x8b, 0xe0, 0xaf, 0x75, 0xf7, 0x82,
	0xa0, 0x71, 0x15, 0x93, 0x4f, 0x21, 0x1c, 0xa8, 0xfa, 0x4b, 0xd9, 0x67, 0x64, 0x59, 0x62, 0x3d,
	0x9b, 0x35, 0x21, 0xa7, 0x7a, 0x67, 0x1e, 0xe4, 0x48, 0x8f, 0x6c, 0xa4, 0x2e, 0xfe, 0x3e, 0x75,
	0xe9, 0xc7, 0xa9, 0xff, 0x7d, 0x97, 0xda, 0xd5, 0x1f, 0x33, 0x03, 0x4d, 0x33, 0x03, 0x3d, 0x67,
	0x06, 0xba, 0x9b, 0x1b, 0x85, 0xe9, 0xdc, 0x28, 0x3c, 0xcd, 0x8d, 0xc2, 0xa0, 0xac, 0x9e, 0x43,
	0xe7, 0x35, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x7d, 0x35, 0xbc, 0x61, 0x03, 0x00, 0x00,
}

func (m *Contract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contract) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Participants) > 0 {
		for _, msg := range m.Participants {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCodec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ActivationThreshold != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.ActivationThreshold))
	}
	if m.AdminThreshold != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.AdminThreshold))
	}
	return i, nil
}

func (m *Participant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Participant) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if m.Weight != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Weight))
	}
	return i, nil
}

func (m *CreateContractMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateContractMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Participants) > 0 {
		for _, msg := range m.Participants {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCodec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ActivationThreshold != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.ActivationThreshold))
	}
	if m.AdminThreshold != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.AdminThreshold))
	}
	return i, nil
}

func (m *UpdateContractMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateContractMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContractID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.ContractID)))
		i += copy(dAtA[i:], m.ContractID)
	}
	if len(m.Participants) > 0 {
		for _, msg := range m.Participants {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCodec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ActivationThreshold != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.ActivationThreshold))
	}
	if m.AdminThreshold != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.AdminThreshold))
	}
	return i, nil
}

func encodeVarintCodec(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Contract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Participants) > 0 {
		for _, e := range m.Participants {
			l = e.Size()
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	if m.ActivationThreshold != 0 {
		n += 1 + sovCodec(uint64(m.ActivationThreshold))
	}
	if m.AdminThreshold != 0 {
		n += 1 + sovCodec(uint64(m.AdminThreshold))
	}
	return n
}

func (m *Participant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovCodec(uint64(m.Weight))
	}
	return n
}

func (m *CreateContractMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Participants) > 0 {
		for _, e := range m.Participants {
			l = e.Size()
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	if m.ActivationThreshold != 0 {
		n += 1 + sovCodec(uint64(m.ActivationThreshold))
	}
	if m.AdminThreshold != 0 {
		n += 1 + sovCodec(uint64(m.AdminThreshold))
	}
	return n
}

func (m *UpdateContractMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractID)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	if len(m.Participants) > 0 {
		for _, e := range m.Participants {
			l = e.Size()
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	if m.ActivationThreshold != 0 {
		n += 1 + sovCodec(uint64(m.ActivationThreshold))
	}
	if m.AdminThreshold != 0 {
		n += 1 + sovCodec(uint64(m.AdminThreshold))
	}
	return n
}

func sovCodec(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCodec(x uint64) (n int) {
	return sovCodec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Contract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, &Participant{})
			if err := m.Participants[len(m.Participants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationThreshold", wireType)
			}
			m.ActivationThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivationThreshold |= Weight(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminThreshold", wireType)
			}
			m.AdminThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminThreshold |= Weight(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Participant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Participant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Participant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= Weight(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateContractMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateContractMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateContractMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, &Participant{})
			if err := m.Participants[len(m.Participants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationThreshold", wireType)
			}
			m.ActivationThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivationThreshold |= Weight(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminThreshold", wireType)
			}
			m.AdminThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminThreshold |= Weight(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateContractMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateContractMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateContractMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractID = append(m.ContractID[:0], dAtA[iNdEx:postIndex]...)
			if m.ContractID == nil {
				m.ContractID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, &Participant{})
			if err := m.Participants[len(m.Participants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationThreshold", wireType)
			}
			m.ActivationThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivationThreshold |= Weight(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminThreshold", wireType)
			}
			m.AdminThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminThreshold |= Weight(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCodec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCodec
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCodec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCodec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCodec(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCodec
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCodec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCodec   = fmt.Errorf("proto: integer overflow")
)
