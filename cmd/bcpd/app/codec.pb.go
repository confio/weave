// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cmd/bcpd/app/codec.proto

package app

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	migration "github.com/iov-one/weave/migration"
	cash "github.com/iov-one/weave/x/cash"
	currency "github.com/iov-one/weave/x/currency"
	distribution "github.com/iov-one/weave/x/distribution"
	escrow "github.com/iov-one/weave/x/escrow"
	multisig "github.com/iov-one/weave/x/multisig"
	sigs "github.com/iov-one/weave/x/sigs"
	validators "github.com/iov-one/weave/x/validators"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Tx contains the message.
//
// When extending Tx, follow the rules:
// - range 1-50 is reserved for middlewares,
// - range 51-inf is reserved for different message types,
// - keep the same numbers for the same message types in both bcpd and bnsd
//   applications. For example, FeeInfo field is used by both and indexed at
//   first position. Skip unused fields (leave index unused).
// When there is a gap in message sequence numbers - that most likely means some
// old fields got deprecated. This is done to maintain binary compatibility.
type Tx struct {
	Fees       *cash.FeeInfo        `protobuf:"bytes,1,opt,name=fees,proto3" json:"fees,omitempty"`
	Signatures []*sigs.StdSignature `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
	// ID of a multisig contract.
	Multisig [][]byte `protobuf:"bytes,4,rep,name=multisig,proto3" json:"multisig,omitempty"`
	// msg is a sum type over all allowed messages on this chain.
	//
	// Types that are valid to be assigned to Sum:
	//	*Tx_SendMsg
	//	*Tx_CreateEscrowMsg
	//	*Tx_ReleaseEscrowMsg
	//	*Tx_ReturnEscrowMsg
	//	*Tx_UpdateEscrowMsg
	//	*Tx_CreateContractMsg
	//	*Tx_UpdateContractMsg
	//	*Tx_SetValidatorsMsg
	//	*Tx_CreateTokenInfoMsg
	//	*Tx_BatchMsg
	//	*Tx_NewRevenueMsg
	//	*Tx_DistributeMsg
	//	*Tx_ResetRevenueMsg
	//	*Tx_UpgradeSchemaMsg
	Sum isTx_Sum `protobuf_oneof:"sum"`
}

func (m *Tx) Reset()         { *m = Tx{} }
func (m *Tx) String() string { return proto.CompactTextString(m) }
func (*Tx) ProtoMessage()    {}
func (*Tx) Descriptor() ([]byte, []int) {
	return fileDescriptor_afafc0607e3c9b8d, []int{0}
}
func (m *Tx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tx.Merge(m, src)
}
func (m *Tx) XXX_Size() int {
	return m.Size()
}
func (m *Tx) XXX_DiscardUnknown() {
	xxx_messageInfo_Tx.DiscardUnknown(m)
}

var xxx_messageInfo_Tx proto.InternalMessageInfo

type isTx_Sum interface {
	isTx_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Tx_SendMsg struct {
	SendMsg *cash.SendMsg `protobuf:"bytes,51,opt,name=send_msg,json=sendMsg,proto3,oneof"`
}
type Tx_CreateEscrowMsg struct {
	CreateEscrowMsg *escrow.CreateEscrowMsg `protobuf:"bytes,52,opt,name=create_escrow_msg,json=createEscrowMsg,proto3,oneof"`
}
type Tx_ReleaseEscrowMsg struct {
	ReleaseEscrowMsg *escrow.ReleaseEscrowMsg `protobuf:"bytes,53,opt,name=release_escrow_msg,json=releaseEscrowMsg,proto3,oneof"`
}
type Tx_ReturnEscrowMsg struct {
	ReturnEscrowMsg *escrow.ReturnEscrowMsg `protobuf:"bytes,54,opt,name=return_escrow_msg,json=returnEscrowMsg,proto3,oneof"`
}
type Tx_UpdateEscrowMsg struct {
	UpdateEscrowMsg *escrow.UpdateEscrowPartiesMsg `protobuf:"bytes,55,opt,name=update_escrow_msg,json=updateEscrowMsg,proto3,oneof"`
}
type Tx_CreateContractMsg struct {
	CreateContractMsg *multisig.CreateContractMsg `protobuf:"bytes,56,opt,name=create_contract_msg,json=createContractMsg,proto3,oneof"`
}
type Tx_UpdateContractMsg struct {
	UpdateContractMsg *multisig.UpdateContractMsg `protobuf:"bytes,57,opt,name=update_contract_msg,json=updateContractMsg,proto3,oneof"`
}
type Tx_SetValidatorsMsg struct {
	SetValidatorsMsg *validators.SetValidatorsMsg `protobuf:"bytes,58,opt,name=set_validators_msg,json=setValidatorsMsg,proto3,oneof"`
}
type Tx_CreateTokenInfoMsg struct {
	CreateTokenInfoMsg *currency.CreateTokenInfoMsg `protobuf:"bytes,59,opt,name=create_token_info_msg,json=createTokenInfoMsg,proto3,oneof"`
}
type Tx_BatchMsg struct {
	BatchMsg *BatchMsg `protobuf:"bytes,60,opt,name=batch_msg,json=batchMsg,proto3,oneof"`
}
type Tx_NewRevenueMsg struct {
	NewRevenueMsg *distribution.NewRevenueMsg `protobuf:"bytes,66,opt,name=new_revenue_msg,json=newRevenueMsg,proto3,oneof"`
}
type Tx_DistributeMsg struct {
	DistributeMsg *distribution.DistributeMsg `protobuf:"bytes,67,opt,name=distribute_msg,json=distributeMsg,proto3,oneof"`
}
type Tx_ResetRevenueMsg struct {
	ResetRevenueMsg *distribution.ResetRevenueMsg `protobuf:"bytes,68,opt,name=reset_revenue_msg,json=resetRevenueMsg,proto3,oneof"`
}
type Tx_UpgradeSchemaMsg struct {
	UpgradeSchemaMsg *migration.UpgradeSchemaMsg `protobuf:"bytes,69,opt,name=upgrade_schema_msg,json=upgradeSchemaMsg,proto3,oneof"`
}

func (*Tx_SendMsg) isTx_Sum()            {}
func (*Tx_CreateEscrowMsg) isTx_Sum()    {}
func (*Tx_ReleaseEscrowMsg) isTx_Sum()   {}
func (*Tx_ReturnEscrowMsg) isTx_Sum()    {}
func (*Tx_UpdateEscrowMsg) isTx_Sum()    {}
func (*Tx_CreateContractMsg) isTx_Sum()  {}
func (*Tx_UpdateContractMsg) isTx_Sum()  {}
func (*Tx_SetValidatorsMsg) isTx_Sum()   {}
func (*Tx_CreateTokenInfoMsg) isTx_Sum() {}
func (*Tx_BatchMsg) isTx_Sum()           {}
func (*Tx_NewRevenueMsg) isTx_Sum()      {}
func (*Tx_DistributeMsg) isTx_Sum()      {}
func (*Tx_ResetRevenueMsg) isTx_Sum()    {}
func (*Tx_UpgradeSchemaMsg) isTx_Sum()   {}

func (m *Tx) GetSum() isTx_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *Tx) GetFees() *cash.FeeInfo {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *Tx) GetSignatures() []*sigs.StdSignature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *Tx) GetMultisig() [][]byte {
	if m != nil {
		return m.Multisig
	}
	return nil
}

func (m *Tx) GetSendMsg() *cash.SendMsg {
	if x, ok := m.GetSum().(*Tx_SendMsg); ok {
		return x.SendMsg
	}
	return nil
}

func (m *Tx) GetCreateEscrowMsg() *escrow.CreateEscrowMsg {
	if x, ok := m.GetSum().(*Tx_CreateEscrowMsg); ok {
		return x.CreateEscrowMsg
	}
	return nil
}

func (m *Tx) GetReleaseEscrowMsg() *escrow.ReleaseEscrowMsg {
	if x, ok := m.GetSum().(*Tx_ReleaseEscrowMsg); ok {
		return x.ReleaseEscrowMsg
	}
	return nil
}

func (m *Tx) GetReturnEscrowMsg() *escrow.ReturnEscrowMsg {
	if x, ok := m.GetSum().(*Tx_ReturnEscrowMsg); ok {
		return x.ReturnEscrowMsg
	}
	return nil
}

func (m *Tx) GetUpdateEscrowMsg() *escrow.UpdateEscrowPartiesMsg {
	if x, ok := m.GetSum().(*Tx_UpdateEscrowMsg); ok {
		return x.UpdateEscrowMsg
	}
	return nil
}

func (m *Tx) GetCreateContractMsg() *multisig.CreateContractMsg {
	if x, ok := m.GetSum().(*Tx_CreateContractMsg); ok {
		return x.CreateContractMsg
	}
	return nil
}

func (m *Tx) GetUpdateContractMsg() *multisig.UpdateContractMsg {
	if x, ok := m.GetSum().(*Tx_UpdateContractMsg); ok {
		return x.UpdateContractMsg
	}
	return nil
}

func (m *Tx) GetSetValidatorsMsg() *validators.SetValidatorsMsg {
	if x, ok := m.GetSum().(*Tx_SetValidatorsMsg); ok {
		return x.SetValidatorsMsg
	}
	return nil
}

func (m *Tx) GetCreateTokenInfoMsg() *currency.CreateTokenInfoMsg {
	if x, ok := m.GetSum().(*Tx_CreateTokenInfoMsg); ok {
		return x.CreateTokenInfoMsg
	}
	return nil
}

func (m *Tx) GetBatchMsg() *BatchMsg {
	if x, ok := m.GetSum().(*Tx_BatchMsg); ok {
		return x.BatchMsg
	}
	return nil
}

func (m *Tx) GetNewRevenueMsg() *distribution.NewRevenueMsg {
	if x, ok := m.GetSum().(*Tx_NewRevenueMsg); ok {
		return x.NewRevenueMsg
	}
	return nil
}

func (m *Tx) GetDistributeMsg() *distribution.DistributeMsg {
	if x, ok := m.GetSum().(*Tx_DistributeMsg); ok {
		return x.DistributeMsg
	}
	return nil
}

func (m *Tx) GetResetRevenueMsg() *distribution.ResetRevenueMsg {
	if x, ok := m.GetSum().(*Tx_ResetRevenueMsg); ok {
		return x.ResetRevenueMsg
	}
	return nil
}

func (m *Tx) GetUpgradeSchemaMsg() *migration.UpgradeSchemaMsg {
	if x, ok := m.GetSum().(*Tx_UpgradeSchemaMsg); ok {
		return x.UpgradeSchemaMsg
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Tx) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Tx_OneofMarshaler, _Tx_OneofUnmarshaler, _Tx_OneofSizer, []interface{}{
		(*Tx_SendMsg)(nil),
		(*Tx_CreateEscrowMsg)(nil),
		(*Tx_ReleaseEscrowMsg)(nil),
		(*Tx_ReturnEscrowMsg)(nil),
		(*Tx_UpdateEscrowMsg)(nil),
		(*Tx_CreateContractMsg)(nil),
		(*Tx_UpdateContractMsg)(nil),
		(*Tx_SetValidatorsMsg)(nil),
		(*Tx_CreateTokenInfoMsg)(nil),
		(*Tx_BatchMsg)(nil),
		(*Tx_NewRevenueMsg)(nil),
		(*Tx_DistributeMsg)(nil),
		(*Tx_ResetRevenueMsg)(nil),
		(*Tx_UpgradeSchemaMsg)(nil),
	}
}

func _Tx_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Tx)
	// sum
	switch x := m.Sum.(type) {
	case *Tx_SendMsg:
		_ = b.EncodeVarint(51<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SendMsg); err != nil {
			return err
		}
	case *Tx_CreateEscrowMsg:
		_ = b.EncodeVarint(52<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateEscrowMsg); err != nil {
			return err
		}
	case *Tx_ReleaseEscrowMsg:
		_ = b.EncodeVarint(53<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReleaseEscrowMsg); err != nil {
			return err
		}
	case *Tx_ReturnEscrowMsg:
		_ = b.EncodeVarint(54<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReturnEscrowMsg); err != nil {
			return err
		}
	case *Tx_UpdateEscrowMsg:
		_ = b.EncodeVarint(55<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateEscrowMsg); err != nil {
			return err
		}
	case *Tx_CreateContractMsg:
		_ = b.EncodeVarint(56<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateContractMsg); err != nil {
			return err
		}
	case *Tx_UpdateContractMsg:
		_ = b.EncodeVarint(57<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateContractMsg); err != nil {
			return err
		}
	case *Tx_SetValidatorsMsg:
		_ = b.EncodeVarint(58<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetValidatorsMsg); err != nil {
			return err
		}
	case *Tx_CreateTokenInfoMsg:
		_ = b.EncodeVarint(59<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateTokenInfoMsg); err != nil {
			return err
		}
	case *Tx_BatchMsg:
		_ = b.EncodeVarint(60<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatchMsg); err != nil {
			return err
		}
	case *Tx_NewRevenueMsg:
		_ = b.EncodeVarint(66<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewRevenueMsg); err != nil {
			return err
		}
	case *Tx_DistributeMsg:
		_ = b.EncodeVarint(67<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DistributeMsg); err != nil {
			return err
		}
	case *Tx_ResetRevenueMsg:
		_ = b.EncodeVarint(68<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ResetRevenueMsg); err != nil {
			return err
		}
	case *Tx_UpgradeSchemaMsg:
		_ = b.EncodeVarint(69<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpgradeSchemaMsg); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Tx.Sum has unexpected type %T", x)
	}
	return nil
}

func _Tx_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Tx)
	switch tag {
	case 51: // sum.send_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(cash.SendMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_SendMsg{msg}
		return true, err
	case 52: // sum.create_escrow_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.CreateEscrowMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_CreateEscrowMsg{msg}
		return true, err
	case 53: // sum.release_escrow_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.ReleaseEscrowMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_ReleaseEscrowMsg{msg}
		return true, err
	case 54: // sum.return_escrow_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.ReturnEscrowMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_ReturnEscrowMsg{msg}
		return true, err
	case 55: // sum.update_escrow_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.UpdateEscrowPartiesMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_UpdateEscrowMsg{msg}
		return true, err
	case 56: // sum.create_contract_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(multisig.CreateContractMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_CreateContractMsg{msg}
		return true, err
	case 57: // sum.update_contract_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(multisig.UpdateContractMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_UpdateContractMsg{msg}
		return true, err
	case 58: // sum.set_validators_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(validators.SetValidatorsMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_SetValidatorsMsg{msg}
		return true, err
	case 59: // sum.create_token_info_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(currency.CreateTokenInfoMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_CreateTokenInfoMsg{msg}
		return true, err
	case 60: // sum.batch_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_BatchMsg{msg}
		return true, err
	case 66: // sum.new_revenue_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(distribution.NewRevenueMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_NewRevenueMsg{msg}
		return true, err
	case 67: // sum.distribute_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(distribution.DistributeMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_DistributeMsg{msg}
		return true, err
	case 68: // sum.reset_revenue_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(distribution.ResetRevenueMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_ResetRevenueMsg{msg}
		return true, err
	case 69: // sum.upgrade_schema_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(migration.UpgradeSchemaMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_UpgradeSchemaMsg{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Tx_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Tx)
	// sum
	switch x := m.Sum.(type) {
	case *Tx_SendMsg:
		s := proto.Size(x.SendMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_CreateEscrowMsg:
		s := proto.Size(x.CreateEscrowMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_ReleaseEscrowMsg:
		s := proto.Size(x.ReleaseEscrowMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_ReturnEscrowMsg:
		s := proto.Size(x.ReturnEscrowMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_UpdateEscrowMsg:
		s := proto.Size(x.UpdateEscrowMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_CreateContractMsg:
		s := proto.Size(x.CreateContractMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_UpdateContractMsg:
		s := proto.Size(x.UpdateContractMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_SetValidatorsMsg:
		s := proto.Size(x.SetValidatorsMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_CreateTokenInfoMsg:
		s := proto.Size(x.CreateTokenInfoMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_BatchMsg:
		s := proto.Size(x.BatchMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_NewRevenueMsg:
		s := proto.Size(x.NewRevenueMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_DistributeMsg:
		s := proto.Size(x.DistributeMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_ResetRevenueMsg:
		s := proto.Size(x.ResetRevenueMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_UpgradeSchemaMsg:
		s := proto.Size(x.UpgradeSchemaMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// BatchMsg encapsulates multiple messages to support batch transaction
type BatchMsg struct {
	Messages []BatchMsg_Union `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages"`
}

func (m *BatchMsg) Reset()         { *m = BatchMsg{} }
func (m *BatchMsg) String() string { return proto.CompactTextString(m) }
func (*BatchMsg) ProtoMessage()    {}
func (*BatchMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_afafc0607e3c9b8d, []int{1}
}
func (m *BatchMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchMsg.Merge(m, src)
}
func (m *BatchMsg) XXX_Size() int {
	return m.Size()
}
func (m *BatchMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchMsg.DiscardUnknown(m)
}

var xxx_messageInfo_BatchMsg proto.InternalMessageInfo

func (m *BatchMsg) GetMessages() []BatchMsg_Union {
	if m != nil {
		return m.Messages
	}
	return nil
}

type BatchMsg_Union struct {
	// Types that are valid to be assigned to Sum:
	//	*BatchMsg_Union_SendMsg
	//	*BatchMsg_Union_CreateEscrowMsg
	//	*BatchMsg_Union_ReleaseEscrowMsg
	//	*BatchMsg_Union_ReturnEscrowMsg
	//	*BatchMsg_Union_UpdateEscrowMsg
	//	*BatchMsg_Union_CreateContractMsg
	//	*BatchMsg_Union_UpdateContractMsg
	//	*BatchMsg_Union_SetValidatorsMsg
	//	*BatchMsg_Union_CreateTokenInfoMsg
	Sum isBatchMsg_Union_Sum `protobuf_oneof:"sum"`
}

func (m *BatchMsg_Union) Reset()         { *m = BatchMsg_Union{} }
func (m *BatchMsg_Union) String() string { return proto.CompactTextString(m) }
func (*BatchMsg_Union) ProtoMessage()    {}
func (*BatchMsg_Union) Descriptor() ([]byte, []int) {
	return fileDescriptor_afafc0607e3c9b8d, []int{1, 0}
}
func (m *BatchMsg_Union) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchMsg_Union) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchMsg_Union.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchMsg_Union) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchMsg_Union.Merge(m, src)
}
func (m *BatchMsg_Union) XXX_Size() int {
	return m.Size()
}
func (m *BatchMsg_Union) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchMsg_Union.DiscardUnknown(m)
}

var xxx_messageInfo_BatchMsg_Union proto.InternalMessageInfo

type isBatchMsg_Union_Sum interface {
	isBatchMsg_Union_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type BatchMsg_Union_SendMsg struct {
	SendMsg *cash.SendMsg `protobuf:"bytes,1,opt,name=send_msg,json=sendMsg,proto3,oneof"`
}
type BatchMsg_Union_CreateEscrowMsg struct {
	CreateEscrowMsg *escrow.CreateEscrowMsg `protobuf:"bytes,4,opt,name=create_escrow_msg,json=createEscrowMsg,proto3,oneof"`
}
type BatchMsg_Union_ReleaseEscrowMsg struct {
	ReleaseEscrowMsg *escrow.ReleaseEscrowMsg `protobuf:"bytes,5,opt,name=release_escrow_msg,json=releaseEscrowMsg,proto3,oneof"`
}
type BatchMsg_Union_ReturnEscrowMsg struct {
	ReturnEscrowMsg *escrow.ReturnEscrowMsg `protobuf:"bytes,6,opt,name=return_escrow_msg,json=returnEscrowMsg,proto3,oneof"`
}
type BatchMsg_Union_UpdateEscrowMsg struct {
	UpdateEscrowMsg *escrow.UpdateEscrowPartiesMsg `protobuf:"bytes,7,opt,name=update_escrow_msg,json=updateEscrowMsg,proto3,oneof"`
}
type BatchMsg_Union_CreateContractMsg struct {
	CreateContractMsg *multisig.CreateContractMsg `protobuf:"bytes,8,opt,name=create_contract_msg,json=createContractMsg,proto3,oneof"`
}
type BatchMsg_Union_UpdateContractMsg struct {
	UpdateContractMsg *multisig.UpdateContractMsg `protobuf:"bytes,9,opt,name=update_contract_msg,json=updateContractMsg,proto3,oneof"`
}
type BatchMsg_Union_SetValidatorsMsg struct {
	SetValidatorsMsg *validators.SetValidatorsMsg `protobuf:"bytes,10,opt,name=set_validators_msg,json=setValidatorsMsg,proto3,oneof"`
}
type BatchMsg_Union_CreateTokenInfoMsg struct {
	CreateTokenInfoMsg *currency.CreateTokenInfoMsg `protobuf:"bytes,11,opt,name=create_token_info_msg,json=createTokenInfoMsg,proto3,oneof"`
}

func (*BatchMsg_Union_SendMsg) isBatchMsg_Union_Sum()            {}
func (*BatchMsg_Union_CreateEscrowMsg) isBatchMsg_Union_Sum()    {}
func (*BatchMsg_Union_ReleaseEscrowMsg) isBatchMsg_Union_Sum()   {}
func (*BatchMsg_Union_ReturnEscrowMsg) isBatchMsg_Union_Sum()    {}
func (*BatchMsg_Union_UpdateEscrowMsg) isBatchMsg_Union_Sum()    {}
func (*BatchMsg_Union_CreateContractMsg) isBatchMsg_Union_Sum()  {}
func (*BatchMsg_Union_UpdateContractMsg) isBatchMsg_Union_Sum()  {}
func (*BatchMsg_Union_SetValidatorsMsg) isBatchMsg_Union_Sum()   {}
func (*BatchMsg_Union_CreateTokenInfoMsg) isBatchMsg_Union_Sum() {}

func (m *BatchMsg_Union) GetSum() isBatchMsg_Union_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *BatchMsg_Union) GetSendMsg() *cash.SendMsg {
	if x, ok := m.GetSum().(*BatchMsg_Union_SendMsg); ok {
		return x.SendMsg
	}
	return nil
}

func (m *BatchMsg_Union) GetCreateEscrowMsg() *escrow.CreateEscrowMsg {
	if x, ok := m.GetSum().(*BatchMsg_Union_CreateEscrowMsg); ok {
		return x.CreateEscrowMsg
	}
	return nil
}

func (m *BatchMsg_Union) GetReleaseEscrowMsg() *escrow.ReleaseEscrowMsg {
	if x, ok := m.GetSum().(*BatchMsg_Union_ReleaseEscrowMsg); ok {
		return x.ReleaseEscrowMsg
	}
	return nil
}

func (m *BatchMsg_Union) GetReturnEscrowMsg() *escrow.ReturnEscrowMsg {
	if x, ok := m.GetSum().(*BatchMsg_Union_ReturnEscrowMsg); ok {
		return x.ReturnEscrowMsg
	}
	return nil
}

func (m *BatchMsg_Union) GetUpdateEscrowMsg() *escrow.UpdateEscrowPartiesMsg {
	if x, ok := m.GetSum().(*BatchMsg_Union_UpdateEscrowMsg); ok {
		return x.UpdateEscrowMsg
	}
	return nil
}

func (m *BatchMsg_Union) GetCreateContractMsg() *multisig.CreateContractMsg {
	if x, ok := m.GetSum().(*BatchMsg_Union_CreateContractMsg); ok {
		return x.CreateContractMsg
	}
	return nil
}

func (m *BatchMsg_Union) GetUpdateContractMsg() *multisig.UpdateContractMsg {
	if x, ok := m.GetSum().(*BatchMsg_Union_UpdateContractMsg); ok {
		return x.UpdateContractMsg
	}
	return nil
}

func (m *BatchMsg_Union) GetSetValidatorsMsg() *validators.SetValidatorsMsg {
	if x, ok := m.GetSum().(*BatchMsg_Union_SetValidatorsMsg); ok {
		return x.SetValidatorsMsg
	}
	return nil
}

func (m *BatchMsg_Union) GetCreateTokenInfoMsg() *currency.CreateTokenInfoMsg {
	if x, ok := m.GetSum().(*BatchMsg_Union_CreateTokenInfoMsg); ok {
		return x.CreateTokenInfoMsg
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BatchMsg_Union) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BatchMsg_Union_OneofMarshaler, _BatchMsg_Union_OneofUnmarshaler, _BatchMsg_Union_OneofSizer, []interface{}{
		(*BatchMsg_Union_SendMsg)(nil),
		(*BatchMsg_Union_CreateEscrowMsg)(nil),
		(*BatchMsg_Union_ReleaseEscrowMsg)(nil),
		(*BatchMsg_Union_ReturnEscrowMsg)(nil),
		(*BatchMsg_Union_UpdateEscrowMsg)(nil),
		(*BatchMsg_Union_CreateContractMsg)(nil),
		(*BatchMsg_Union_UpdateContractMsg)(nil),
		(*BatchMsg_Union_SetValidatorsMsg)(nil),
		(*BatchMsg_Union_CreateTokenInfoMsg)(nil),
	}
}

func _BatchMsg_Union_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BatchMsg_Union)
	// sum
	switch x := m.Sum.(type) {
	case *BatchMsg_Union_SendMsg:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SendMsg); err != nil {
			return err
		}
	case *BatchMsg_Union_CreateEscrowMsg:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateEscrowMsg); err != nil {
			return err
		}
	case *BatchMsg_Union_ReleaseEscrowMsg:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReleaseEscrowMsg); err != nil {
			return err
		}
	case *BatchMsg_Union_ReturnEscrowMsg:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReturnEscrowMsg); err != nil {
			return err
		}
	case *BatchMsg_Union_UpdateEscrowMsg:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateEscrowMsg); err != nil {
			return err
		}
	case *BatchMsg_Union_CreateContractMsg:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateContractMsg); err != nil {
			return err
		}
	case *BatchMsg_Union_UpdateContractMsg:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateContractMsg); err != nil {
			return err
		}
	case *BatchMsg_Union_SetValidatorsMsg:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetValidatorsMsg); err != nil {
			return err
		}
	case *BatchMsg_Union_CreateTokenInfoMsg:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateTokenInfoMsg); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BatchMsg_Union.Sum has unexpected type %T", x)
	}
	return nil
}

func _BatchMsg_Union_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BatchMsg_Union)
	switch tag {
	case 1: // sum.send_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(cash.SendMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &BatchMsg_Union_SendMsg{msg}
		return true, err
	case 4: // sum.create_escrow_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.CreateEscrowMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &BatchMsg_Union_CreateEscrowMsg{msg}
		return true, err
	case 5: // sum.release_escrow_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.ReleaseEscrowMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &BatchMsg_Union_ReleaseEscrowMsg{msg}
		return true, err
	case 6: // sum.return_escrow_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.ReturnEscrowMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &BatchMsg_Union_ReturnEscrowMsg{msg}
		return true, err
	case 7: // sum.update_escrow_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.UpdateEscrowPartiesMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &BatchMsg_Union_UpdateEscrowMsg{msg}
		return true, err
	case 8: // sum.create_contract_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(multisig.CreateContractMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &BatchMsg_Union_CreateContractMsg{msg}
		return true, err
	case 9: // sum.update_contract_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(multisig.UpdateContractMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &BatchMsg_Union_UpdateContractMsg{msg}
		return true, err
	case 10: // sum.set_validators_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(validators.SetValidatorsMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &BatchMsg_Union_SetValidatorsMsg{msg}
		return true, err
	case 11: // sum.create_token_info_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(currency.CreateTokenInfoMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &BatchMsg_Union_CreateTokenInfoMsg{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BatchMsg_Union_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BatchMsg_Union)
	// sum
	switch x := m.Sum.(type) {
	case *BatchMsg_Union_SendMsg:
		s := proto.Size(x.SendMsg)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BatchMsg_Union_CreateEscrowMsg:
		s := proto.Size(x.CreateEscrowMsg)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BatchMsg_Union_ReleaseEscrowMsg:
		s := proto.Size(x.ReleaseEscrowMsg)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BatchMsg_Union_ReturnEscrowMsg:
		s := proto.Size(x.ReturnEscrowMsg)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BatchMsg_Union_UpdateEscrowMsg:
		s := proto.Size(x.UpdateEscrowMsg)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BatchMsg_Union_CreateContractMsg:
		s := proto.Size(x.CreateContractMsg)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BatchMsg_Union_UpdateContractMsg:
		s := proto.Size(x.UpdateContractMsg)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BatchMsg_Union_SetValidatorsMsg:
		s := proto.Size(x.SetValidatorsMsg)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BatchMsg_Union_CreateTokenInfoMsg:
		s := proto.Size(x.CreateTokenInfoMsg)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Tx)(nil), "app.Tx")
	proto.RegisterType((*BatchMsg)(nil), "app.BatchMsg")
	proto.RegisterType((*BatchMsg_Union)(nil), "app.BatchMsg.Union")
}

func init() { proto.RegisterFile("cmd/bcpd/app/codec.proto", fileDescriptor_afafc0607e3c9b8d) }

var fileDescriptor_afafc0607e3c9b8d = []byte{
	// 721 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0x4f, 0x4f, 0xdb, 0x30,
	0x18, 0xc6, 0x5b, 0xda, 0x42, 0x31, 0x63, 0x0c, 0x03, 0x5b, 0xd4, 0x6d, 0x1d, 0xe3, 0x84, 0xa6,
	0xc9, 0x91, 0x60, 0xec, 0xff, 0xa9, 0xd0, 0x89, 0x09, 0x98, 0xb6, 0x14, 0x76, 0xad, 0x5c, 0xc7,
	0x84, 0x68, 0xd4, 0x89, 0x6c, 0x07, 0xba, 0x6f, 0xb1, 0x6f, 0xb0, 0xaf, 0xc3, 0x91, 0xe3, 0x4e,
	0xd3, 0x44, 0xf7, 0x41, 0xa6, 0xd8, 0x4e, 0x89, 0xc3, 0x4e, 0x28, 0xb7, 0xf8, 0xf1, 0xf3, 0xfe,
	0xf2, 0xe6, 0xb5, 0xfb, 0x14, 0x38, 0x64, 0xe8, 0xbb, 0x03, 0x12, 0xfb, 0x2e, 0x8e, 0x63, 0x97,
	0x44, 0x3e, 0x25, 0x28, 0xe6, 0x91, 0x8c, 0x60, 0x0d, 0xc7, 0x71, 0x6b, 0x39, 0x88, 0x82, 0x48,
	0xad, 0xdd, 0xf4, 0x49, 0x6f, 0xb5, 0x56, 0x86, 0x61, 0xc0, 0xb1, 0x0c, 0x23, 0x96, 0xaf, 0x68,
	0xc1, 0x91, 0x4b, 0xb0, 0x38, 0xb1, 0xb4, 0xfb, 0x23, 0x97, 0x24, 0x9c, 0x53, 0x46, 0xbe, 0x5b,
	0x7a, 0x6b, 0xe4, 0xfa, 0xa1, 0x90, 0x3c, 0x1c, 0x24, 0x37, 0x38, 0xcb, 0x23, 0x97, 0x0a, 0xc2,
	0xa3, 0xf3, 0x22, 0x69, 0x98, 0x9c, 0xca, 0x50, 0x84, 0x41, 0xf1, 0xad, 0x22, 0x0c, 0x84, 0xa5,
	0x39, 0x23, 0xf7, 0x0c, 0x9f, 0x86, 0x3e, 0x96, 0x11, 0xb7, 0x76, 0xd6, 0xfe, 0x36, 0xc1, 0xd4,
	0xe1, 0x08, 0x3e, 0x05, 0xf5, 0x63, 0x4a, 0x85, 0x53, 0x5d, 0xad, 0xae, 0xcf, 0x6d, 0xcc, 0xa3,
	0xb4, 0x6f, 0xf4, 0x81, 0xd2, 0x8f, 0xec, 0x38, 0xf2, 0xd4, 0x16, 0xdc, 0x00, 0x40, 0x84, 0x01,
	0xc3, 0x32, 0xe1, 0x54, 0x38, 0x53, 0xab, 0xb5, 0xf5, 0xb9, 0x0d, 0x88, 0xd2, 0x57, 0xa1, 0x9e,
	0xf4, 0x7b, 0xd9, 0x96, 0x97, 0x73, 0xc1, 0x16, 0x68, 0x66, 0x3d, 0x3a, 0xf5, 0xd5, 0xda, 0xfa,
	0x1d, 0x6f, 0xb2, 0x86, 0xcf, 0x40, 0x53, 0x50, 0xe6, 0xf7, 0x87, 0x22, 0x70, 0x36, 0xf3, 0xaf,
	0xed, 0x51, 0xe6, 0x1f, 0x88, 0x60, 0xb7, 0xe2, 0xcd, 0x08, 0xfd, 0x08, 0xbb, 0x60, 0x91, 0x70,
	0x8a, 0x25, 0xed, 0xeb, 0x41, 0xa8, 0xa2, 0x17, 0xaa, 0xe8, 0x01, 0xd2, 0x12, 0xda, 0x56, 0x86,
	0xae, 0x5a, 0xe8, 0xf2, 0x05, 0x62, 0x4b, 0x70, 0x17, 0x40, 0x4e, 0x4f, 0x29, 0x16, 0x16, 0x67,
	0x4b, 0x71, 0x9c, 0x8c, 0xe3, 0x69, 0x47, 0x1e, 0x74, 0x8f, 0x17, 0xb4, 0xb4, 0x21, 0x4e, 0x65,
	0xc2, 0x59, 0x1e, 0xf4, 0xd2, 0x6e, 0xc8, 0x53, 0x06, 0xab, 0x21, 0x6e, 0x4b, 0x70, 0x1f, 0x2c,
	0x26, 0xb1, 0x5f, 0xf8, 0xae, 0x57, 0x0a, 0xd3, 0xce, 0x30, 0x47, 0xca, 0xa0, 0x6b, 0x3e, 0x63,
	0x2e, 0x43, 0x2a, 0x0c, 0x2d, 0xc9, 0xed, 0xa4, 0xb4, 0x03, 0xb0, 0x64, 0xa6, 0x44, 0x22, 0x26,
	0x39, 0x26, 0x52, 0xf1, 0x5e, 0x2b, 0xde, 0x43, 0x94, 0x4d, 0xde, 0x4c, 0x6a, 0xdb, 0x78, 0x34,
	0xcc, 0xcc, 0x37, 0x27, 0xa6, 0x38, 0xd3, 0x9c, 0x85, 0x7b, 0x53, 0xc4, 0xe9, 0x06, 0x0b, 0xb8,
	0xa4, 0x28, 0xc2, 0x7d, 0x00, 0x05, 0x95, 0xfd, 0xeb, 0x7b, 0xa8, 0x68, 0x6f, 0x15, 0xed, 0x11,
	0xba, 0x96, 0x51, 0x8f, 0xca, 0xaf, 0x93, 0x95, 0x39, 0x00, 0x51, 0xd0, 0xe0, 0x17, 0xb0, 0x62,
	0xbe, 0x55, 0x46, 0xdf, 0x28, 0xeb, 0x87, 0xec, 0x38, 0x52, 0xc0, 0x77, 0x06, 0x98, 0xfd, 0xca,
	0xcc, 0xd7, 0x1e, 0xa6, 0xae, 0xf4, 0x36, 0x6b, 0x20, 0x24, 0x37, 0x54, 0xf8, 0x1c, 0xcc, 0x0e,
	0xb0, 0x24, 0x27, 0x0a, 0xf3, 0xde, 0xdc, 0x48, 0x1c, 0xc7, 0xa8, 0x93, 0xaa, 0xba, 0xae, 0x39,
	0x30, 0xcf, 0xb0, 0x0b, 0x16, 0x18, 0x3d, 0xef, 0x73, 0x7a, 0x46, 0x59, 0x42, 0x55, 0x4d, 0xc7,
	0x4c, 0x26, 0xff, 0x43, 0x46, 0x9f, 0xe8, 0xb9, 0xa7, 0x3d, 0x9a, 0x30, 0xcf, 0xf2, 0x02, 0xdc,
	0x01, 0x77, 0x27, 0x76, 0x4d, 0xd9, 0xfe, 0x1f, 0x65, 0x67, 0xe2, 0x31, 0x14, 0x3f, 0x2f, 0xc0,
	0xbd, 0xf4, 0x3a, 0xa6, 0xd3, 0xcd, 0xb7, 0xb3, 0xa3, 0x40, 0x8f, 0x6d, 0x90, 0x97, 0xda, 0xac,
	0x86, 0x16, 0xb8, 0x2d, 0xc1, 0x3d, 0x00, 0x93, 0x38, 0xe0, 0xd8, 0xa7, 0x7d, 0x41, 0x4e, 0xe8,
	0x10, 0x2b, 0x5a, 0x37, 0x3b, 0xf6, 0x2c, 0xea, 0xd0, 0x91, 0x36, 0xf5, 0x94, 0xc7, 0x9c, 0x53,
	0x52, 0xd0, 0x3a, 0x0d, 0x50, 0x13, 0xc9, 0x70, 0x6d, 0xdc, 0x00, 0xcd, 0x6c, 0x8c, 0x70, 0x0b,
	0x34, 0x87, 0x54, 0x08, 0x1c, 0xa8, 0xc0, 0x49, 0x73, 0x64, 0xc9, 0x9a, 0x33, 0x3a, 0x62, 0x61,
	0xc4, 0x3a, 0xf5, 0x8b, 0xdf, 0x4f, 0x2a, 0xde, 0xc4, 0xda, 0xfa, 0xd9, 0x00, 0x0d, 0xb5, 0x63,
	0x45, 0x47, 0xf5, 0x36, 0xd1, 0x51, 0x2f, 0x29, 0x3a, 0x1a, 0x65, 0x45, 0xc7, 0x74, 0x39, 0xd1,
	0x31, 0x53, 0x72, 0x74, 0x34, 0xcb, 0x8d, 0x8e, 0xd9, 0x52, 0xa3, 0x03, 0x94, 0x1d, 0x1d, 0x73,
	0xb7, 0x8d, 0x0e, 0x73, 0xcb, 0x3b, 0xce, 0xc5, 0x55, 0xbb, 0x7a, 0x79, 0xd5, 0xae, 0xfe, 0xb9,
	0x6a, 0x57, 0x7f, 0x8c, 0xdb, 0x95, 0xcb, 0x71, 0xbb, 0xf2, 0x6b, 0xdc, 0xae, 0x0c, 0xa6, 0xd5,
	0xbf, 0xed, 0xe6, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe3, 0xbc, 0x74, 0xf7, 0x5f, 0x08, 0x00,
	0x00,
}

func (m *Tx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tx) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fees != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Fees.Size()))
		n1, err := m.Fees.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Signatures) > 0 {
		for _, msg := range m.Signatures {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCodec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Multisig) > 0 {
		for _, b := range m.Multisig {
			dAtA[i] = 0x22
			i++
			i = encodeVarintCodec(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Sum != nil {
		nn2, err := m.Sum.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *Tx_SendMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SendMsg != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.SendMsg.Size()))
		n3, err := m.SendMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Tx_CreateEscrowMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateEscrowMsg != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.CreateEscrowMsg.Size()))
		n4, err := m.CreateEscrowMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Tx_ReleaseEscrowMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReleaseEscrowMsg != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.ReleaseEscrowMsg.Size()))
		n5, err := m.ReleaseEscrowMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Tx_ReturnEscrowMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReturnEscrowMsg != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.ReturnEscrowMsg.Size()))
		n6, err := m.ReturnEscrowMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Tx_UpdateEscrowMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateEscrowMsg != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UpdateEscrowMsg.Size()))
		n7, err := m.UpdateEscrowMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Tx_CreateContractMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateContractMsg != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.CreateContractMsg.Size()))
		n8, err := m.CreateContractMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Tx_UpdateContractMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateContractMsg != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UpdateContractMsg.Size()))
		n9, err := m.UpdateContractMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Tx_SetValidatorsMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SetValidatorsMsg != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.SetValidatorsMsg.Size()))
		n10, err := m.SetValidatorsMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *Tx_CreateTokenInfoMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateTokenInfoMsg != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.CreateTokenInfoMsg.Size()))
		n11, err := m.CreateTokenInfoMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *Tx_BatchMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BatchMsg != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BatchMsg.Size()))
		n12, err := m.BatchMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *Tx_NewRevenueMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NewRevenueMsg != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.NewRevenueMsg.Size()))
		n13, err := m.NewRevenueMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *Tx_DistributeMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DistributeMsg != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.DistributeMsg.Size()))
		n14, err := m.DistributeMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *Tx_ResetRevenueMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ResetRevenueMsg != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.ResetRevenueMsg.Size()))
		n15, err := m.ResetRevenueMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *Tx_UpgradeSchemaMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpgradeSchemaMsg != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UpgradeSchemaMsg.Size()))
		n16, err := m.UpgradeSchemaMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *BatchMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCodec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BatchMsg_Union) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchMsg_Union) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		nn17, err := m.Sum.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn17
	}
	return i, nil
}

func (m *BatchMsg_Union_SendMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SendMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.SendMsg.Size()))
		n18, err := m.SendMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *BatchMsg_Union_CreateEscrowMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateEscrowMsg != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.CreateEscrowMsg.Size()))
		n19, err := m.CreateEscrowMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *BatchMsg_Union_ReleaseEscrowMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReleaseEscrowMsg != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.ReleaseEscrowMsg.Size()))
		n20, err := m.ReleaseEscrowMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *BatchMsg_Union_ReturnEscrowMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReturnEscrowMsg != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.ReturnEscrowMsg.Size()))
		n21, err := m.ReturnEscrowMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *BatchMsg_Union_UpdateEscrowMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateEscrowMsg != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UpdateEscrowMsg.Size()))
		n22, err := m.UpdateEscrowMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *BatchMsg_Union_CreateContractMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateContractMsg != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.CreateContractMsg.Size()))
		n23, err := m.CreateContractMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *BatchMsg_Union_UpdateContractMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateContractMsg != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UpdateContractMsg.Size()))
		n24, err := m.UpdateContractMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *BatchMsg_Union_SetValidatorsMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SetValidatorsMsg != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.SetValidatorsMsg.Size()))
		n25, err := m.SetValidatorsMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *BatchMsg_Union_CreateTokenInfoMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateTokenInfoMsg != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.CreateTokenInfoMsg.Size()))
		n26, err := m.CreateTokenInfoMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func encodeVarintCodec(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Tx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fees != nil {
		l = m.Fees.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	if len(m.Signatures) > 0 {
		for _, e := range m.Signatures {
			l = e.Size()
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	if len(m.Multisig) > 0 {
		for _, b := range m.Multisig {
			l = len(b)
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *Tx_SendMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SendMsg != nil {
		l = m.SendMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_CreateEscrowMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateEscrowMsg != nil {
		l = m.CreateEscrowMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_ReleaseEscrowMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReleaseEscrowMsg != nil {
		l = m.ReleaseEscrowMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_ReturnEscrowMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReturnEscrowMsg != nil {
		l = m.ReturnEscrowMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_UpdateEscrowMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateEscrowMsg != nil {
		l = m.UpdateEscrowMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_CreateContractMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateContractMsg != nil {
		l = m.CreateContractMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_UpdateContractMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateContractMsg != nil {
		l = m.UpdateContractMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_SetValidatorsMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SetValidatorsMsg != nil {
		l = m.SetValidatorsMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_CreateTokenInfoMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTokenInfoMsg != nil {
		l = m.CreateTokenInfoMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_BatchMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchMsg != nil {
		l = m.BatchMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_NewRevenueMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewRevenueMsg != nil {
		l = m.NewRevenueMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_DistributeMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DistributeMsg != nil {
		l = m.DistributeMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_ResetRevenueMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResetRevenueMsg != nil {
		l = m.ResetRevenueMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_UpgradeSchemaMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpgradeSchemaMsg != nil {
		l = m.UpgradeSchemaMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *BatchMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	return n
}

func (m *BatchMsg_Union) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *BatchMsg_Union_SendMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SendMsg != nil {
		l = m.SendMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *BatchMsg_Union_CreateEscrowMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateEscrowMsg != nil {
		l = m.CreateEscrowMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *BatchMsg_Union_ReleaseEscrowMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReleaseEscrowMsg != nil {
		l = m.ReleaseEscrowMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *BatchMsg_Union_ReturnEscrowMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReturnEscrowMsg != nil {
		l = m.ReturnEscrowMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *BatchMsg_Union_UpdateEscrowMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateEscrowMsg != nil {
		l = m.UpdateEscrowMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *BatchMsg_Union_CreateContractMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateContractMsg != nil {
		l = m.CreateContractMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *BatchMsg_Union_UpdateContractMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateContractMsg != nil {
		l = m.UpdateContractMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *BatchMsg_Union_SetValidatorsMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SetValidatorsMsg != nil {
		l = m.SetValidatorsMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *BatchMsg_Union_CreateTokenInfoMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTokenInfoMsg != nil {
		l = m.CreateTokenInfoMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}

func sovCodec(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCodec(x uint64) (n int) {
	return sovCodec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fees == nil {
				m.Fees = &cash.FeeInfo{}
			}
			if err := m.Fees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, &sigs.StdSignature{})
			if err := m.Signatures[len(m.Signatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multisig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Multisig = append(m.Multisig, make([]byte, postIndex-iNdEx))
			copy(m.Multisig[len(m.Multisig)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &cash.SendMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_SendMsg{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateEscrowMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.CreateEscrowMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_CreateEscrowMsg{v}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseEscrowMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.ReleaseEscrowMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_ReleaseEscrowMsg{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnEscrowMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.ReturnEscrowMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_ReturnEscrowMsg{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateEscrowMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.UpdateEscrowPartiesMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_UpdateEscrowMsg{v}
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateContractMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &multisig.CreateContractMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_CreateContractMsg{v}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateContractMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &multisig.UpdateContractMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_UpdateContractMsg{v}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetValidatorsMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &validators.SetValidatorsMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_SetValidatorsMsg{v}
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTokenInfoMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &currency.CreateTokenInfoMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_CreateTokenInfoMsg{v}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BatchMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_BatchMsg{v}
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewRevenueMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &distribution.NewRevenueMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_NewRevenueMsg{v}
			iNdEx = postIndex
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributeMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &distribution.DistributeMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_DistributeMsg{v}
			iNdEx = postIndex
		case 68:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetRevenueMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &distribution.ResetRevenueMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_ResetRevenueMsg{v}
			iNdEx = postIndex
		case 69:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeSchemaMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &migration.UpgradeSchemaMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_UpgradeSchemaMsg{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, BatchMsg_Union{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchMsg_Union) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Union: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Union: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &cash.SendMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &BatchMsg_Union_SendMsg{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateEscrowMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.CreateEscrowMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &BatchMsg_Union_CreateEscrowMsg{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseEscrowMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.ReleaseEscrowMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &BatchMsg_Union_ReleaseEscrowMsg{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnEscrowMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.ReturnEscrowMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &BatchMsg_Union_ReturnEscrowMsg{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateEscrowMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.UpdateEscrowPartiesMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &BatchMsg_Union_UpdateEscrowMsg{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateContractMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &multisig.CreateContractMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &BatchMsg_Union_CreateContractMsg{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateContractMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &multisig.UpdateContractMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &BatchMsg_Union_UpdateContractMsg{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetValidatorsMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &validators.SetValidatorsMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &BatchMsg_Union_SetValidatorsMsg{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTokenInfoMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &currency.CreateTokenInfoMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &BatchMsg_Union_CreateTokenInfoMsg{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCodec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCodec
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCodec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCodec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCodec(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCodec
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCodec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCodec   = fmt.Errorf("proto: integer overflow")
)
