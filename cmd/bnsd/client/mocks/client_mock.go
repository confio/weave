// Code generated by MockGen. DO NOT EDIT.
// Source: ./../client.go

// Package mock_utils is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	weave "github.com/iov-one/weave"
	utils "github.com/iov-one/weave/cmd/bnsd/client"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetUser mocks base method
func (m *MockClient) GetUser(addr weave.Address) (*utils.UserResponse, error) {
	ret := m.ctrl.Call(m, "GetUser", addr)
	ret0, _ := ret[0].(*utils.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockClientMockRecorder) GetUser(addr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockClient)(nil).GetUser), addr)
}

// GetWallet mocks base method
func (m *MockClient) GetWallet(addr weave.Address) (*utils.WalletResponse, error) {
	ret := m.ctrl.Call(m, "GetWallet", addr)
	ret0, _ := ret[0].(*utils.WalletResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet
func (mr *MockClientMockRecorder) GetWallet(addr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockClient)(nil).GetWallet), addr)
}

// BroadcastTx mocks base method
func (m *MockClient) BroadcastTx(tx weave.Tx) utils.BroadcastTxResponse {
	ret := m.ctrl.Call(m, "BroadcastTx", tx)
	ret0, _ := ret[0].(utils.BroadcastTxResponse)
	return ret0
}

// BroadcastTx indicates an expected call of BroadcastTx
func (mr *MockClientMockRecorder) BroadcastTx(tx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastTx", reflect.TypeOf((*MockClient)(nil).BroadcastTx), tx)
}

// BroadcastTxAsync mocks base method
func (m *MockClient) BroadcastTxAsync(tx weave.Tx, out chan<- utils.BroadcastTxResponse) {
	m.ctrl.Call(m, "BroadcastTxAsync", tx, out)
}

// BroadcastTxAsync indicates an expected call of BroadcastTxAsync
func (mr *MockClientMockRecorder) BroadcastTxAsync(tx, out interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastTxAsync", reflect.TypeOf((*MockClient)(nil).BroadcastTxAsync), tx, out)
}

// BroadcastTxSync mocks base method
func (m *MockClient) BroadcastTxSync(tx weave.Tx, timeout time.Duration) utils.BroadcastTxResponse {
	ret := m.ctrl.Call(m, "BroadcastTxSync", tx, timeout)
	ret0, _ := ret[0].(utils.BroadcastTxResponse)
	return ret0
}

// BroadcastTxSync indicates an expected call of BroadcastTxSync
func (mr *MockClientMockRecorder) BroadcastTxSync(tx, timeout interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastTxSync", reflect.TypeOf((*MockClient)(nil).BroadcastTxSync), tx, timeout)
}
