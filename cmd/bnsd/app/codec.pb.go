// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cmd/bnsd/app/codec.proto

package bnsd

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_iov_one_weave "github.com/iov-one/weave"
	blueaccount "github.com/iov-one/weave/cmd/bnsd/x/blueaccount"
	username "github.com/iov-one/weave/cmd/bnsd/x/username"
	migration "github.com/iov-one/weave/migration"
	aswap "github.com/iov-one/weave/x/aswap"
	cash "github.com/iov-one/weave/x/cash"
	currency "github.com/iov-one/weave/x/currency"
	distribution "github.com/iov-one/weave/x/distribution"
	escrow "github.com/iov-one/weave/x/escrow"
	gov "github.com/iov-one/weave/x/gov"
	msgfee "github.com/iov-one/weave/x/msgfee"
	multisig "github.com/iov-one/weave/x/multisig"
	sigs "github.com/iov-one/weave/x/sigs"
	validators "github.com/iov-one/weave/x/validators"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Tx contains the message.
//
// When extending Tx, follow the rules:
// - range 1-50 is reserved for middlewares,
// - range 51-inf is reserved for different message types,
// - keep the same numbers for the same message types in both bnsd and other
//   applications. For example, FeeInfo field is used by both and indexed at
//   first position. Skip unused fields (leave index unused or comment out for
//   clarity).
// When there is a gap in message sequence numbers - that most likely means some
// old fields got deprecated. This is done to maintain binary compatibility.
type Tx struct {
	Fees       *cash.FeeInfo        `protobuf:"bytes,1,opt,name=fees,proto3" json:"fees,omitempty"`
	Signatures []*sigs.StdSignature `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
	// Multisig contains IDs of multisig contracts.
	// empty array results in multisig being ignored, basically the same behaviour
	// as if it never got supplied.
	Multisig [][]byte `protobuf:"bytes,4,rep,name=multisig,proto3" json:"multisig,omitempty"`
	// msg is a sum type over all allowed messages on this chain.
	//
	// Types that are valid to be assigned to Sum:
	//	*Tx_CashSendMsg
	//	*Tx_EscrowCreateMsg
	//	*Tx_EscrowReleaseMsg
	//	*Tx_EscrowReturnMsg
	//	*Tx_EscrowUpdatePartiesMsg
	//	*Tx_MultisigCreateMsg
	//	*Tx_MultisigUpdateMsg
	//	*Tx_ValidatorsApplyDiffMsg
	//	*Tx_CurrencyCreateMsg
	//	*Tx_ExecuteBatchMsg
	//	*Tx_UsernameRegisterTokenMsg
	//	*Tx_UsernameTransferTokenMsg
	//	*Tx_UsernameChangeTokenTargetsMsg
	//	*Tx_UsernameUpdateConfigurationMsg
	//	*Tx_DistributionCreateMsg
	//	*Tx_DistributionMsg
	//	*Tx_DistributionResetMsg
	//	*Tx_MigrationUpgradeSchemaMsg
	//	*Tx_AswapCreateMsg
	//	*Tx_AswapReleaseMsg
	//	*Tx_AswapReturnMsg
	//	*Tx_GovCreateProposalMsg
	//	*Tx_GovDeleteProposalMsg
	//	*Tx_GovVoteMsg
	//	*Tx_GovUpdateElectorateMsg
	//	*Tx_GovUpdateElectionRuleMsg
	//	*Tx_MsgfeeSetMsgFeeMsg
	//	*Tx_BlueaccountRegisterDomainMsg
	//	*Tx_BlueaccountTransferDomainMsg
	//	*Tx_BlueaccountRenewDomainMsg
	//	*Tx_BlueaccountDeleteDomainMsg
	//	*Tx_BlueaccountRegisterAccountMsg
	//	*Tx_BlueaccountTransferAccountMsg
	//	*Tx_BlueaccountReplaceAccountTargetMsg
	//	*Tx_BlueaccountDeleteAccountMsg
	//	*Tx_BlueaccountUpdateConfigurationMsg
	Sum isTx_Sum `protobuf_oneof:"sum"`
}

func (m *Tx) Reset()         { *m = Tx{} }
func (m *Tx) String() string { return proto.CompactTextString(m) }
func (*Tx) ProtoMessage()    {}
func (*Tx) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8efb1d2ea3c411d, []int{0}
}
func (m *Tx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tx.Merge(m, src)
}
func (m *Tx) XXX_Size() int {
	return m.Size()
}
func (m *Tx) XXX_DiscardUnknown() {
	xxx_messageInfo_Tx.DiscardUnknown(m)
}

var xxx_messageInfo_Tx proto.InternalMessageInfo

type isTx_Sum interface {
	isTx_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Tx_CashSendMsg struct {
	CashSendMsg *cash.SendMsg `protobuf:"bytes,51,opt,name=cash_send_msg,json=cashSendMsg,proto3,oneof"`
}
type Tx_EscrowCreateMsg struct {
	EscrowCreateMsg *escrow.CreateMsg `protobuf:"bytes,52,opt,name=escrow_create_msg,json=escrowCreateMsg,proto3,oneof"`
}
type Tx_EscrowReleaseMsg struct {
	EscrowReleaseMsg *escrow.ReleaseMsg `protobuf:"bytes,53,opt,name=escrow_release_msg,json=escrowReleaseMsg,proto3,oneof"`
}
type Tx_EscrowReturnMsg struct {
	EscrowReturnMsg *escrow.ReturnMsg `protobuf:"bytes,54,opt,name=escrow_return_msg,json=escrowReturnMsg,proto3,oneof"`
}
type Tx_EscrowUpdatePartiesMsg struct {
	EscrowUpdatePartiesMsg *escrow.UpdatePartiesMsg `protobuf:"bytes,55,opt,name=escrow_update_parties_msg,json=escrowUpdatePartiesMsg,proto3,oneof"`
}
type Tx_MultisigCreateMsg struct {
	MultisigCreateMsg *multisig.CreateMsg `protobuf:"bytes,56,opt,name=multisig_create_msg,json=multisigCreateMsg,proto3,oneof"`
}
type Tx_MultisigUpdateMsg struct {
	MultisigUpdateMsg *multisig.UpdateMsg `protobuf:"bytes,57,opt,name=multisig_update_msg,json=multisigUpdateMsg,proto3,oneof"`
}
type Tx_ValidatorsApplyDiffMsg struct {
	ValidatorsApplyDiffMsg *validators.ApplyDiffMsg `protobuf:"bytes,58,opt,name=validators_apply_diff_msg,json=validatorsApplyDiffMsg,proto3,oneof"`
}
type Tx_CurrencyCreateMsg struct {
	CurrencyCreateMsg *currency.CreateMsg `protobuf:"bytes,59,opt,name=currency_create_msg,json=currencyCreateMsg,proto3,oneof"`
}
type Tx_ExecuteBatchMsg struct {
	ExecuteBatchMsg *ExecuteBatchMsg `protobuf:"bytes,60,opt,name=execute_batch_msg,json=executeBatchMsg,proto3,oneof"`
}
type Tx_UsernameRegisterTokenMsg struct {
	UsernameRegisterTokenMsg *username.RegisterTokenMsg `protobuf:"bytes,61,opt,name=username_register_token_msg,json=usernameRegisterTokenMsg,proto3,oneof"`
}
type Tx_UsernameTransferTokenMsg struct {
	UsernameTransferTokenMsg *username.TransferTokenMsg `protobuf:"bytes,62,opt,name=username_transfer_token_msg,json=usernameTransferTokenMsg,proto3,oneof"`
}
type Tx_UsernameChangeTokenTargetsMsg struct {
	UsernameChangeTokenTargetsMsg *username.ChangeTokenTargetsMsg `protobuf:"bytes,63,opt,name=username_change_token_targets_msg,json=usernameChangeTokenTargetsMsg,proto3,oneof"`
}
type Tx_UsernameUpdateConfigurationMsg struct {
	UsernameUpdateConfigurationMsg *username.UpdateConfigurationMsg `protobuf:"bytes,64,opt,name=username_update_configuration_msg,json=usernameUpdateConfigurationMsg,proto3,oneof"`
}
type Tx_DistributionCreateMsg struct {
	DistributionCreateMsg *distribution.CreateMsg `protobuf:"bytes,66,opt,name=distribution_create_msg,json=distributionCreateMsg,proto3,oneof"`
}
type Tx_DistributionMsg struct {
	DistributionMsg *distribution.DistributeMsg `protobuf:"bytes,67,opt,name=distribution_msg,json=distributionMsg,proto3,oneof"`
}
type Tx_DistributionResetMsg struct {
	DistributionResetMsg *distribution.ResetMsg `protobuf:"bytes,68,opt,name=distribution_reset_msg,json=distributionResetMsg,proto3,oneof"`
}
type Tx_MigrationUpgradeSchemaMsg struct {
	MigrationUpgradeSchemaMsg *migration.UpgradeSchemaMsg `protobuf:"bytes,69,opt,name=migration_upgrade_schema_msg,json=migrationUpgradeSchemaMsg,proto3,oneof"`
}
type Tx_AswapCreateMsg struct {
	AswapCreateMsg *aswap.CreateMsg `protobuf:"bytes,70,opt,name=aswap_create_msg,json=aswapCreateMsg,proto3,oneof"`
}
type Tx_AswapReleaseMsg struct {
	AswapReleaseMsg *aswap.ReleaseMsg `protobuf:"bytes,71,opt,name=aswap_release_msg,json=aswapReleaseMsg,proto3,oneof"`
}
type Tx_AswapReturnMsg struct {
	AswapReturnMsg *aswap.ReturnMsg `protobuf:"bytes,72,opt,name=aswap_return_msg,json=aswapReturnMsg,proto3,oneof"`
}
type Tx_GovCreateProposalMsg struct {
	GovCreateProposalMsg *gov.CreateProposalMsg `protobuf:"bytes,73,opt,name=gov_create_proposal_msg,json=govCreateProposalMsg,proto3,oneof"`
}
type Tx_GovDeleteProposalMsg struct {
	GovDeleteProposalMsg *gov.DeleteProposalMsg `protobuf:"bytes,74,opt,name=gov_delete_proposal_msg,json=govDeleteProposalMsg,proto3,oneof"`
}
type Tx_GovVoteMsg struct {
	GovVoteMsg *gov.VoteMsg `protobuf:"bytes,75,opt,name=gov_vote_msg,json=govVoteMsg,proto3,oneof"`
}
type Tx_GovUpdateElectorateMsg struct {
	GovUpdateElectorateMsg *gov.UpdateElectorateMsg `protobuf:"bytes,77,opt,name=gov_update_electorate_msg,json=govUpdateElectorateMsg,proto3,oneof"`
}
type Tx_GovUpdateElectionRuleMsg struct {
	GovUpdateElectionRuleMsg *gov.UpdateElectionRuleMsg `protobuf:"bytes,78,opt,name=gov_update_election_rule_msg,json=govUpdateElectionRuleMsg,proto3,oneof"`
}
type Tx_MsgfeeSetMsgFeeMsg struct {
	MsgfeeSetMsgFeeMsg *msgfee.SetMsgFeeMsg `protobuf:"bytes,80,opt,name=msgfee_set_msg_fee_msg,json=msgfeeSetMsgFeeMsg,proto3,oneof"`
}
type Tx_BlueaccountRegisterDomainMsg struct {
	BlueaccountRegisterDomainMsg *blueaccount.RegisterDomainMsg `protobuf:"bytes,81,opt,name=blueaccount_register_domain_msg,json=blueaccountRegisterDomainMsg,proto3,oneof"`
}
type Tx_BlueaccountTransferDomainMsg struct {
	BlueaccountTransferDomainMsg *blueaccount.TransferDomainMsg `protobuf:"bytes,82,opt,name=blueaccount_transfer_domain_msg,json=blueaccountTransferDomainMsg,proto3,oneof"`
}
type Tx_BlueaccountRenewDomainMsg struct {
	BlueaccountRenewDomainMsg *blueaccount.RenewDomainMsg `protobuf:"bytes,83,opt,name=blueaccount_renew_domain_msg,json=blueaccountRenewDomainMsg,proto3,oneof"`
}
type Tx_BlueaccountDeleteDomainMsg struct {
	BlueaccountDeleteDomainMsg *blueaccount.DeleteDomainMsg `protobuf:"bytes,84,opt,name=blueaccount_delete_domain_msg,json=blueaccountDeleteDomainMsg,proto3,oneof"`
}
type Tx_BlueaccountRegisterAccountMsg struct {
	BlueaccountRegisterAccountMsg *blueaccount.RegisterAccountMsg `protobuf:"bytes,85,opt,name=blueaccount_register_account_msg,json=blueaccountRegisterAccountMsg,proto3,oneof"`
}
type Tx_BlueaccountTransferAccountMsg struct {
	BlueaccountTransferAccountMsg *blueaccount.TransferAccountMsg `protobuf:"bytes,86,opt,name=blueaccount_transfer_account_msg,json=blueaccountTransferAccountMsg,proto3,oneof"`
}
type Tx_BlueaccountReplaceAccountTargetMsg struct {
	BlueaccountReplaceAccountTargetMsg *blueaccount.ReplaceAccountTargetsMsg `protobuf:"bytes,87,opt,name=blueaccount_replace_account_target_msg,json=blueaccountReplaceAccountTargetMsg,proto3,oneof"`
}
type Tx_BlueaccountDeleteAccountMsg struct {
	BlueaccountDeleteAccountMsg *blueaccount.DeleteAccountMsg `protobuf:"bytes,88,opt,name=blueaccount_delete_account_msg,json=blueaccountDeleteAccountMsg,proto3,oneof"`
}
type Tx_BlueaccountUpdateConfigurationMsg struct {
	BlueaccountUpdateConfigurationMsg *blueaccount.UpdateConfigurationMsg `protobuf:"bytes,89,opt,name=blueaccount_update_configuration_msg,json=blueaccountUpdateConfigurationMsg,proto3,oneof"`
}

func (*Tx_CashSendMsg) isTx_Sum()                        {}
func (*Tx_EscrowCreateMsg) isTx_Sum()                    {}
func (*Tx_EscrowReleaseMsg) isTx_Sum()                   {}
func (*Tx_EscrowReturnMsg) isTx_Sum()                    {}
func (*Tx_EscrowUpdatePartiesMsg) isTx_Sum()             {}
func (*Tx_MultisigCreateMsg) isTx_Sum()                  {}
func (*Tx_MultisigUpdateMsg) isTx_Sum()                  {}
func (*Tx_ValidatorsApplyDiffMsg) isTx_Sum()             {}
func (*Tx_CurrencyCreateMsg) isTx_Sum()                  {}
func (*Tx_ExecuteBatchMsg) isTx_Sum()                    {}
func (*Tx_UsernameRegisterTokenMsg) isTx_Sum()           {}
func (*Tx_UsernameTransferTokenMsg) isTx_Sum()           {}
func (*Tx_UsernameChangeTokenTargetsMsg) isTx_Sum()      {}
func (*Tx_UsernameUpdateConfigurationMsg) isTx_Sum()     {}
func (*Tx_DistributionCreateMsg) isTx_Sum()              {}
func (*Tx_DistributionMsg) isTx_Sum()                    {}
func (*Tx_DistributionResetMsg) isTx_Sum()               {}
func (*Tx_MigrationUpgradeSchemaMsg) isTx_Sum()          {}
func (*Tx_AswapCreateMsg) isTx_Sum()                     {}
func (*Tx_AswapReleaseMsg) isTx_Sum()                    {}
func (*Tx_AswapReturnMsg) isTx_Sum()                     {}
func (*Tx_GovCreateProposalMsg) isTx_Sum()               {}
func (*Tx_GovDeleteProposalMsg) isTx_Sum()               {}
func (*Tx_GovVoteMsg) isTx_Sum()                         {}
func (*Tx_GovUpdateElectorateMsg) isTx_Sum()             {}
func (*Tx_GovUpdateElectionRuleMsg) isTx_Sum()           {}
func (*Tx_MsgfeeSetMsgFeeMsg) isTx_Sum()                 {}
func (*Tx_BlueaccountRegisterDomainMsg) isTx_Sum()       {}
func (*Tx_BlueaccountTransferDomainMsg) isTx_Sum()       {}
func (*Tx_BlueaccountRenewDomainMsg) isTx_Sum()          {}
func (*Tx_BlueaccountDeleteDomainMsg) isTx_Sum()         {}
func (*Tx_BlueaccountRegisterAccountMsg) isTx_Sum()      {}
func (*Tx_BlueaccountTransferAccountMsg) isTx_Sum()      {}
func (*Tx_BlueaccountReplaceAccountTargetMsg) isTx_Sum() {}
func (*Tx_BlueaccountDeleteAccountMsg) isTx_Sum()        {}
func (*Tx_BlueaccountUpdateConfigurationMsg) isTx_Sum()  {}

func (m *Tx) GetSum() isTx_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *Tx) GetFees() *cash.FeeInfo {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *Tx) GetSignatures() []*sigs.StdSignature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *Tx) GetMultisig() [][]byte {
	if m != nil {
		return m.Multisig
	}
	return nil
}

func (m *Tx) GetCashSendMsg() *cash.SendMsg {
	if x, ok := m.GetSum().(*Tx_CashSendMsg); ok {
		return x.CashSendMsg
	}
	return nil
}

func (m *Tx) GetEscrowCreateMsg() *escrow.CreateMsg {
	if x, ok := m.GetSum().(*Tx_EscrowCreateMsg); ok {
		return x.EscrowCreateMsg
	}
	return nil
}

func (m *Tx) GetEscrowReleaseMsg() *escrow.ReleaseMsg {
	if x, ok := m.GetSum().(*Tx_EscrowReleaseMsg); ok {
		return x.EscrowReleaseMsg
	}
	return nil
}

func (m *Tx) GetEscrowReturnMsg() *escrow.ReturnMsg {
	if x, ok := m.GetSum().(*Tx_EscrowReturnMsg); ok {
		return x.EscrowReturnMsg
	}
	return nil
}

func (m *Tx) GetEscrowUpdatePartiesMsg() *escrow.UpdatePartiesMsg {
	if x, ok := m.GetSum().(*Tx_EscrowUpdatePartiesMsg); ok {
		return x.EscrowUpdatePartiesMsg
	}
	return nil
}

func (m *Tx) GetMultisigCreateMsg() *multisig.CreateMsg {
	if x, ok := m.GetSum().(*Tx_MultisigCreateMsg); ok {
		return x.MultisigCreateMsg
	}
	return nil
}

func (m *Tx) GetMultisigUpdateMsg() *multisig.UpdateMsg {
	if x, ok := m.GetSum().(*Tx_MultisigUpdateMsg); ok {
		return x.MultisigUpdateMsg
	}
	return nil
}

func (m *Tx) GetValidatorsApplyDiffMsg() *validators.ApplyDiffMsg {
	if x, ok := m.GetSum().(*Tx_ValidatorsApplyDiffMsg); ok {
		return x.ValidatorsApplyDiffMsg
	}
	return nil
}

func (m *Tx) GetCurrencyCreateMsg() *currency.CreateMsg {
	if x, ok := m.GetSum().(*Tx_CurrencyCreateMsg); ok {
		return x.CurrencyCreateMsg
	}
	return nil
}

func (m *Tx) GetExecuteBatchMsg() *ExecuteBatchMsg {
	if x, ok := m.GetSum().(*Tx_ExecuteBatchMsg); ok {
		return x.ExecuteBatchMsg
	}
	return nil
}

func (m *Tx) GetUsernameRegisterTokenMsg() *username.RegisterTokenMsg {
	if x, ok := m.GetSum().(*Tx_UsernameRegisterTokenMsg); ok {
		return x.UsernameRegisterTokenMsg
	}
	return nil
}

func (m *Tx) GetUsernameTransferTokenMsg() *username.TransferTokenMsg {
	if x, ok := m.GetSum().(*Tx_UsernameTransferTokenMsg); ok {
		return x.UsernameTransferTokenMsg
	}
	return nil
}

func (m *Tx) GetUsernameChangeTokenTargetsMsg() *username.ChangeTokenTargetsMsg {
	if x, ok := m.GetSum().(*Tx_UsernameChangeTokenTargetsMsg); ok {
		return x.UsernameChangeTokenTargetsMsg
	}
	return nil
}

func (m *Tx) GetUsernameUpdateConfigurationMsg() *username.UpdateConfigurationMsg {
	if x, ok := m.GetSum().(*Tx_UsernameUpdateConfigurationMsg); ok {
		return x.UsernameUpdateConfigurationMsg
	}
	return nil
}

func (m *Tx) GetDistributionCreateMsg() *distribution.CreateMsg {
	if x, ok := m.GetSum().(*Tx_DistributionCreateMsg); ok {
		return x.DistributionCreateMsg
	}
	return nil
}

func (m *Tx) GetDistributionMsg() *distribution.DistributeMsg {
	if x, ok := m.GetSum().(*Tx_DistributionMsg); ok {
		return x.DistributionMsg
	}
	return nil
}

func (m *Tx) GetDistributionResetMsg() *distribution.ResetMsg {
	if x, ok := m.GetSum().(*Tx_DistributionResetMsg); ok {
		return x.DistributionResetMsg
	}
	return nil
}

func (m *Tx) GetMigrationUpgradeSchemaMsg() *migration.UpgradeSchemaMsg {
	if x, ok := m.GetSum().(*Tx_MigrationUpgradeSchemaMsg); ok {
		return x.MigrationUpgradeSchemaMsg
	}
	return nil
}

func (m *Tx) GetAswapCreateMsg() *aswap.CreateMsg {
	if x, ok := m.GetSum().(*Tx_AswapCreateMsg); ok {
		return x.AswapCreateMsg
	}
	return nil
}

func (m *Tx) GetAswapReleaseMsg() *aswap.ReleaseMsg {
	if x, ok := m.GetSum().(*Tx_AswapReleaseMsg); ok {
		return x.AswapReleaseMsg
	}
	return nil
}

func (m *Tx) GetAswapReturnMsg() *aswap.ReturnMsg {
	if x, ok := m.GetSum().(*Tx_AswapReturnMsg); ok {
		return x.AswapReturnMsg
	}
	return nil
}

func (m *Tx) GetGovCreateProposalMsg() *gov.CreateProposalMsg {
	if x, ok := m.GetSum().(*Tx_GovCreateProposalMsg); ok {
		return x.GovCreateProposalMsg
	}
	return nil
}

func (m *Tx) GetGovDeleteProposalMsg() *gov.DeleteProposalMsg {
	if x, ok := m.GetSum().(*Tx_GovDeleteProposalMsg); ok {
		return x.GovDeleteProposalMsg
	}
	return nil
}

func (m *Tx) GetGovVoteMsg() *gov.VoteMsg {
	if x, ok := m.GetSum().(*Tx_GovVoteMsg); ok {
		return x.GovVoteMsg
	}
	return nil
}

func (m *Tx) GetGovUpdateElectorateMsg() *gov.UpdateElectorateMsg {
	if x, ok := m.GetSum().(*Tx_GovUpdateElectorateMsg); ok {
		return x.GovUpdateElectorateMsg
	}
	return nil
}

func (m *Tx) GetGovUpdateElectionRuleMsg() *gov.UpdateElectionRuleMsg {
	if x, ok := m.GetSum().(*Tx_GovUpdateElectionRuleMsg); ok {
		return x.GovUpdateElectionRuleMsg
	}
	return nil
}

func (m *Tx) GetMsgfeeSetMsgFeeMsg() *msgfee.SetMsgFeeMsg {
	if x, ok := m.GetSum().(*Tx_MsgfeeSetMsgFeeMsg); ok {
		return x.MsgfeeSetMsgFeeMsg
	}
	return nil
}

func (m *Tx) GetBlueaccountRegisterDomainMsg() *blueaccount.RegisterDomainMsg {
	if x, ok := m.GetSum().(*Tx_BlueaccountRegisterDomainMsg); ok {
		return x.BlueaccountRegisterDomainMsg
	}
	return nil
}

func (m *Tx) GetBlueaccountTransferDomainMsg() *blueaccount.TransferDomainMsg {
	if x, ok := m.GetSum().(*Tx_BlueaccountTransferDomainMsg); ok {
		return x.BlueaccountTransferDomainMsg
	}
	return nil
}

func (m *Tx) GetBlueaccountRenewDomainMsg() *blueaccount.RenewDomainMsg {
	if x, ok := m.GetSum().(*Tx_BlueaccountRenewDomainMsg); ok {
		return x.BlueaccountRenewDomainMsg
	}
	return nil
}

func (m *Tx) GetBlueaccountDeleteDomainMsg() *blueaccount.DeleteDomainMsg {
	if x, ok := m.GetSum().(*Tx_BlueaccountDeleteDomainMsg); ok {
		return x.BlueaccountDeleteDomainMsg
	}
	return nil
}

func (m *Tx) GetBlueaccountRegisterAccountMsg() *blueaccount.RegisterAccountMsg {
	if x, ok := m.GetSum().(*Tx_BlueaccountRegisterAccountMsg); ok {
		return x.BlueaccountRegisterAccountMsg
	}
	return nil
}

func (m *Tx) GetBlueaccountTransferAccountMsg() *blueaccount.TransferAccountMsg {
	if x, ok := m.GetSum().(*Tx_BlueaccountTransferAccountMsg); ok {
		return x.BlueaccountTransferAccountMsg
	}
	return nil
}

func (m *Tx) GetBlueaccountReplaceAccountTargetMsg() *blueaccount.ReplaceAccountTargetsMsg {
	if x, ok := m.GetSum().(*Tx_BlueaccountReplaceAccountTargetMsg); ok {
		return x.BlueaccountReplaceAccountTargetMsg
	}
	return nil
}

func (m *Tx) GetBlueaccountDeleteAccountMsg() *blueaccount.DeleteAccountMsg {
	if x, ok := m.GetSum().(*Tx_BlueaccountDeleteAccountMsg); ok {
		return x.BlueaccountDeleteAccountMsg
	}
	return nil
}

func (m *Tx) GetBlueaccountUpdateConfigurationMsg() *blueaccount.UpdateConfigurationMsg {
	if x, ok := m.GetSum().(*Tx_BlueaccountUpdateConfigurationMsg); ok {
		return x.BlueaccountUpdateConfigurationMsg
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Tx) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Tx_OneofMarshaler, _Tx_OneofUnmarshaler, _Tx_OneofSizer, []interface{}{
		(*Tx_CashSendMsg)(nil),
		(*Tx_EscrowCreateMsg)(nil),
		(*Tx_EscrowReleaseMsg)(nil),
		(*Tx_EscrowReturnMsg)(nil),
		(*Tx_EscrowUpdatePartiesMsg)(nil),
		(*Tx_MultisigCreateMsg)(nil),
		(*Tx_MultisigUpdateMsg)(nil),
		(*Tx_ValidatorsApplyDiffMsg)(nil),
		(*Tx_CurrencyCreateMsg)(nil),
		(*Tx_ExecuteBatchMsg)(nil),
		(*Tx_UsernameRegisterTokenMsg)(nil),
		(*Tx_UsernameTransferTokenMsg)(nil),
		(*Tx_UsernameChangeTokenTargetsMsg)(nil),
		(*Tx_UsernameUpdateConfigurationMsg)(nil),
		(*Tx_DistributionCreateMsg)(nil),
		(*Tx_DistributionMsg)(nil),
		(*Tx_DistributionResetMsg)(nil),
		(*Tx_MigrationUpgradeSchemaMsg)(nil),
		(*Tx_AswapCreateMsg)(nil),
		(*Tx_AswapReleaseMsg)(nil),
		(*Tx_AswapReturnMsg)(nil),
		(*Tx_GovCreateProposalMsg)(nil),
		(*Tx_GovDeleteProposalMsg)(nil),
		(*Tx_GovVoteMsg)(nil),
		(*Tx_GovUpdateElectorateMsg)(nil),
		(*Tx_GovUpdateElectionRuleMsg)(nil),
		(*Tx_MsgfeeSetMsgFeeMsg)(nil),
		(*Tx_BlueaccountRegisterDomainMsg)(nil),
		(*Tx_BlueaccountTransferDomainMsg)(nil),
		(*Tx_BlueaccountRenewDomainMsg)(nil),
		(*Tx_BlueaccountDeleteDomainMsg)(nil),
		(*Tx_BlueaccountRegisterAccountMsg)(nil),
		(*Tx_BlueaccountTransferAccountMsg)(nil),
		(*Tx_BlueaccountReplaceAccountTargetMsg)(nil),
		(*Tx_BlueaccountDeleteAccountMsg)(nil),
		(*Tx_BlueaccountUpdateConfigurationMsg)(nil),
	}
}

func _Tx_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Tx)
	// sum
	switch x := m.Sum.(type) {
	case *Tx_CashSendMsg:
		_ = b.EncodeVarint(51<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CashSendMsg); err != nil {
			return err
		}
	case *Tx_EscrowCreateMsg:
		_ = b.EncodeVarint(52<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EscrowCreateMsg); err != nil {
			return err
		}
	case *Tx_EscrowReleaseMsg:
		_ = b.EncodeVarint(53<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EscrowReleaseMsg); err != nil {
			return err
		}
	case *Tx_EscrowReturnMsg:
		_ = b.EncodeVarint(54<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EscrowReturnMsg); err != nil {
			return err
		}
	case *Tx_EscrowUpdatePartiesMsg:
		_ = b.EncodeVarint(55<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EscrowUpdatePartiesMsg); err != nil {
			return err
		}
	case *Tx_MultisigCreateMsg:
		_ = b.EncodeVarint(56<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MultisigCreateMsg); err != nil {
			return err
		}
	case *Tx_MultisigUpdateMsg:
		_ = b.EncodeVarint(57<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MultisigUpdateMsg); err != nil {
			return err
		}
	case *Tx_ValidatorsApplyDiffMsg:
		_ = b.EncodeVarint(58<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ValidatorsApplyDiffMsg); err != nil {
			return err
		}
	case *Tx_CurrencyCreateMsg:
		_ = b.EncodeVarint(59<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CurrencyCreateMsg); err != nil {
			return err
		}
	case *Tx_ExecuteBatchMsg:
		_ = b.EncodeVarint(60<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExecuteBatchMsg); err != nil {
			return err
		}
	case *Tx_UsernameRegisterTokenMsg:
		_ = b.EncodeVarint(61<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UsernameRegisterTokenMsg); err != nil {
			return err
		}
	case *Tx_UsernameTransferTokenMsg:
		_ = b.EncodeVarint(62<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UsernameTransferTokenMsg); err != nil {
			return err
		}
	case *Tx_UsernameChangeTokenTargetsMsg:
		_ = b.EncodeVarint(63<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UsernameChangeTokenTargetsMsg); err != nil {
			return err
		}
	case *Tx_UsernameUpdateConfigurationMsg:
		_ = b.EncodeVarint(64<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UsernameUpdateConfigurationMsg); err != nil {
			return err
		}
	case *Tx_DistributionCreateMsg:
		_ = b.EncodeVarint(66<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DistributionCreateMsg); err != nil {
			return err
		}
	case *Tx_DistributionMsg:
		_ = b.EncodeVarint(67<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DistributionMsg); err != nil {
			return err
		}
	case *Tx_DistributionResetMsg:
		_ = b.EncodeVarint(68<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DistributionResetMsg); err != nil {
			return err
		}
	case *Tx_MigrationUpgradeSchemaMsg:
		_ = b.EncodeVarint(69<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MigrationUpgradeSchemaMsg); err != nil {
			return err
		}
	case *Tx_AswapCreateMsg:
		_ = b.EncodeVarint(70<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AswapCreateMsg); err != nil {
			return err
		}
	case *Tx_AswapReleaseMsg:
		_ = b.EncodeVarint(71<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AswapReleaseMsg); err != nil {
			return err
		}
	case *Tx_AswapReturnMsg:
		_ = b.EncodeVarint(72<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AswapReturnMsg); err != nil {
			return err
		}
	case *Tx_GovCreateProposalMsg:
		_ = b.EncodeVarint(73<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GovCreateProposalMsg); err != nil {
			return err
		}
	case *Tx_GovDeleteProposalMsg:
		_ = b.EncodeVarint(74<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GovDeleteProposalMsg); err != nil {
			return err
		}
	case *Tx_GovVoteMsg:
		_ = b.EncodeVarint(75<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GovVoteMsg); err != nil {
			return err
		}
	case *Tx_GovUpdateElectorateMsg:
		_ = b.EncodeVarint(77<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GovUpdateElectorateMsg); err != nil {
			return err
		}
	case *Tx_GovUpdateElectionRuleMsg:
		_ = b.EncodeVarint(78<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GovUpdateElectionRuleMsg); err != nil {
			return err
		}
	case *Tx_MsgfeeSetMsgFeeMsg:
		_ = b.EncodeVarint(80<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MsgfeeSetMsgFeeMsg); err != nil {
			return err
		}
	case *Tx_BlueaccountRegisterDomainMsg:
		_ = b.EncodeVarint(81<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountRegisterDomainMsg); err != nil {
			return err
		}
	case *Tx_BlueaccountTransferDomainMsg:
		_ = b.EncodeVarint(82<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountTransferDomainMsg); err != nil {
			return err
		}
	case *Tx_BlueaccountRenewDomainMsg:
		_ = b.EncodeVarint(83<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountRenewDomainMsg); err != nil {
			return err
		}
	case *Tx_BlueaccountDeleteDomainMsg:
		_ = b.EncodeVarint(84<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountDeleteDomainMsg); err != nil {
			return err
		}
	case *Tx_BlueaccountRegisterAccountMsg:
		_ = b.EncodeVarint(85<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountRegisterAccountMsg); err != nil {
			return err
		}
	case *Tx_BlueaccountTransferAccountMsg:
		_ = b.EncodeVarint(86<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountTransferAccountMsg); err != nil {
			return err
		}
	case *Tx_BlueaccountReplaceAccountTargetMsg:
		_ = b.EncodeVarint(87<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountReplaceAccountTargetMsg); err != nil {
			return err
		}
	case *Tx_BlueaccountDeleteAccountMsg:
		_ = b.EncodeVarint(88<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountDeleteAccountMsg); err != nil {
			return err
		}
	case *Tx_BlueaccountUpdateConfigurationMsg:
		_ = b.EncodeVarint(89<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountUpdateConfigurationMsg); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Tx.Sum has unexpected type %T", x)
	}
	return nil
}

func _Tx_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Tx)
	switch tag {
	case 51: // sum.cash_send_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(cash.SendMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_CashSendMsg{msg}
		return true, err
	case 52: // sum.escrow_create_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.CreateMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_EscrowCreateMsg{msg}
		return true, err
	case 53: // sum.escrow_release_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.ReleaseMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_EscrowReleaseMsg{msg}
		return true, err
	case 54: // sum.escrow_return_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.ReturnMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_EscrowReturnMsg{msg}
		return true, err
	case 55: // sum.escrow_update_parties_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.UpdatePartiesMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_EscrowUpdatePartiesMsg{msg}
		return true, err
	case 56: // sum.multisig_create_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(multisig.CreateMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_MultisigCreateMsg{msg}
		return true, err
	case 57: // sum.multisig_update_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(multisig.UpdateMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_MultisigUpdateMsg{msg}
		return true, err
	case 58: // sum.validators_apply_diff_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(validators.ApplyDiffMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_ValidatorsApplyDiffMsg{msg}
		return true, err
	case 59: // sum.currency_create_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(currency.CreateMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_CurrencyCreateMsg{msg}
		return true, err
	case 60: // sum.execute_batch_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExecuteBatchMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_ExecuteBatchMsg{msg}
		return true, err
	case 61: // sum.username_register_token_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(username.RegisterTokenMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_UsernameRegisterTokenMsg{msg}
		return true, err
	case 62: // sum.username_transfer_token_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(username.TransferTokenMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_UsernameTransferTokenMsg{msg}
		return true, err
	case 63: // sum.username_change_token_targets_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(username.ChangeTokenTargetsMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_UsernameChangeTokenTargetsMsg{msg}
		return true, err
	case 64: // sum.username_update_configuration_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(username.UpdateConfigurationMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_UsernameUpdateConfigurationMsg{msg}
		return true, err
	case 66: // sum.distribution_create_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(distribution.CreateMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_DistributionCreateMsg{msg}
		return true, err
	case 67: // sum.distribution_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(distribution.DistributeMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_DistributionMsg{msg}
		return true, err
	case 68: // sum.distribution_reset_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(distribution.ResetMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_DistributionResetMsg{msg}
		return true, err
	case 69: // sum.migration_upgrade_schema_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(migration.UpgradeSchemaMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_MigrationUpgradeSchemaMsg{msg}
		return true, err
	case 70: // sum.aswap_create_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(aswap.CreateMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_AswapCreateMsg{msg}
		return true, err
	case 71: // sum.aswap_release_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(aswap.ReleaseMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_AswapReleaseMsg{msg}
		return true, err
	case 72: // sum.aswap_return_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(aswap.ReturnMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_AswapReturnMsg{msg}
		return true, err
	case 73: // sum.gov_create_proposal_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gov.CreateProposalMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_GovCreateProposalMsg{msg}
		return true, err
	case 74: // sum.gov_delete_proposal_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gov.DeleteProposalMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_GovDeleteProposalMsg{msg}
		return true, err
	case 75: // sum.gov_vote_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gov.VoteMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_GovVoteMsg{msg}
		return true, err
	case 77: // sum.gov_update_electorate_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gov.UpdateElectorateMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_GovUpdateElectorateMsg{msg}
		return true, err
	case 78: // sum.gov_update_election_rule_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gov.UpdateElectionRuleMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_GovUpdateElectionRuleMsg{msg}
		return true, err
	case 80: // sum.msgfee_set_msg_fee_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(msgfee.SetMsgFeeMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_MsgfeeSetMsgFeeMsg{msg}
		return true, err
	case 81: // sum.blueaccount_register_domain_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.RegisterDomainMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_BlueaccountRegisterDomainMsg{msg}
		return true, err
	case 82: // sum.blueaccount_transfer_domain_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.TransferDomainMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_BlueaccountTransferDomainMsg{msg}
		return true, err
	case 83: // sum.blueaccount_renew_domain_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.RenewDomainMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_BlueaccountRenewDomainMsg{msg}
		return true, err
	case 84: // sum.blueaccount_delete_domain_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.DeleteDomainMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_BlueaccountDeleteDomainMsg{msg}
		return true, err
	case 85: // sum.blueaccount_register_account_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.RegisterAccountMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_BlueaccountRegisterAccountMsg{msg}
		return true, err
	case 86: // sum.blueaccount_transfer_account_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.TransferAccountMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_BlueaccountTransferAccountMsg{msg}
		return true, err
	case 87: // sum.blueaccount_replace_account_target_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.ReplaceAccountTargetsMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_BlueaccountReplaceAccountTargetMsg{msg}
		return true, err
	case 88: // sum.blueaccount_delete_account_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.DeleteAccountMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_BlueaccountDeleteAccountMsg{msg}
		return true, err
	case 89: // sum.blueaccount_update_configuration_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.UpdateConfigurationMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_BlueaccountUpdateConfigurationMsg{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Tx_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Tx)
	// sum
	switch x := m.Sum.(type) {
	case *Tx_CashSendMsg:
		s := proto.Size(x.CashSendMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_EscrowCreateMsg:
		s := proto.Size(x.EscrowCreateMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_EscrowReleaseMsg:
		s := proto.Size(x.EscrowReleaseMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_EscrowReturnMsg:
		s := proto.Size(x.EscrowReturnMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_EscrowUpdatePartiesMsg:
		s := proto.Size(x.EscrowUpdatePartiesMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_MultisigCreateMsg:
		s := proto.Size(x.MultisigCreateMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_MultisigUpdateMsg:
		s := proto.Size(x.MultisigUpdateMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_ValidatorsApplyDiffMsg:
		s := proto.Size(x.ValidatorsApplyDiffMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_CurrencyCreateMsg:
		s := proto.Size(x.CurrencyCreateMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_ExecuteBatchMsg:
		s := proto.Size(x.ExecuteBatchMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_UsernameRegisterTokenMsg:
		s := proto.Size(x.UsernameRegisterTokenMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_UsernameTransferTokenMsg:
		s := proto.Size(x.UsernameTransferTokenMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_UsernameChangeTokenTargetsMsg:
		s := proto.Size(x.UsernameChangeTokenTargetsMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_UsernameUpdateConfigurationMsg:
		s := proto.Size(x.UsernameUpdateConfigurationMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_DistributionCreateMsg:
		s := proto.Size(x.DistributionCreateMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_DistributionMsg:
		s := proto.Size(x.DistributionMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_DistributionResetMsg:
		s := proto.Size(x.DistributionResetMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_MigrationUpgradeSchemaMsg:
		s := proto.Size(x.MigrationUpgradeSchemaMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_AswapCreateMsg:
		s := proto.Size(x.AswapCreateMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_AswapReleaseMsg:
		s := proto.Size(x.AswapReleaseMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_AswapReturnMsg:
		s := proto.Size(x.AswapReturnMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_GovCreateProposalMsg:
		s := proto.Size(x.GovCreateProposalMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_GovDeleteProposalMsg:
		s := proto.Size(x.GovDeleteProposalMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_GovVoteMsg:
		s := proto.Size(x.GovVoteMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_GovUpdateElectorateMsg:
		s := proto.Size(x.GovUpdateElectorateMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_GovUpdateElectionRuleMsg:
		s := proto.Size(x.GovUpdateElectionRuleMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_MsgfeeSetMsgFeeMsg:
		s := proto.Size(x.MsgfeeSetMsgFeeMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_BlueaccountRegisterDomainMsg:
		s := proto.Size(x.BlueaccountRegisterDomainMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_BlueaccountTransferDomainMsg:
		s := proto.Size(x.BlueaccountTransferDomainMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_BlueaccountRenewDomainMsg:
		s := proto.Size(x.BlueaccountRenewDomainMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_BlueaccountDeleteDomainMsg:
		s := proto.Size(x.BlueaccountDeleteDomainMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_BlueaccountRegisterAccountMsg:
		s := proto.Size(x.BlueaccountRegisterAccountMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_BlueaccountTransferAccountMsg:
		s := proto.Size(x.BlueaccountTransferAccountMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_BlueaccountReplaceAccountTargetMsg:
		s := proto.Size(x.BlueaccountReplaceAccountTargetMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_BlueaccountDeleteAccountMsg:
		s := proto.Size(x.BlueaccountDeleteAccountMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_BlueaccountUpdateConfigurationMsg:
		s := proto.Size(x.BlueaccountUpdateConfigurationMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ExecuteBatchMsg encapsulates multiple messages to support batch transaction
type ExecuteBatchMsg struct {
	Messages []ExecuteBatchMsg_Union `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages"`
}

func (m *ExecuteBatchMsg) Reset()         { *m = ExecuteBatchMsg{} }
func (m *ExecuteBatchMsg) String() string { return proto.CompactTextString(m) }
func (*ExecuteBatchMsg) ProtoMessage()    {}
func (*ExecuteBatchMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8efb1d2ea3c411d, []int{1}
}
func (m *ExecuteBatchMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteBatchMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteBatchMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteBatchMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteBatchMsg.Merge(m, src)
}
func (m *ExecuteBatchMsg) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteBatchMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteBatchMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteBatchMsg proto.InternalMessageInfo

func (m *ExecuteBatchMsg) GetMessages() []ExecuteBatchMsg_Union {
	if m != nil {
		return m.Messages
	}
	return nil
}

type ExecuteBatchMsg_Union struct {
	// Types that are valid to be assigned to Sum:
	//	*ExecuteBatchMsg_Union_CashSendMsg
	//	*ExecuteBatchMsg_Union_EscrowCreateMsg
	//	*ExecuteBatchMsg_Union_EscrowReleaseMsg
	//	*ExecuteBatchMsg_Union_EscrowReturnMsg
	//	*ExecuteBatchMsg_Union_EscrowUpdatePartiesMsg
	//	*ExecuteBatchMsg_Union_MultisigCreateMsg
	//	*ExecuteBatchMsg_Union_MultisigUpdateMsg
	//	*ExecuteBatchMsg_Union_ValidatorsApplyDiffMsg
	//	*ExecuteBatchMsg_Union_CurrencyCreateMsg
	//	*ExecuteBatchMsg_Union_UsernameRegisterTokenMsg
	//	*ExecuteBatchMsg_Union_UsernameTransferTokenMsg
	//	*ExecuteBatchMsg_Union_UsernameChangeTokenTargetsMsg
	//	*ExecuteBatchMsg_Union_UsernameUpdateConfigurationMsg
	//	*ExecuteBatchMsg_Union_DistributionCreateMsg
	//	*ExecuteBatchMsg_Union_DistributionMsg
	//	*ExecuteBatchMsg_Union_DistributionResetMsg
	//	*ExecuteBatchMsg_Union_MsgfeeSetMsgFeeMsg
	//	*ExecuteBatchMsg_Union_BlueaccountRegisterDomainMsg
	//	*ExecuteBatchMsg_Union_BlueaccountTransferDomainMsg
	//	*ExecuteBatchMsg_Union_BlueaccountRenewDomainMsg
	//	*ExecuteBatchMsg_Union_BlueaccountDeleteDomainMsg
	//	*ExecuteBatchMsg_Union_BlueaccountRegisterAccountMsg
	//	*ExecuteBatchMsg_Union_BlueaccountTransferAccountMsg
	//	*ExecuteBatchMsg_Union_BlueaccountReplaceAccountTargetMsg
	//	*ExecuteBatchMsg_Union_BlueaccountDeleteAccountMsg
	//	*ExecuteBatchMsg_Union_BlueaccountUpdateConfigurationMsg
	Sum isExecuteBatchMsg_Union_Sum `protobuf_oneof:"sum"`
}

func (m *ExecuteBatchMsg_Union) Reset()         { *m = ExecuteBatchMsg_Union{} }
func (m *ExecuteBatchMsg_Union) String() string { return proto.CompactTextString(m) }
func (*ExecuteBatchMsg_Union) ProtoMessage()    {}
func (*ExecuteBatchMsg_Union) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8efb1d2ea3c411d, []int{1, 0}
}
func (m *ExecuteBatchMsg_Union) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteBatchMsg_Union) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteBatchMsg_Union.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteBatchMsg_Union) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteBatchMsg_Union.Merge(m, src)
}
func (m *ExecuteBatchMsg_Union) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteBatchMsg_Union) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteBatchMsg_Union.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteBatchMsg_Union proto.InternalMessageInfo

type isExecuteBatchMsg_Union_Sum interface {
	isExecuteBatchMsg_Union_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ExecuteBatchMsg_Union_CashSendMsg struct {
	CashSendMsg *cash.SendMsg `protobuf:"bytes,51,opt,name=cash_send_msg,json=cashSendMsg,proto3,oneof"`
}
type ExecuteBatchMsg_Union_EscrowCreateMsg struct {
	EscrowCreateMsg *escrow.CreateMsg `protobuf:"bytes,52,opt,name=escrow_create_msg,json=escrowCreateMsg,proto3,oneof"`
}
type ExecuteBatchMsg_Union_EscrowReleaseMsg struct {
	EscrowReleaseMsg *escrow.ReleaseMsg `protobuf:"bytes,53,opt,name=escrow_release_msg,json=escrowReleaseMsg,proto3,oneof"`
}
type ExecuteBatchMsg_Union_EscrowReturnMsg struct {
	EscrowReturnMsg *escrow.ReturnMsg `protobuf:"bytes,54,opt,name=escrow_return_msg,json=escrowReturnMsg,proto3,oneof"`
}
type ExecuteBatchMsg_Union_EscrowUpdatePartiesMsg struct {
	EscrowUpdatePartiesMsg *escrow.UpdatePartiesMsg `protobuf:"bytes,55,opt,name=escrow_update_parties_msg,json=escrowUpdatePartiesMsg,proto3,oneof"`
}
type ExecuteBatchMsg_Union_MultisigCreateMsg struct {
	MultisigCreateMsg *multisig.CreateMsg `protobuf:"bytes,56,opt,name=multisig_create_msg,json=multisigCreateMsg,proto3,oneof"`
}
type ExecuteBatchMsg_Union_MultisigUpdateMsg struct {
	MultisigUpdateMsg *multisig.UpdateMsg `protobuf:"bytes,57,opt,name=multisig_update_msg,json=multisigUpdateMsg,proto3,oneof"`
}
type ExecuteBatchMsg_Union_ValidatorsApplyDiffMsg struct {
	ValidatorsApplyDiffMsg *validators.ApplyDiffMsg `protobuf:"bytes,58,opt,name=validators_apply_diff_msg,json=validatorsApplyDiffMsg,proto3,oneof"`
}
type ExecuteBatchMsg_Union_CurrencyCreateMsg struct {
	CurrencyCreateMsg *currency.CreateMsg `protobuf:"bytes,59,opt,name=currency_create_msg,json=currencyCreateMsg,proto3,oneof"`
}
type ExecuteBatchMsg_Union_UsernameRegisterTokenMsg struct {
	UsernameRegisterTokenMsg *username.RegisterTokenMsg `protobuf:"bytes,61,opt,name=username_register_token_msg,json=usernameRegisterTokenMsg,proto3,oneof"`
}
type ExecuteBatchMsg_Union_UsernameTransferTokenMsg struct {
	UsernameTransferTokenMsg *username.TransferTokenMsg `protobuf:"bytes,62,opt,name=username_transfer_token_msg,json=usernameTransferTokenMsg,proto3,oneof"`
}
type ExecuteBatchMsg_Union_UsernameChangeTokenTargetsMsg struct {
	UsernameChangeTokenTargetsMsg *username.ChangeTokenTargetsMsg `protobuf:"bytes,63,opt,name=username_change_token_targets_msg,json=usernameChangeTokenTargetsMsg,proto3,oneof"`
}
type ExecuteBatchMsg_Union_UsernameUpdateConfigurationMsg struct {
	UsernameUpdateConfigurationMsg *username.UpdateConfigurationMsg `protobuf:"bytes,64,opt,name=username_update_configuration_msg,json=usernameUpdateConfigurationMsg,proto3,oneof"`
}
type ExecuteBatchMsg_Union_DistributionCreateMsg struct {
	DistributionCreateMsg *distribution.CreateMsg `protobuf:"bytes,66,opt,name=distribution_create_msg,json=distributionCreateMsg,proto3,oneof"`
}
type ExecuteBatchMsg_Union_DistributionMsg struct {
	DistributionMsg *distribution.DistributeMsg `protobuf:"bytes,67,opt,name=distribution_msg,json=distributionMsg,proto3,oneof"`
}
type ExecuteBatchMsg_Union_DistributionResetMsg struct {
	DistributionResetMsg *distribution.ResetMsg `protobuf:"bytes,68,opt,name=distribution_reset_msg,json=distributionResetMsg,proto3,oneof"`
}
type ExecuteBatchMsg_Union_MsgfeeSetMsgFeeMsg struct {
	MsgfeeSetMsgFeeMsg *msgfee.SetMsgFeeMsg `protobuf:"bytes,80,opt,name=msgfee_set_msg_fee_msg,json=msgfeeSetMsgFeeMsg,proto3,oneof"`
}
type ExecuteBatchMsg_Union_BlueaccountRegisterDomainMsg struct {
	BlueaccountRegisterDomainMsg *blueaccount.RegisterDomainMsg `protobuf:"bytes,81,opt,name=blueaccount_register_domain_msg,json=blueaccountRegisterDomainMsg,proto3,oneof"`
}
type ExecuteBatchMsg_Union_BlueaccountTransferDomainMsg struct {
	BlueaccountTransferDomainMsg *blueaccount.TransferDomainMsg `protobuf:"bytes,82,opt,name=blueaccount_transfer_domain_msg,json=blueaccountTransferDomainMsg,proto3,oneof"`
}
type ExecuteBatchMsg_Union_BlueaccountRenewDomainMsg struct {
	BlueaccountRenewDomainMsg *blueaccount.RenewDomainMsg `protobuf:"bytes,83,opt,name=blueaccount_renew_domain_msg,json=blueaccountRenewDomainMsg,proto3,oneof"`
}
type ExecuteBatchMsg_Union_BlueaccountDeleteDomainMsg struct {
	BlueaccountDeleteDomainMsg *blueaccount.DeleteDomainMsg `protobuf:"bytes,84,opt,name=blueaccount_delete_domain_msg,json=blueaccountDeleteDomainMsg,proto3,oneof"`
}
type ExecuteBatchMsg_Union_BlueaccountRegisterAccountMsg struct {
	BlueaccountRegisterAccountMsg *blueaccount.RegisterAccountMsg `protobuf:"bytes,85,opt,name=blueaccount_register_account_msg,json=blueaccountRegisterAccountMsg,proto3,oneof"`
}
type ExecuteBatchMsg_Union_BlueaccountTransferAccountMsg struct {
	BlueaccountTransferAccountMsg *blueaccount.TransferAccountMsg `protobuf:"bytes,86,opt,name=blueaccount_transfer_account_msg,json=blueaccountTransferAccountMsg,proto3,oneof"`
}
type ExecuteBatchMsg_Union_BlueaccountReplaceAccountTargetMsg struct {
	BlueaccountReplaceAccountTargetMsg *blueaccount.ReplaceAccountTargetsMsg `protobuf:"bytes,87,opt,name=blueaccount_replace_account_target_msg,json=blueaccountReplaceAccountTargetMsg,proto3,oneof"`
}
type ExecuteBatchMsg_Union_BlueaccountDeleteAccountMsg struct {
	BlueaccountDeleteAccountMsg *blueaccount.DeleteAccountMsg `protobuf:"bytes,88,opt,name=blueaccount_delete_account_msg,json=blueaccountDeleteAccountMsg,proto3,oneof"`
}
type ExecuteBatchMsg_Union_BlueaccountUpdateConfigurationMsg struct {
	BlueaccountUpdateConfigurationMsg *blueaccount.UpdateConfigurationMsg `protobuf:"bytes,89,opt,name=blueaccount_update_configuration_msg,json=blueaccountUpdateConfigurationMsg,proto3,oneof"`
}

func (*ExecuteBatchMsg_Union_CashSendMsg) isExecuteBatchMsg_Union_Sum()                        {}
func (*ExecuteBatchMsg_Union_EscrowCreateMsg) isExecuteBatchMsg_Union_Sum()                    {}
func (*ExecuteBatchMsg_Union_EscrowReleaseMsg) isExecuteBatchMsg_Union_Sum()                   {}
func (*ExecuteBatchMsg_Union_EscrowReturnMsg) isExecuteBatchMsg_Union_Sum()                    {}
func (*ExecuteBatchMsg_Union_EscrowUpdatePartiesMsg) isExecuteBatchMsg_Union_Sum()             {}
func (*ExecuteBatchMsg_Union_MultisigCreateMsg) isExecuteBatchMsg_Union_Sum()                  {}
func (*ExecuteBatchMsg_Union_MultisigUpdateMsg) isExecuteBatchMsg_Union_Sum()                  {}
func (*ExecuteBatchMsg_Union_ValidatorsApplyDiffMsg) isExecuteBatchMsg_Union_Sum()             {}
func (*ExecuteBatchMsg_Union_CurrencyCreateMsg) isExecuteBatchMsg_Union_Sum()                  {}
func (*ExecuteBatchMsg_Union_UsernameRegisterTokenMsg) isExecuteBatchMsg_Union_Sum()           {}
func (*ExecuteBatchMsg_Union_UsernameTransferTokenMsg) isExecuteBatchMsg_Union_Sum()           {}
func (*ExecuteBatchMsg_Union_UsernameChangeTokenTargetsMsg) isExecuteBatchMsg_Union_Sum()      {}
func (*ExecuteBatchMsg_Union_UsernameUpdateConfigurationMsg) isExecuteBatchMsg_Union_Sum()     {}
func (*ExecuteBatchMsg_Union_DistributionCreateMsg) isExecuteBatchMsg_Union_Sum()              {}
func (*ExecuteBatchMsg_Union_DistributionMsg) isExecuteBatchMsg_Union_Sum()                    {}
func (*ExecuteBatchMsg_Union_DistributionResetMsg) isExecuteBatchMsg_Union_Sum()               {}
func (*ExecuteBatchMsg_Union_MsgfeeSetMsgFeeMsg) isExecuteBatchMsg_Union_Sum()                 {}
func (*ExecuteBatchMsg_Union_BlueaccountRegisterDomainMsg) isExecuteBatchMsg_Union_Sum()       {}
func (*ExecuteBatchMsg_Union_BlueaccountTransferDomainMsg) isExecuteBatchMsg_Union_Sum()       {}
func (*ExecuteBatchMsg_Union_BlueaccountRenewDomainMsg) isExecuteBatchMsg_Union_Sum()          {}
func (*ExecuteBatchMsg_Union_BlueaccountDeleteDomainMsg) isExecuteBatchMsg_Union_Sum()         {}
func (*ExecuteBatchMsg_Union_BlueaccountRegisterAccountMsg) isExecuteBatchMsg_Union_Sum()      {}
func (*ExecuteBatchMsg_Union_BlueaccountTransferAccountMsg) isExecuteBatchMsg_Union_Sum()      {}
func (*ExecuteBatchMsg_Union_BlueaccountReplaceAccountTargetMsg) isExecuteBatchMsg_Union_Sum() {}
func (*ExecuteBatchMsg_Union_BlueaccountDeleteAccountMsg) isExecuteBatchMsg_Union_Sum()        {}
func (*ExecuteBatchMsg_Union_BlueaccountUpdateConfigurationMsg) isExecuteBatchMsg_Union_Sum()  {}

func (m *ExecuteBatchMsg_Union) GetSum() isExecuteBatchMsg_Union_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *ExecuteBatchMsg_Union) GetCashSendMsg() *cash.SendMsg {
	if x, ok := m.GetSum().(*ExecuteBatchMsg_Union_CashSendMsg); ok {
		return x.CashSendMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Union) GetEscrowCreateMsg() *escrow.CreateMsg {
	if x, ok := m.GetSum().(*ExecuteBatchMsg_Union_EscrowCreateMsg); ok {
		return x.EscrowCreateMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Union) GetEscrowReleaseMsg() *escrow.ReleaseMsg {
	if x, ok := m.GetSum().(*ExecuteBatchMsg_Union_EscrowReleaseMsg); ok {
		return x.EscrowReleaseMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Union) GetEscrowReturnMsg() *escrow.ReturnMsg {
	if x, ok := m.GetSum().(*ExecuteBatchMsg_Union_EscrowReturnMsg); ok {
		return x.EscrowReturnMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Union) GetEscrowUpdatePartiesMsg() *escrow.UpdatePartiesMsg {
	if x, ok := m.GetSum().(*ExecuteBatchMsg_Union_EscrowUpdatePartiesMsg); ok {
		return x.EscrowUpdatePartiesMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Union) GetMultisigCreateMsg() *multisig.CreateMsg {
	if x, ok := m.GetSum().(*ExecuteBatchMsg_Union_MultisigCreateMsg); ok {
		return x.MultisigCreateMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Union) GetMultisigUpdateMsg() *multisig.UpdateMsg {
	if x, ok := m.GetSum().(*ExecuteBatchMsg_Union_MultisigUpdateMsg); ok {
		return x.MultisigUpdateMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Union) GetValidatorsApplyDiffMsg() *validators.ApplyDiffMsg {
	if x, ok := m.GetSum().(*ExecuteBatchMsg_Union_ValidatorsApplyDiffMsg); ok {
		return x.ValidatorsApplyDiffMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Union) GetCurrencyCreateMsg() *currency.CreateMsg {
	if x, ok := m.GetSum().(*ExecuteBatchMsg_Union_CurrencyCreateMsg); ok {
		return x.CurrencyCreateMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Union) GetUsernameRegisterTokenMsg() *username.RegisterTokenMsg {
	if x, ok := m.GetSum().(*ExecuteBatchMsg_Union_UsernameRegisterTokenMsg); ok {
		return x.UsernameRegisterTokenMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Union) GetUsernameTransferTokenMsg() *username.TransferTokenMsg {
	if x, ok := m.GetSum().(*ExecuteBatchMsg_Union_UsernameTransferTokenMsg); ok {
		return x.UsernameTransferTokenMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Union) GetUsernameChangeTokenTargetsMsg() *username.ChangeTokenTargetsMsg {
	if x, ok := m.GetSum().(*ExecuteBatchMsg_Union_UsernameChangeTokenTargetsMsg); ok {
		return x.UsernameChangeTokenTargetsMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Union) GetUsernameUpdateConfigurationMsg() *username.UpdateConfigurationMsg {
	if x, ok := m.GetSum().(*ExecuteBatchMsg_Union_UsernameUpdateConfigurationMsg); ok {
		return x.UsernameUpdateConfigurationMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Union) GetDistributionCreateMsg() *distribution.CreateMsg {
	if x, ok := m.GetSum().(*ExecuteBatchMsg_Union_DistributionCreateMsg); ok {
		return x.DistributionCreateMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Union) GetDistributionMsg() *distribution.DistributeMsg {
	if x, ok := m.GetSum().(*ExecuteBatchMsg_Union_DistributionMsg); ok {
		return x.DistributionMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Union) GetDistributionResetMsg() *distribution.ResetMsg {
	if x, ok := m.GetSum().(*ExecuteBatchMsg_Union_DistributionResetMsg); ok {
		return x.DistributionResetMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Union) GetMsgfeeSetMsgFeeMsg() *msgfee.SetMsgFeeMsg {
	if x, ok := m.GetSum().(*ExecuteBatchMsg_Union_MsgfeeSetMsgFeeMsg); ok {
		return x.MsgfeeSetMsgFeeMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Union) GetBlueaccountRegisterDomainMsg() *blueaccount.RegisterDomainMsg {
	if x, ok := m.GetSum().(*ExecuteBatchMsg_Union_BlueaccountRegisterDomainMsg); ok {
		return x.BlueaccountRegisterDomainMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Union) GetBlueaccountTransferDomainMsg() *blueaccount.TransferDomainMsg {
	if x, ok := m.GetSum().(*ExecuteBatchMsg_Union_BlueaccountTransferDomainMsg); ok {
		return x.BlueaccountTransferDomainMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Union) GetBlueaccountRenewDomainMsg() *blueaccount.RenewDomainMsg {
	if x, ok := m.GetSum().(*ExecuteBatchMsg_Union_BlueaccountRenewDomainMsg); ok {
		return x.BlueaccountRenewDomainMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Union) GetBlueaccountDeleteDomainMsg() *blueaccount.DeleteDomainMsg {
	if x, ok := m.GetSum().(*ExecuteBatchMsg_Union_BlueaccountDeleteDomainMsg); ok {
		return x.BlueaccountDeleteDomainMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Union) GetBlueaccountRegisterAccountMsg() *blueaccount.RegisterAccountMsg {
	if x, ok := m.GetSum().(*ExecuteBatchMsg_Union_BlueaccountRegisterAccountMsg); ok {
		return x.BlueaccountRegisterAccountMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Union) GetBlueaccountTransferAccountMsg() *blueaccount.TransferAccountMsg {
	if x, ok := m.GetSum().(*ExecuteBatchMsg_Union_BlueaccountTransferAccountMsg); ok {
		return x.BlueaccountTransferAccountMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Union) GetBlueaccountReplaceAccountTargetMsg() *blueaccount.ReplaceAccountTargetsMsg {
	if x, ok := m.GetSum().(*ExecuteBatchMsg_Union_BlueaccountReplaceAccountTargetMsg); ok {
		return x.BlueaccountReplaceAccountTargetMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Union) GetBlueaccountDeleteAccountMsg() *blueaccount.DeleteAccountMsg {
	if x, ok := m.GetSum().(*ExecuteBatchMsg_Union_BlueaccountDeleteAccountMsg); ok {
		return x.BlueaccountDeleteAccountMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Union) GetBlueaccountUpdateConfigurationMsg() *blueaccount.UpdateConfigurationMsg {
	if x, ok := m.GetSum().(*ExecuteBatchMsg_Union_BlueaccountUpdateConfigurationMsg); ok {
		return x.BlueaccountUpdateConfigurationMsg
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExecuteBatchMsg_Union) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExecuteBatchMsg_Union_OneofMarshaler, _ExecuteBatchMsg_Union_OneofUnmarshaler, _ExecuteBatchMsg_Union_OneofSizer, []interface{}{
		(*ExecuteBatchMsg_Union_CashSendMsg)(nil),
		(*ExecuteBatchMsg_Union_EscrowCreateMsg)(nil),
		(*ExecuteBatchMsg_Union_EscrowReleaseMsg)(nil),
		(*ExecuteBatchMsg_Union_EscrowReturnMsg)(nil),
		(*ExecuteBatchMsg_Union_EscrowUpdatePartiesMsg)(nil),
		(*ExecuteBatchMsg_Union_MultisigCreateMsg)(nil),
		(*ExecuteBatchMsg_Union_MultisigUpdateMsg)(nil),
		(*ExecuteBatchMsg_Union_ValidatorsApplyDiffMsg)(nil),
		(*ExecuteBatchMsg_Union_CurrencyCreateMsg)(nil),
		(*ExecuteBatchMsg_Union_UsernameRegisterTokenMsg)(nil),
		(*ExecuteBatchMsg_Union_UsernameTransferTokenMsg)(nil),
		(*ExecuteBatchMsg_Union_UsernameChangeTokenTargetsMsg)(nil),
		(*ExecuteBatchMsg_Union_UsernameUpdateConfigurationMsg)(nil),
		(*ExecuteBatchMsg_Union_DistributionCreateMsg)(nil),
		(*ExecuteBatchMsg_Union_DistributionMsg)(nil),
		(*ExecuteBatchMsg_Union_DistributionResetMsg)(nil),
		(*ExecuteBatchMsg_Union_MsgfeeSetMsgFeeMsg)(nil),
		(*ExecuteBatchMsg_Union_BlueaccountRegisterDomainMsg)(nil),
		(*ExecuteBatchMsg_Union_BlueaccountTransferDomainMsg)(nil),
		(*ExecuteBatchMsg_Union_BlueaccountRenewDomainMsg)(nil),
		(*ExecuteBatchMsg_Union_BlueaccountDeleteDomainMsg)(nil),
		(*ExecuteBatchMsg_Union_BlueaccountRegisterAccountMsg)(nil),
		(*ExecuteBatchMsg_Union_BlueaccountTransferAccountMsg)(nil),
		(*ExecuteBatchMsg_Union_BlueaccountReplaceAccountTargetMsg)(nil),
		(*ExecuteBatchMsg_Union_BlueaccountDeleteAccountMsg)(nil),
		(*ExecuteBatchMsg_Union_BlueaccountUpdateConfigurationMsg)(nil),
	}
}

func _ExecuteBatchMsg_Union_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExecuteBatchMsg_Union)
	// sum
	switch x := m.Sum.(type) {
	case *ExecuteBatchMsg_Union_CashSendMsg:
		_ = b.EncodeVarint(51<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CashSendMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Union_EscrowCreateMsg:
		_ = b.EncodeVarint(52<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EscrowCreateMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Union_EscrowReleaseMsg:
		_ = b.EncodeVarint(53<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EscrowReleaseMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Union_EscrowReturnMsg:
		_ = b.EncodeVarint(54<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EscrowReturnMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Union_EscrowUpdatePartiesMsg:
		_ = b.EncodeVarint(55<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EscrowUpdatePartiesMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Union_MultisigCreateMsg:
		_ = b.EncodeVarint(56<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MultisigCreateMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Union_MultisigUpdateMsg:
		_ = b.EncodeVarint(57<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MultisigUpdateMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Union_ValidatorsApplyDiffMsg:
		_ = b.EncodeVarint(58<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ValidatorsApplyDiffMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Union_CurrencyCreateMsg:
		_ = b.EncodeVarint(59<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CurrencyCreateMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Union_UsernameRegisterTokenMsg:
		_ = b.EncodeVarint(61<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UsernameRegisterTokenMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Union_UsernameTransferTokenMsg:
		_ = b.EncodeVarint(62<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UsernameTransferTokenMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Union_UsernameChangeTokenTargetsMsg:
		_ = b.EncodeVarint(63<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UsernameChangeTokenTargetsMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Union_UsernameUpdateConfigurationMsg:
		_ = b.EncodeVarint(64<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UsernameUpdateConfigurationMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Union_DistributionCreateMsg:
		_ = b.EncodeVarint(66<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DistributionCreateMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Union_DistributionMsg:
		_ = b.EncodeVarint(67<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DistributionMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Union_DistributionResetMsg:
		_ = b.EncodeVarint(68<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DistributionResetMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Union_MsgfeeSetMsgFeeMsg:
		_ = b.EncodeVarint(80<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MsgfeeSetMsgFeeMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Union_BlueaccountRegisterDomainMsg:
		_ = b.EncodeVarint(81<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountRegisterDomainMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Union_BlueaccountTransferDomainMsg:
		_ = b.EncodeVarint(82<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountTransferDomainMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Union_BlueaccountRenewDomainMsg:
		_ = b.EncodeVarint(83<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountRenewDomainMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Union_BlueaccountDeleteDomainMsg:
		_ = b.EncodeVarint(84<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountDeleteDomainMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Union_BlueaccountRegisterAccountMsg:
		_ = b.EncodeVarint(85<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountRegisterAccountMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Union_BlueaccountTransferAccountMsg:
		_ = b.EncodeVarint(86<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountTransferAccountMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Union_BlueaccountReplaceAccountTargetMsg:
		_ = b.EncodeVarint(87<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountReplaceAccountTargetMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Union_BlueaccountDeleteAccountMsg:
		_ = b.EncodeVarint(88<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountDeleteAccountMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Union_BlueaccountUpdateConfigurationMsg:
		_ = b.EncodeVarint(89<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountUpdateConfigurationMsg); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ExecuteBatchMsg_Union.Sum has unexpected type %T", x)
	}
	return nil
}

func _ExecuteBatchMsg_Union_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExecuteBatchMsg_Union)
	switch tag {
	case 51: // sum.cash_send_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(cash.SendMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteBatchMsg_Union_CashSendMsg{msg}
		return true, err
	case 52: // sum.escrow_create_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.CreateMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteBatchMsg_Union_EscrowCreateMsg{msg}
		return true, err
	case 53: // sum.escrow_release_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.ReleaseMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteBatchMsg_Union_EscrowReleaseMsg{msg}
		return true, err
	case 54: // sum.escrow_return_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.ReturnMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteBatchMsg_Union_EscrowReturnMsg{msg}
		return true, err
	case 55: // sum.escrow_update_parties_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.UpdatePartiesMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteBatchMsg_Union_EscrowUpdatePartiesMsg{msg}
		return true, err
	case 56: // sum.multisig_create_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(multisig.CreateMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteBatchMsg_Union_MultisigCreateMsg{msg}
		return true, err
	case 57: // sum.multisig_update_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(multisig.UpdateMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteBatchMsg_Union_MultisigUpdateMsg{msg}
		return true, err
	case 58: // sum.validators_apply_diff_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(validators.ApplyDiffMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteBatchMsg_Union_ValidatorsApplyDiffMsg{msg}
		return true, err
	case 59: // sum.currency_create_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(currency.CreateMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteBatchMsg_Union_CurrencyCreateMsg{msg}
		return true, err
	case 61: // sum.username_register_token_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(username.RegisterTokenMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteBatchMsg_Union_UsernameRegisterTokenMsg{msg}
		return true, err
	case 62: // sum.username_transfer_token_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(username.TransferTokenMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteBatchMsg_Union_UsernameTransferTokenMsg{msg}
		return true, err
	case 63: // sum.username_change_token_targets_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(username.ChangeTokenTargetsMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteBatchMsg_Union_UsernameChangeTokenTargetsMsg{msg}
		return true, err
	case 64: // sum.username_update_configuration_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(username.UpdateConfigurationMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteBatchMsg_Union_UsernameUpdateConfigurationMsg{msg}
		return true, err
	case 66: // sum.distribution_create_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(distribution.CreateMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteBatchMsg_Union_DistributionCreateMsg{msg}
		return true, err
	case 67: // sum.distribution_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(distribution.DistributeMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteBatchMsg_Union_DistributionMsg{msg}
		return true, err
	case 68: // sum.distribution_reset_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(distribution.ResetMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteBatchMsg_Union_DistributionResetMsg{msg}
		return true, err
	case 80: // sum.msgfee_set_msg_fee_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(msgfee.SetMsgFeeMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteBatchMsg_Union_MsgfeeSetMsgFeeMsg{msg}
		return true, err
	case 81: // sum.blueaccount_register_domain_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.RegisterDomainMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteBatchMsg_Union_BlueaccountRegisterDomainMsg{msg}
		return true, err
	case 82: // sum.blueaccount_transfer_domain_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.TransferDomainMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteBatchMsg_Union_BlueaccountTransferDomainMsg{msg}
		return true, err
	case 83: // sum.blueaccount_renew_domain_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.RenewDomainMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteBatchMsg_Union_BlueaccountRenewDomainMsg{msg}
		return true, err
	case 84: // sum.blueaccount_delete_domain_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.DeleteDomainMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteBatchMsg_Union_BlueaccountDeleteDomainMsg{msg}
		return true, err
	case 85: // sum.blueaccount_register_account_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.RegisterAccountMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteBatchMsg_Union_BlueaccountRegisterAccountMsg{msg}
		return true, err
	case 86: // sum.blueaccount_transfer_account_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.TransferAccountMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteBatchMsg_Union_BlueaccountTransferAccountMsg{msg}
		return true, err
	case 87: // sum.blueaccount_replace_account_target_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.ReplaceAccountTargetsMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteBatchMsg_Union_BlueaccountReplaceAccountTargetMsg{msg}
		return true, err
	case 88: // sum.blueaccount_delete_account_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.DeleteAccountMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteBatchMsg_Union_BlueaccountDeleteAccountMsg{msg}
		return true, err
	case 89: // sum.blueaccount_update_configuration_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.UpdateConfigurationMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteBatchMsg_Union_BlueaccountUpdateConfigurationMsg{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ExecuteBatchMsg_Union_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExecuteBatchMsg_Union)
	// sum
	switch x := m.Sum.(type) {
	case *ExecuteBatchMsg_Union_CashSendMsg:
		s := proto.Size(x.CashSendMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Union_EscrowCreateMsg:
		s := proto.Size(x.EscrowCreateMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Union_EscrowReleaseMsg:
		s := proto.Size(x.EscrowReleaseMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Union_EscrowReturnMsg:
		s := proto.Size(x.EscrowReturnMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Union_EscrowUpdatePartiesMsg:
		s := proto.Size(x.EscrowUpdatePartiesMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Union_MultisigCreateMsg:
		s := proto.Size(x.MultisigCreateMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Union_MultisigUpdateMsg:
		s := proto.Size(x.MultisigUpdateMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Union_ValidatorsApplyDiffMsg:
		s := proto.Size(x.ValidatorsApplyDiffMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Union_CurrencyCreateMsg:
		s := proto.Size(x.CurrencyCreateMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Union_UsernameRegisterTokenMsg:
		s := proto.Size(x.UsernameRegisterTokenMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Union_UsernameTransferTokenMsg:
		s := proto.Size(x.UsernameTransferTokenMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Union_UsernameChangeTokenTargetsMsg:
		s := proto.Size(x.UsernameChangeTokenTargetsMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Union_UsernameUpdateConfigurationMsg:
		s := proto.Size(x.UsernameUpdateConfigurationMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Union_DistributionCreateMsg:
		s := proto.Size(x.DistributionCreateMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Union_DistributionMsg:
		s := proto.Size(x.DistributionMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Union_DistributionResetMsg:
		s := proto.Size(x.DistributionResetMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Union_MsgfeeSetMsgFeeMsg:
		s := proto.Size(x.MsgfeeSetMsgFeeMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Union_BlueaccountRegisterDomainMsg:
		s := proto.Size(x.BlueaccountRegisterDomainMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Union_BlueaccountTransferDomainMsg:
		s := proto.Size(x.BlueaccountTransferDomainMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Union_BlueaccountRenewDomainMsg:
		s := proto.Size(x.BlueaccountRenewDomainMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Union_BlueaccountDeleteDomainMsg:
		s := proto.Size(x.BlueaccountDeleteDomainMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Union_BlueaccountRegisterAccountMsg:
		s := proto.Size(x.BlueaccountRegisterAccountMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Union_BlueaccountTransferAccountMsg:
		s := proto.Size(x.BlueaccountTransferAccountMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Union_BlueaccountReplaceAccountTargetMsg:
		s := proto.Size(x.BlueaccountReplaceAccountTargetMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Union_BlueaccountDeleteAccountMsg:
		s := proto.Size(x.BlueaccountDeleteAccountMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Union_BlueaccountUpdateConfigurationMsg:
		s := proto.Size(x.BlueaccountUpdateConfigurationMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ProposalOptions are possible items that can be enacted by a governance vote
// Trimmed down somewhat arbitrary to what is believed to be reasonable
type ProposalOptions struct {
	// Types that are valid to be assigned to Option:
	//	*ProposalOptions_CashSendMsg
	//	*ProposalOptions_EscrowReleaseMsg
	//	*ProposalOptions_UpdateEscrowPartiesMsg
	//	*ProposalOptions_MultisigUpdateMsg
	//	*ProposalOptions_ValidatorsApplyDiffMsg
	//	*ProposalOptions_CurrencyCreateMsg
	//	*ProposalOptions_ExecuteProposalBatchMsg
	//	*ProposalOptions_UsernameRegisterTokenMsg
	//	*ProposalOptions_UsernameTransferTokenMsg
	//	*ProposalOptions_UsernameChangeTokenTargetsMsg
	//	*ProposalOptions_UsernameUpdateConfigurationMsg
	//	*ProposalOptions_DistributionCreateMsg
	//	*ProposalOptions_DistributionMsg
	//	*ProposalOptions_DistributionResetMsg
	//	*ProposalOptions_MigrationUpgradeSchemaMsg
	//	*ProposalOptions_GovUpdateElectorateMsg
	//	*ProposalOptions_GovUpdateElectionRuleMsg
	//	*ProposalOptions_GovCreateTextResolutionMsg
	//	*ProposalOptions_MsgfeeSetMsgFeeMsg
	//	*ProposalOptions_BlueaccountRegisterDomainMsg
	//	*ProposalOptions_BlueaccountTransferDomainMsg
	//	*ProposalOptions_BlueaccountRenewDomainMsg
	//	*ProposalOptions_BlueaccountDeleteDomainMsg
	//	*ProposalOptions_BlueaccountRegisterAccountMsg
	//	*ProposalOptions_BlueaccountTransferAccountMsg
	//	*ProposalOptions_BlueaccountReplaceAccountTargetMsg
	//	*ProposalOptions_BlueaccountDeleteAccountMsg
	//	*ProposalOptions_BlueaccountUpdateConfigurationMsg
	Option isProposalOptions_Option `protobuf_oneof:"option"`
}

func (m *ProposalOptions) Reset()         { *m = ProposalOptions{} }
func (m *ProposalOptions) String() string { return proto.CompactTextString(m) }
func (*ProposalOptions) ProtoMessage()    {}
func (*ProposalOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8efb1d2ea3c411d, []int{2}
}
func (m *ProposalOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalOptions.Merge(m, src)
}
func (m *ProposalOptions) XXX_Size() int {
	return m.Size()
}
func (m *ProposalOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalOptions proto.InternalMessageInfo

type isProposalOptions_Option interface {
	isProposalOptions_Option()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProposalOptions_CashSendMsg struct {
	CashSendMsg *cash.SendMsg `protobuf:"bytes,51,opt,name=cash_send_msg,json=cashSendMsg,proto3,oneof"`
}
type ProposalOptions_EscrowReleaseMsg struct {
	EscrowReleaseMsg *escrow.ReleaseMsg `protobuf:"bytes,53,opt,name=escrow_release_msg,json=escrowReleaseMsg,proto3,oneof"`
}
type ProposalOptions_UpdateEscrowPartiesMsg struct {
	UpdateEscrowPartiesMsg *escrow.UpdatePartiesMsg `protobuf:"bytes,55,opt,name=update_escrow_parties_msg,json=updateEscrowPartiesMsg,proto3,oneof"`
}
type ProposalOptions_MultisigUpdateMsg struct {
	MultisigUpdateMsg *multisig.UpdateMsg `protobuf:"bytes,57,opt,name=multisig_update_msg,json=multisigUpdateMsg,proto3,oneof"`
}
type ProposalOptions_ValidatorsApplyDiffMsg struct {
	ValidatorsApplyDiffMsg *validators.ApplyDiffMsg `protobuf:"bytes,58,opt,name=validators_apply_diff_msg,json=validatorsApplyDiffMsg,proto3,oneof"`
}
type ProposalOptions_CurrencyCreateMsg struct {
	CurrencyCreateMsg *currency.CreateMsg `protobuf:"bytes,59,opt,name=currency_create_msg,json=currencyCreateMsg,proto3,oneof"`
}
type ProposalOptions_ExecuteProposalBatchMsg struct {
	ExecuteProposalBatchMsg *ExecuteProposalBatchMsg `protobuf:"bytes,60,opt,name=execute_proposal_batch_msg,json=executeProposalBatchMsg,proto3,oneof"`
}
type ProposalOptions_UsernameRegisterTokenMsg struct {
	UsernameRegisterTokenMsg *username.RegisterTokenMsg `protobuf:"bytes,61,opt,name=username_register_token_msg,json=usernameRegisterTokenMsg,proto3,oneof"`
}
type ProposalOptions_UsernameTransferTokenMsg struct {
	UsernameTransferTokenMsg *username.TransferTokenMsg `protobuf:"bytes,62,opt,name=username_transfer_token_msg,json=usernameTransferTokenMsg,proto3,oneof"`
}
type ProposalOptions_UsernameChangeTokenTargetsMsg struct {
	UsernameChangeTokenTargetsMsg *username.ChangeTokenTargetsMsg `protobuf:"bytes,63,opt,name=username_change_token_targets_msg,json=usernameChangeTokenTargetsMsg,proto3,oneof"`
}
type ProposalOptions_UsernameUpdateConfigurationMsg struct {
	UsernameUpdateConfigurationMsg *username.UpdateConfigurationMsg `protobuf:"bytes,64,opt,name=username_update_configuration_msg,json=usernameUpdateConfigurationMsg,proto3,oneof"`
}
type ProposalOptions_DistributionCreateMsg struct {
	DistributionCreateMsg *distribution.CreateMsg `protobuf:"bytes,66,opt,name=distribution_create_msg,json=distributionCreateMsg,proto3,oneof"`
}
type ProposalOptions_DistributionMsg struct {
	DistributionMsg *distribution.DistributeMsg `protobuf:"bytes,67,opt,name=distribution_msg,json=distributionMsg,proto3,oneof"`
}
type ProposalOptions_DistributionResetMsg struct {
	DistributionResetMsg *distribution.ResetMsg `protobuf:"bytes,68,opt,name=distribution_reset_msg,json=distributionResetMsg,proto3,oneof"`
}
type ProposalOptions_MigrationUpgradeSchemaMsg struct {
	MigrationUpgradeSchemaMsg *migration.UpgradeSchemaMsg `protobuf:"bytes,69,opt,name=migration_upgrade_schema_msg,json=migrationUpgradeSchemaMsg,proto3,oneof"`
}
type ProposalOptions_GovUpdateElectorateMsg struct {
	GovUpdateElectorateMsg *gov.UpdateElectorateMsg `protobuf:"bytes,77,opt,name=gov_update_electorate_msg,json=govUpdateElectorateMsg,proto3,oneof"`
}
type ProposalOptions_GovUpdateElectionRuleMsg struct {
	GovUpdateElectionRuleMsg *gov.UpdateElectionRuleMsg `protobuf:"bytes,78,opt,name=gov_update_election_rule_msg,json=govUpdateElectionRuleMsg,proto3,oneof"`
}
type ProposalOptions_GovCreateTextResolutionMsg struct {
	GovCreateTextResolutionMsg *gov.CreateTextResolutionMsg `protobuf:"bytes,79,opt,name=gov_create_text_resolution_msg,json=govCreateTextResolutionMsg,proto3,oneof"`
}
type ProposalOptions_MsgfeeSetMsgFeeMsg struct {
	MsgfeeSetMsgFeeMsg *msgfee.SetMsgFeeMsg `protobuf:"bytes,80,opt,name=msgfee_set_msg_fee_msg,json=msgfeeSetMsgFeeMsg,proto3,oneof"`
}
type ProposalOptions_BlueaccountRegisterDomainMsg struct {
	BlueaccountRegisterDomainMsg *blueaccount.RegisterDomainMsg `protobuf:"bytes,81,opt,name=blueaccount_register_domain_msg,json=blueaccountRegisterDomainMsg,proto3,oneof"`
}
type ProposalOptions_BlueaccountTransferDomainMsg struct {
	BlueaccountTransferDomainMsg *blueaccount.TransferDomainMsg `protobuf:"bytes,82,opt,name=blueaccount_transfer_domain_msg,json=blueaccountTransferDomainMsg,proto3,oneof"`
}
type ProposalOptions_BlueaccountRenewDomainMsg struct {
	BlueaccountRenewDomainMsg *blueaccount.RenewDomainMsg `protobuf:"bytes,83,opt,name=blueaccount_renew_domain_msg,json=blueaccountRenewDomainMsg,proto3,oneof"`
}
type ProposalOptions_BlueaccountDeleteDomainMsg struct {
	BlueaccountDeleteDomainMsg *blueaccount.DeleteDomainMsg `protobuf:"bytes,84,opt,name=blueaccount_delete_domain_msg,json=blueaccountDeleteDomainMsg,proto3,oneof"`
}
type ProposalOptions_BlueaccountRegisterAccountMsg struct {
	BlueaccountRegisterAccountMsg *blueaccount.RegisterAccountMsg `protobuf:"bytes,85,opt,name=blueaccount_register_account_msg,json=blueaccountRegisterAccountMsg,proto3,oneof"`
}
type ProposalOptions_BlueaccountTransferAccountMsg struct {
	BlueaccountTransferAccountMsg *blueaccount.TransferAccountMsg `protobuf:"bytes,86,opt,name=blueaccount_transfer_account_msg,json=blueaccountTransferAccountMsg,proto3,oneof"`
}
type ProposalOptions_BlueaccountReplaceAccountTargetMsg struct {
	BlueaccountReplaceAccountTargetMsg *blueaccount.ReplaceAccountTargetsMsg `protobuf:"bytes,87,opt,name=blueaccount_replace_account_target_msg,json=blueaccountReplaceAccountTargetMsg,proto3,oneof"`
}
type ProposalOptions_BlueaccountDeleteAccountMsg struct {
	BlueaccountDeleteAccountMsg *blueaccount.DeleteAccountMsg `protobuf:"bytes,88,opt,name=blueaccount_delete_account_msg,json=blueaccountDeleteAccountMsg,proto3,oneof"`
}
type ProposalOptions_BlueaccountUpdateConfigurationMsg struct {
	BlueaccountUpdateConfigurationMsg *blueaccount.UpdateConfigurationMsg `protobuf:"bytes,89,opt,name=blueaccount_update_configuration_msg,json=blueaccountUpdateConfigurationMsg,proto3,oneof"`
}

func (*ProposalOptions_CashSendMsg) isProposalOptions_Option()                        {}
func (*ProposalOptions_EscrowReleaseMsg) isProposalOptions_Option()                   {}
func (*ProposalOptions_UpdateEscrowPartiesMsg) isProposalOptions_Option()             {}
func (*ProposalOptions_MultisigUpdateMsg) isProposalOptions_Option()                  {}
func (*ProposalOptions_ValidatorsApplyDiffMsg) isProposalOptions_Option()             {}
func (*ProposalOptions_CurrencyCreateMsg) isProposalOptions_Option()                  {}
func (*ProposalOptions_ExecuteProposalBatchMsg) isProposalOptions_Option()            {}
func (*ProposalOptions_UsernameRegisterTokenMsg) isProposalOptions_Option()           {}
func (*ProposalOptions_UsernameTransferTokenMsg) isProposalOptions_Option()           {}
func (*ProposalOptions_UsernameChangeTokenTargetsMsg) isProposalOptions_Option()      {}
func (*ProposalOptions_UsernameUpdateConfigurationMsg) isProposalOptions_Option()     {}
func (*ProposalOptions_DistributionCreateMsg) isProposalOptions_Option()              {}
func (*ProposalOptions_DistributionMsg) isProposalOptions_Option()                    {}
func (*ProposalOptions_DistributionResetMsg) isProposalOptions_Option()               {}
func (*ProposalOptions_MigrationUpgradeSchemaMsg) isProposalOptions_Option()          {}
func (*ProposalOptions_GovUpdateElectorateMsg) isProposalOptions_Option()             {}
func (*ProposalOptions_GovUpdateElectionRuleMsg) isProposalOptions_Option()           {}
func (*ProposalOptions_GovCreateTextResolutionMsg) isProposalOptions_Option()         {}
func (*ProposalOptions_MsgfeeSetMsgFeeMsg) isProposalOptions_Option()                 {}
func (*ProposalOptions_BlueaccountRegisterDomainMsg) isProposalOptions_Option()       {}
func (*ProposalOptions_BlueaccountTransferDomainMsg) isProposalOptions_Option()       {}
func (*ProposalOptions_BlueaccountRenewDomainMsg) isProposalOptions_Option()          {}
func (*ProposalOptions_BlueaccountDeleteDomainMsg) isProposalOptions_Option()         {}
func (*ProposalOptions_BlueaccountRegisterAccountMsg) isProposalOptions_Option()      {}
func (*ProposalOptions_BlueaccountTransferAccountMsg) isProposalOptions_Option()      {}
func (*ProposalOptions_BlueaccountReplaceAccountTargetMsg) isProposalOptions_Option() {}
func (*ProposalOptions_BlueaccountDeleteAccountMsg) isProposalOptions_Option()        {}
func (*ProposalOptions_BlueaccountUpdateConfigurationMsg) isProposalOptions_Option()  {}

func (m *ProposalOptions) GetOption() isProposalOptions_Option {
	if m != nil {
		return m.Option
	}
	return nil
}

func (m *ProposalOptions) GetCashSendMsg() *cash.SendMsg {
	if x, ok := m.GetOption().(*ProposalOptions_CashSendMsg); ok {
		return x.CashSendMsg
	}
	return nil
}

func (m *ProposalOptions) GetEscrowReleaseMsg() *escrow.ReleaseMsg {
	if x, ok := m.GetOption().(*ProposalOptions_EscrowReleaseMsg); ok {
		return x.EscrowReleaseMsg
	}
	return nil
}

func (m *ProposalOptions) GetUpdateEscrowPartiesMsg() *escrow.UpdatePartiesMsg {
	if x, ok := m.GetOption().(*ProposalOptions_UpdateEscrowPartiesMsg); ok {
		return x.UpdateEscrowPartiesMsg
	}
	return nil
}

func (m *ProposalOptions) GetMultisigUpdateMsg() *multisig.UpdateMsg {
	if x, ok := m.GetOption().(*ProposalOptions_MultisigUpdateMsg); ok {
		return x.MultisigUpdateMsg
	}
	return nil
}

func (m *ProposalOptions) GetValidatorsApplyDiffMsg() *validators.ApplyDiffMsg {
	if x, ok := m.GetOption().(*ProposalOptions_ValidatorsApplyDiffMsg); ok {
		return x.ValidatorsApplyDiffMsg
	}
	return nil
}

func (m *ProposalOptions) GetCurrencyCreateMsg() *currency.CreateMsg {
	if x, ok := m.GetOption().(*ProposalOptions_CurrencyCreateMsg); ok {
		return x.CurrencyCreateMsg
	}
	return nil
}

func (m *ProposalOptions) GetExecuteProposalBatchMsg() *ExecuteProposalBatchMsg {
	if x, ok := m.GetOption().(*ProposalOptions_ExecuteProposalBatchMsg); ok {
		return x.ExecuteProposalBatchMsg
	}
	return nil
}

func (m *ProposalOptions) GetUsernameRegisterTokenMsg() *username.RegisterTokenMsg {
	if x, ok := m.GetOption().(*ProposalOptions_UsernameRegisterTokenMsg); ok {
		return x.UsernameRegisterTokenMsg
	}
	return nil
}

func (m *ProposalOptions) GetUsernameTransferTokenMsg() *username.TransferTokenMsg {
	if x, ok := m.GetOption().(*ProposalOptions_UsernameTransferTokenMsg); ok {
		return x.UsernameTransferTokenMsg
	}
	return nil
}

func (m *ProposalOptions) GetUsernameChangeTokenTargetsMsg() *username.ChangeTokenTargetsMsg {
	if x, ok := m.GetOption().(*ProposalOptions_UsernameChangeTokenTargetsMsg); ok {
		return x.UsernameChangeTokenTargetsMsg
	}
	return nil
}

func (m *ProposalOptions) GetUsernameUpdateConfigurationMsg() *username.UpdateConfigurationMsg {
	if x, ok := m.GetOption().(*ProposalOptions_UsernameUpdateConfigurationMsg); ok {
		return x.UsernameUpdateConfigurationMsg
	}
	return nil
}

func (m *ProposalOptions) GetDistributionCreateMsg() *distribution.CreateMsg {
	if x, ok := m.GetOption().(*ProposalOptions_DistributionCreateMsg); ok {
		return x.DistributionCreateMsg
	}
	return nil
}

func (m *ProposalOptions) GetDistributionMsg() *distribution.DistributeMsg {
	if x, ok := m.GetOption().(*ProposalOptions_DistributionMsg); ok {
		return x.DistributionMsg
	}
	return nil
}

func (m *ProposalOptions) GetDistributionResetMsg() *distribution.ResetMsg {
	if x, ok := m.GetOption().(*ProposalOptions_DistributionResetMsg); ok {
		return x.DistributionResetMsg
	}
	return nil
}

func (m *ProposalOptions) GetMigrationUpgradeSchemaMsg() *migration.UpgradeSchemaMsg {
	if x, ok := m.GetOption().(*ProposalOptions_MigrationUpgradeSchemaMsg); ok {
		return x.MigrationUpgradeSchemaMsg
	}
	return nil
}

func (m *ProposalOptions) GetGovUpdateElectorateMsg() *gov.UpdateElectorateMsg {
	if x, ok := m.GetOption().(*ProposalOptions_GovUpdateElectorateMsg); ok {
		return x.GovUpdateElectorateMsg
	}
	return nil
}

func (m *ProposalOptions) GetGovUpdateElectionRuleMsg() *gov.UpdateElectionRuleMsg {
	if x, ok := m.GetOption().(*ProposalOptions_GovUpdateElectionRuleMsg); ok {
		return x.GovUpdateElectionRuleMsg
	}
	return nil
}

func (m *ProposalOptions) GetGovCreateTextResolutionMsg() *gov.CreateTextResolutionMsg {
	if x, ok := m.GetOption().(*ProposalOptions_GovCreateTextResolutionMsg); ok {
		return x.GovCreateTextResolutionMsg
	}
	return nil
}

func (m *ProposalOptions) GetMsgfeeSetMsgFeeMsg() *msgfee.SetMsgFeeMsg {
	if x, ok := m.GetOption().(*ProposalOptions_MsgfeeSetMsgFeeMsg); ok {
		return x.MsgfeeSetMsgFeeMsg
	}
	return nil
}

func (m *ProposalOptions) GetBlueaccountRegisterDomainMsg() *blueaccount.RegisterDomainMsg {
	if x, ok := m.GetOption().(*ProposalOptions_BlueaccountRegisterDomainMsg); ok {
		return x.BlueaccountRegisterDomainMsg
	}
	return nil
}

func (m *ProposalOptions) GetBlueaccountTransferDomainMsg() *blueaccount.TransferDomainMsg {
	if x, ok := m.GetOption().(*ProposalOptions_BlueaccountTransferDomainMsg); ok {
		return x.BlueaccountTransferDomainMsg
	}
	return nil
}

func (m *ProposalOptions) GetBlueaccountRenewDomainMsg() *blueaccount.RenewDomainMsg {
	if x, ok := m.GetOption().(*ProposalOptions_BlueaccountRenewDomainMsg); ok {
		return x.BlueaccountRenewDomainMsg
	}
	return nil
}

func (m *ProposalOptions) GetBlueaccountDeleteDomainMsg() *blueaccount.DeleteDomainMsg {
	if x, ok := m.GetOption().(*ProposalOptions_BlueaccountDeleteDomainMsg); ok {
		return x.BlueaccountDeleteDomainMsg
	}
	return nil
}

func (m *ProposalOptions) GetBlueaccountRegisterAccountMsg() *blueaccount.RegisterAccountMsg {
	if x, ok := m.GetOption().(*ProposalOptions_BlueaccountRegisterAccountMsg); ok {
		return x.BlueaccountRegisterAccountMsg
	}
	return nil
}

func (m *ProposalOptions) GetBlueaccountTransferAccountMsg() *blueaccount.TransferAccountMsg {
	if x, ok := m.GetOption().(*ProposalOptions_BlueaccountTransferAccountMsg); ok {
		return x.BlueaccountTransferAccountMsg
	}
	return nil
}

func (m *ProposalOptions) GetBlueaccountReplaceAccountTargetMsg() *blueaccount.ReplaceAccountTargetsMsg {
	if x, ok := m.GetOption().(*ProposalOptions_BlueaccountReplaceAccountTargetMsg); ok {
		return x.BlueaccountReplaceAccountTargetMsg
	}
	return nil
}

func (m *ProposalOptions) GetBlueaccountDeleteAccountMsg() *blueaccount.DeleteAccountMsg {
	if x, ok := m.GetOption().(*ProposalOptions_BlueaccountDeleteAccountMsg); ok {
		return x.BlueaccountDeleteAccountMsg
	}
	return nil
}

func (m *ProposalOptions) GetBlueaccountUpdateConfigurationMsg() *blueaccount.UpdateConfigurationMsg {
	if x, ok := m.GetOption().(*ProposalOptions_BlueaccountUpdateConfigurationMsg); ok {
		return x.BlueaccountUpdateConfigurationMsg
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ProposalOptions) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ProposalOptions_OneofMarshaler, _ProposalOptions_OneofUnmarshaler, _ProposalOptions_OneofSizer, []interface{}{
		(*ProposalOptions_CashSendMsg)(nil),
		(*ProposalOptions_EscrowReleaseMsg)(nil),
		(*ProposalOptions_UpdateEscrowPartiesMsg)(nil),
		(*ProposalOptions_MultisigUpdateMsg)(nil),
		(*ProposalOptions_ValidatorsApplyDiffMsg)(nil),
		(*ProposalOptions_CurrencyCreateMsg)(nil),
		(*ProposalOptions_ExecuteProposalBatchMsg)(nil),
		(*ProposalOptions_UsernameRegisterTokenMsg)(nil),
		(*ProposalOptions_UsernameTransferTokenMsg)(nil),
		(*ProposalOptions_UsernameChangeTokenTargetsMsg)(nil),
		(*ProposalOptions_UsernameUpdateConfigurationMsg)(nil),
		(*ProposalOptions_DistributionCreateMsg)(nil),
		(*ProposalOptions_DistributionMsg)(nil),
		(*ProposalOptions_DistributionResetMsg)(nil),
		(*ProposalOptions_MigrationUpgradeSchemaMsg)(nil),
		(*ProposalOptions_GovUpdateElectorateMsg)(nil),
		(*ProposalOptions_GovUpdateElectionRuleMsg)(nil),
		(*ProposalOptions_GovCreateTextResolutionMsg)(nil),
		(*ProposalOptions_MsgfeeSetMsgFeeMsg)(nil),
		(*ProposalOptions_BlueaccountRegisterDomainMsg)(nil),
		(*ProposalOptions_BlueaccountTransferDomainMsg)(nil),
		(*ProposalOptions_BlueaccountRenewDomainMsg)(nil),
		(*ProposalOptions_BlueaccountDeleteDomainMsg)(nil),
		(*ProposalOptions_BlueaccountRegisterAccountMsg)(nil),
		(*ProposalOptions_BlueaccountTransferAccountMsg)(nil),
		(*ProposalOptions_BlueaccountReplaceAccountTargetMsg)(nil),
		(*ProposalOptions_BlueaccountDeleteAccountMsg)(nil),
		(*ProposalOptions_BlueaccountUpdateConfigurationMsg)(nil),
	}
}

func _ProposalOptions_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ProposalOptions)
	// option
	switch x := m.Option.(type) {
	case *ProposalOptions_CashSendMsg:
		_ = b.EncodeVarint(51<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CashSendMsg); err != nil {
			return err
		}
	case *ProposalOptions_EscrowReleaseMsg:
		_ = b.EncodeVarint(53<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EscrowReleaseMsg); err != nil {
			return err
		}
	case *ProposalOptions_UpdateEscrowPartiesMsg:
		_ = b.EncodeVarint(55<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateEscrowPartiesMsg); err != nil {
			return err
		}
	case *ProposalOptions_MultisigUpdateMsg:
		_ = b.EncodeVarint(57<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MultisigUpdateMsg); err != nil {
			return err
		}
	case *ProposalOptions_ValidatorsApplyDiffMsg:
		_ = b.EncodeVarint(58<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ValidatorsApplyDiffMsg); err != nil {
			return err
		}
	case *ProposalOptions_CurrencyCreateMsg:
		_ = b.EncodeVarint(59<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CurrencyCreateMsg); err != nil {
			return err
		}
	case *ProposalOptions_ExecuteProposalBatchMsg:
		_ = b.EncodeVarint(60<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExecuteProposalBatchMsg); err != nil {
			return err
		}
	case *ProposalOptions_UsernameRegisterTokenMsg:
		_ = b.EncodeVarint(61<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UsernameRegisterTokenMsg); err != nil {
			return err
		}
	case *ProposalOptions_UsernameTransferTokenMsg:
		_ = b.EncodeVarint(62<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UsernameTransferTokenMsg); err != nil {
			return err
		}
	case *ProposalOptions_UsernameChangeTokenTargetsMsg:
		_ = b.EncodeVarint(63<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UsernameChangeTokenTargetsMsg); err != nil {
			return err
		}
	case *ProposalOptions_UsernameUpdateConfigurationMsg:
		_ = b.EncodeVarint(64<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UsernameUpdateConfigurationMsg); err != nil {
			return err
		}
	case *ProposalOptions_DistributionCreateMsg:
		_ = b.EncodeVarint(66<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DistributionCreateMsg); err != nil {
			return err
		}
	case *ProposalOptions_DistributionMsg:
		_ = b.EncodeVarint(67<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DistributionMsg); err != nil {
			return err
		}
	case *ProposalOptions_DistributionResetMsg:
		_ = b.EncodeVarint(68<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DistributionResetMsg); err != nil {
			return err
		}
	case *ProposalOptions_MigrationUpgradeSchemaMsg:
		_ = b.EncodeVarint(69<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MigrationUpgradeSchemaMsg); err != nil {
			return err
		}
	case *ProposalOptions_GovUpdateElectorateMsg:
		_ = b.EncodeVarint(77<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GovUpdateElectorateMsg); err != nil {
			return err
		}
	case *ProposalOptions_GovUpdateElectionRuleMsg:
		_ = b.EncodeVarint(78<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GovUpdateElectionRuleMsg); err != nil {
			return err
		}
	case *ProposalOptions_GovCreateTextResolutionMsg:
		_ = b.EncodeVarint(79<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GovCreateTextResolutionMsg); err != nil {
			return err
		}
	case *ProposalOptions_MsgfeeSetMsgFeeMsg:
		_ = b.EncodeVarint(80<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MsgfeeSetMsgFeeMsg); err != nil {
			return err
		}
	case *ProposalOptions_BlueaccountRegisterDomainMsg:
		_ = b.EncodeVarint(81<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountRegisterDomainMsg); err != nil {
			return err
		}
	case *ProposalOptions_BlueaccountTransferDomainMsg:
		_ = b.EncodeVarint(82<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountTransferDomainMsg); err != nil {
			return err
		}
	case *ProposalOptions_BlueaccountRenewDomainMsg:
		_ = b.EncodeVarint(83<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountRenewDomainMsg); err != nil {
			return err
		}
	case *ProposalOptions_BlueaccountDeleteDomainMsg:
		_ = b.EncodeVarint(84<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountDeleteDomainMsg); err != nil {
			return err
		}
	case *ProposalOptions_BlueaccountRegisterAccountMsg:
		_ = b.EncodeVarint(85<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountRegisterAccountMsg); err != nil {
			return err
		}
	case *ProposalOptions_BlueaccountTransferAccountMsg:
		_ = b.EncodeVarint(86<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountTransferAccountMsg); err != nil {
			return err
		}
	case *ProposalOptions_BlueaccountReplaceAccountTargetMsg:
		_ = b.EncodeVarint(87<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountReplaceAccountTargetMsg); err != nil {
			return err
		}
	case *ProposalOptions_BlueaccountDeleteAccountMsg:
		_ = b.EncodeVarint(88<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountDeleteAccountMsg); err != nil {
			return err
		}
	case *ProposalOptions_BlueaccountUpdateConfigurationMsg:
		_ = b.EncodeVarint(89<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountUpdateConfigurationMsg); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ProposalOptions.Option has unexpected type %T", x)
	}
	return nil
}

func _ProposalOptions_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ProposalOptions)
	switch tag {
	case 51: // option.cash_send_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(cash.SendMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_CashSendMsg{msg}
		return true, err
	case 53: // option.escrow_release_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.ReleaseMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_EscrowReleaseMsg{msg}
		return true, err
	case 55: // option.update_escrow_parties_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.UpdatePartiesMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_UpdateEscrowPartiesMsg{msg}
		return true, err
	case 57: // option.multisig_update_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(multisig.UpdateMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_MultisigUpdateMsg{msg}
		return true, err
	case 58: // option.validators_apply_diff_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(validators.ApplyDiffMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_ValidatorsApplyDiffMsg{msg}
		return true, err
	case 59: // option.currency_create_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(currency.CreateMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_CurrencyCreateMsg{msg}
		return true, err
	case 60: // option.execute_proposal_batch_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExecuteProposalBatchMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_ExecuteProposalBatchMsg{msg}
		return true, err
	case 61: // option.username_register_token_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(username.RegisterTokenMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_UsernameRegisterTokenMsg{msg}
		return true, err
	case 62: // option.username_transfer_token_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(username.TransferTokenMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_UsernameTransferTokenMsg{msg}
		return true, err
	case 63: // option.username_change_token_targets_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(username.ChangeTokenTargetsMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_UsernameChangeTokenTargetsMsg{msg}
		return true, err
	case 64: // option.username_update_configuration_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(username.UpdateConfigurationMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_UsernameUpdateConfigurationMsg{msg}
		return true, err
	case 66: // option.distribution_create_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(distribution.CreateMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_DistributionCreateMsg{msg}
		return true, err
	case 67: // option.distribution_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(distribution.DistributeMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_DistributionMsg{msg}
		return true, err
	case 68: // option.distribution_reset_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(distribution.ResetMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_DistributionResetMsg{msg}
		return true, err
	case 69: // option.migration_upgrade_schema_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(migration.UpgradeSchemaMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_MigrationUpgradeSchemaMsg{msg}
		return true, err
	case 77: // option.gov_update_electorate_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gov.UpdateElectorateMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_GovUpdateElectorateMsg{msg}
		return true, err
	case 78: // option.gov_update_election_rule_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gov.UpdateElectionRuleMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_GovUpdateElectionRuleMsg{msg}
		return true, err
	case 79: // option.gov_create_text_resolution_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gov.CreateTextResolutionMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_GovCreateTextResolutionMsg{msg}
		return true, err
	case 80: // option.msgfee_set_msg_fee_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(msgfee.SetMsgFeeMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_MsgfeeSetMsgFeeMsg{msg}
		return true, err
	case 81: // option.blueaccount_register_domain_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.RegisterDomainMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_BlueaccountRegisterDomainMsg{msg}
		return true, err
	case 82: // option.blueaccount_transfer_domain_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.TransferDomainMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_BlueaccountTransferDomainMsg{msg}
		return true, err
	case 83: // option.blueaccount_renew_domain_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.RenewDomainMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_BlueaccountRenewDomainMsg{msg}
		return true, err
	case 84: // option.blueaccount_delete_domain_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.DeleteDomainMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_BlueaccountDeleteDomainMsg{msg}
		return true, err
	case 85: // option.blueaccount_register_account_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.RegisterAccountMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_BlueaccountRegisterAccountMsg{msg}
		return true, err
	case 86: // option.blueaccount_transfer_account_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.TransferAccountMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_BlueaccountTransferAccountMsg{msg}
		return true, err
	case 87: // option.blueaccount_replace_account_target_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.ReplaceAccountTargetsMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_BlueaccountReplaceAccountTargetMsg{msg}
		return true, err
	case 88: // option.blueaccount_delete_account_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.DeleteAccountMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_BlueaccountDeleteAccountMsg{msg}
		return true, err
	case 89: // option.blueaccount_update_configuration_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.UpdateConfigurationMsg)
		err := b.DecodeMessage(msg)
		m.Option = &ProposalOptions_BlueaccountUpdateConfigurationMsg{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ProposalOptions_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ProposalOptions)
	// option
	switch x := m.Option.(type) {
	case *ProposalOptions_CashSendMsg:
		s := proto.Size(x.CashSendMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_EscrowReleaseMsg:
		s := proto.Size(x.EscrowReleaseMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_UpdateEscrowPartiesMsg:
		s := proto.Size(x.UpdateEscrowPartiesMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_MultisigUpdateMsg:
		s := proto.Size(x.MultisigUpdateMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_ValidatorsApplyDiffMsg:
		s := proto.Size(x.ValidatorsApplyDiffMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_CurrencyCreateMsg:
		s := proto.Size(x.CurrencyCreateMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_ExecuteProposalBatchMsg:
		s := proto.Size(x.ExecuteProposalBatchMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_UsernameRegisterTokenMsg:
		s := proto.Size(x.UsernameRegisterTokenMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_UsernameTransferTokenMsg:
		s := proto.Size(x.UsernameTransferTokenMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_UsernameChangeTokenTargetsMsg:
		s := proto.Size(x.UsernameChangeTokenTargetsMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_UsernameUpdateConfigurationMsg:
		s := proto.Size(x.UsernameUpdateConfigurationMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_DistributionCreateMsg:
		s := proto.Size(x.DistributionCreateMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_DistributionMsg:
		s := proto.Size(x.DistributionMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_DistributionResetMsg:
		s := proto.Size(x.DistributionResetMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_MigrationUpgradeSchemaMsg:
		s := proto.Size(x.MigrationUpgradeSchemaMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_GovUpdateElectorateMsg:
		s := proto.Size(x.GovUpdateElectorateMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_GovUpdateElectionRuleMsg:
		s := proto.Size(x.GovUpdateElectionRuleMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_GovCreateTextResolutionMsg:
		s := proto.Size(x.GovCreateTextResolutionMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_MsgfeeSetMsgFeeMsg:
		s := proto.Size(x.MsgfeeSetMsgFeeMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_BlueaccountRegisterDomainMsg:
		s := proto.Size(x.BlueaccountRegisterDomainMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_BlueaccountTransferDomainMsg:
		s := proto.Size(x.BlueaccountTransferDomainMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_BlueaccountRenewDomainMsg:
		s := proto.Size(x.BlueaccountRenewDomainMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_BlueaccountDeleteDomainMsg:
		s := proto.Size(x.BlueaccountDeleteDomainMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_BlueaccountRegisterAccountMsg:
		s := proto.Size(x.BlueaccountRegisterAccountMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_BlueaccountTransferAccountMsg:
		s := proto.Size(x.BlueaccountTransferAccountMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_BlueaccountReplaceAccountTargetMsg:
		s := proto.Size(x.BlueaccountReplaceAccountTargetMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_BlueaccountDeleteAccountMsg:
		s := proto.Size(x.BlueaccountDeleteAccountMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProposalOptions_BlueaccountUpdateConfigurationMsg:
		s := proto.Size(x.BlueaccountUpdateConfigurationMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ExecuteProposalBatchMsg struct {
	Messages []ExecuteProposalBatchMsg_Union `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages"`
}

func (m *ExecuteProposalBatchMsg) Reset()         { *m = ExecuteProposalBatchMsg{} }
func (m *ExecuteProposalBatchMsg) String() string { return proto.CompactTextString(m) }
func (*ExecuteProposalBatchMsg) ProtoMessage()    {}
func (*ExecuteProposalBatchMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8efb1d2ea3c411d, []int{3}
}
func (m *ExecuteProposalBatchMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteProposalBatchMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteProposalBatchMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteProposalBatchMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteProposalBatchMsg.Merge(m, src)
}
func (m *ExecuteProposalBatchMsg) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteProposalBatchMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteProposalBatchMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteProposalBatchMsg proto.InternalMessageInfo

func (m *ExecuteProposalBatchMsg) GetMessages() []ExecuteProposalBatchMsg_Union {
	if m != nil {
		return m.Messages
	}
	return nil
}

type ExecuteProposalBatchMsg_Union struct {
	// Types that are valid to be assigned to Sum:
	//	*ExecuteProposalBatchMsg_Union_SendMsg
	//	*ExecuteProposalBatchMsg_Union_EscrowReleaseMsg
	//	*ExecuteProposalBatchMsg_Union_UpdateEscrowPartiesMsg
	//	*ExecuteProposalBatchMsg_Union_MultisigUpdateMsg
	//	*ExecuteProposalBatchMsg_Union_ValidatorsApplyDiffMsg
	//	*ExecuteProposalBatchMsg_Union_UsernameRegisterTokenMsg
	//	*ExecuteProposalBatchMsg_Union_UsernameTransferTokenMsg
	//	*ExecuteProposalBatchMsg_Union_UsernameChangeTokenTargetsMsg
	//	*ExecuteProposalBatchMsg_Union_UsernameUpdateConfigurationMsg
	//	*ExecuteProposalBatchMsg_Union_DistributionCreateMsg
	//	*ExecuteProposalBatchMsg_Union_DistributionMsg
	//	*ExecuteProposalBatchMsg_Union_DistributionResetMsg
	//	*ExecuteProposalBatchMsg_Union_GovUpdateElectorateMsg
	//	*ExecuteProposalBatchMsg_Union_GovUpdateElectionRuleMsg
	//	*ExecuteProposalBatchMsg_Union_GovCreateTextResolutionMsg
	//	*ExecuteProposalBatchMsg_Union_MsgfeeSetMsgFeeMsg
	//	*ExecuteProposalBatchMsg_Union_BlueaccountRegisterDomainMsg
	//	*ExecuteProposalBatchMsg_Union_BlueaccountTransferDomainMsg
	//	*ExecuteProposalBatchMsg_Union_BlueaccountRenewDomainMsg
	//	*ExecuteProposalBatchMsg_Union_BlueaccountDeleteDomainMsg
	//	*ExecuteProposalBatchMsg_Union_BlueaccountRegisterAccountMsg
	//	*ExecuteProposalBatchMsg_Union_BlueaccountTransferAccountMsg
	//	*ExecuteProposalBatchMsg_Union_BlueaccountReplaceAccountTargetMsg
	//	*ExecuteProposalBatchMsg_Union_BlueaccountDeleteAccountMsg
	//	*ExecuteProposalBatchMsg_Union_BlueaccountUpdateConfigurationMsg
	Sum isExecuteProposalBatchMsg_Union_Sum `protobuf_oneof:"sum"`
}

func (m *ExecuteProposalBatchMsg_Union) Reset()         { *m = ExecuteProposalBatchMsg_Union{} }
func (m *ExecuteProposalBatchMsg_Union) String() string { return proto.CompactTextString(m) }
func (*ExecuteProposalBatchMsg_Union) ProtoMessage()    {}
func (*ExecuteProposalBatchMsg_Union) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8efb1d2ea3c411d, []int{3, 0}
}
func (m *ExecuteProposalBatchMsg_Union) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteProposalBatchMsg_Union) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteProposalBatchMsg_Union.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteProposalBatchMsg_Union) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteProposalBatchMsg_Union.Merge(m, src)
}
func (m *ExecuteProposalBatchMsg_Union) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteProposalBatchMsg_Union) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteProposalBatchMsg_Union.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteProposalBatchMsg_Union proto.InternalMessageInfo

type isExecuteProposalBatchMsg_Union_Sum interface {
	isExecuteProposalBatchMsg_Union_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ExecuteProposalBatchMsg_Union_SendMsg struct {
	SendMsg *cash.SendMsg `protobuf:"bytes,51,opt,name=send_msg,json=sendMsg,proto3,oneof"`
}
type ExecuteProposalBatchMsg_Union_EscrowReleaseMsg struct {
	EscrowReleaseMsg *escrow.ReleaseMsg `protobuf:"bytes,53,opt,name=escrow_release_msg,json=escrowReleaseMsg,proto3,oneof"`
}
type ExecuteProposalBatchMsg_Union_UpdateEscrowPartiesMsg struct {
	UpdateEscrowPartiesMsg *escrow.UpdatePartiesMsg `protobuf:"bytes,55,opt,name=update_escrow_parties_msg,json=updateEscrowPartiesMsg,proto3,oneof"`
}
type ExecuteProposalBatchMsg_Union_MultisigUpdateMsg struct {
	MultisigUpdateMsg *multisig.UpdateMsg `protobuf:"bytes,57,opt,name=multisig_update_msg,json=multisigUpdateMsg,proto3,oneof"`
}
type ExecuteProposalBatchMsg_Union_ValidatorsApplyDiffMsg struct {
	ValidatorsApplyDiffMsg *validators.ApplyDiffMsg `protobuf:"bytes,58,opt,name=validators_apply_diff_msg,json=validatorsApplyDiffMsg,proto3,oneof"`
}
type ExecuteProposalBatchMsg_Union_UsernameRegisterTokenMsg struct {
	UsernameRegisterTokenMsg *username.RegisterTokenMsg `protobuf:"bytes,61,opt,name=username_register_token_msg,json=usernameRegisterTokenMsg,proto3,oneof"`
}
type ExecuteProposalBatchMsg_Union_UsernameTransferTokenMsg struct {
	UsernameTransferTokenMsg *username.TransferTokenMsg `protobuf:"bytes,62,opt,name=username_transfer_token_msg,json=usernameTransferTokenMsg,proto3,oneof"`
}
type ExecuteProposalBatchMsg_Union_UsernameChangeTokenTargetsMsg struct {
	UsernameChangeTokenTargetsMsg *username.ChangeTokenTargetsMsg `protobuf:"bytes,63,opt,name=username_change_token_targets_msg,json=usernameChangeTokenTargetsMsg,proto3,oneof"`
}
type ExecuteProposalBatchMsg_Union_UsernameUpdateConfigurationMsg struct {
	UsernameUpdateConfigurationMsg *username.UpdateConfigurationMsg `protobuf:"bytes,64,opt,name=username_update_configuration_msg,json=usernameUpdateConfigurationMsg,proto3,oneof"`
}
type ExecuteProposalBatchMsg_Union_DistributionCreateMsg struct {
	DistributionCreateMsg *distribution.CreateMsg `protobuf:"bytes,66,opt,name=distribution_create_msg,json=distributionCreateMsg,proto3,oneof"`
}
type ExecuteProposalBatchMsg_Union_DistributionMsg struct {
	DistributionMsg *distribution.DistributeMsg `protobuf:"bytes,67,opt,name=distribution_msg,json=distributionMsg,proto3,oneof"`
}
type ExecuteProposalBatchMsg_Union_DistributionResetMsg struct {
	DistributionResetMsg *distribution.ResetMsg `protobuf:"bytes,68,opt,name=distribution_reset_msg,json=distributionResetMsg,proto3,oneof"`
}
type ExecuteProposalBatchMsg_Union_GovUpdateElectorateMsg struct {
	GovUpdateElectorateMsg *gov.UpdateElectorateMsg `protobuf:"bytes,77,opt,name=gov_update_electorate_msg,json=govUpdateElectorateMsg,proto3,oneof"`
}
type ExecuteProposalBatchMsg_Union_GovUpdateElectionRuleMsg struct {
	GovUpdateElectionRuleMsg *gov.UpdateElectionRuleMsg `protobuf:"bytes,78,opt,name=gov_update_election_rule_msg,json=govUpdateElectionRuleMsg,proto3,oneof"`
}
type ExecuteProposalBatchMsg_Union_GovCreateTextResolutionMsg struct {
	GovCreateTextResolutionMsg *gov.CreateTextResolutionMsg `protobuf:"bytes,79,opt,name=gov_create_text_resolution_msg,json=govCreateTextResolutionMsg,proto3,oneof"`
}
type ExecuteProposalBatchMsg_Union_MsgfeeSetMsgFeeMsg struct {
	MsgfeeSetMsgFeeMsg *msgfee.SetMsgFeeMsg `protobuf:"bytes,80,opt,name=msgfee_set_msg_fee_msg,json=msgfeeSetMsgFeeMsg,proto3,oneof"`
}
type ExecuteProposalBatchMsg_Union_BlueaccountRegisterDomainMsg struct {
	BlueaccountRegisterDomainMsg *blueaccount.RegisterDomainMsg `protobuf:"bytes,81,opt,name=blueaccount_register_domain_msg,json=blueaccountRegisterDomainMsg,proto3,oneof"`
}
type ExecuteProposalBatchMsg_Union_BlueaccountTransferDomainMsg struct {
	BlueaccountTransferDomainMsg *blueaccount.TransferDomainMsg `protobuf:"bytes,82,opt,name=blueaccount_transfer_domain_msg,json=blueaccountTransferDomainMsg,proto3,oneof"`
}
type ExecuteProposalBatchMsg_Union_BlueaccountRenewDomainMsg struct {
	BlueaccountRenewDomainMsg *blueaccount.RenewDomainMsg `protobuf:"bytes,83,opt,name=blueaccount_renew_domain_msg,json=blueaccountRenewDomainMsg,proto3,oneof"`
}
type ExecuteProposalBatchMsg_Union_BlueaccountDeleteDomainMsg struct {
	BlueaccountDeleteDomainMsg *blueaccount.DeleteDomainMsg `protobuf:"bytes,84,opt,name=blueaccount_delete_domain_msg,json=blueaccountDeleteDomainMsg,proto3,oneof"`
}
type ExecuteProposalBatchMsg_Union_BlueaccountRegisterAccountMsg struct {
	BlueaccountRegisterAccountMsg *blueaccount.RegisterAccountMsg `protobuf:"bytes,85,opt,name=blueaccount_register_account_msg,json=blueaccountRegisterAccountMsg,proto3,oneof"`
}
type ExecuteProposalBatchMsg_Union_BlueaccountTransferAccountMsg struct {
	BlueaccountTransferAccountMsg *blueaccount.TransferAccountMsg `protobuf:"bytes,86,opt,name=blueaccount_transfer_account_msg,json=blueaccountTransferAccountMsg,proto3,oneof"`
}
type ExecuteProposalBatchMsg_Union_BlueaccountReplaceAccountTargetMsg struct {
	BlueaccountReplaceAccountTargetMsg *blueaccount.ReplaceAccountTargetsMsg `protobuf:"bytes,87,opt,name=blueaccount_replace_account_target_msg,json=blueaccountReplaceAccountTargetMsg,proto3,oneof"`
}
type ExecuteProposalBatchMsg_Union_BlueaccountDeleteAccountMsg struct {
	BlueaccountDeleteAccountMsg *blueaccount.DeleteAccountMsg `protobuf:"bytes,88,opt,name=blueaccount_delete_account_msg,json=blueaccountDeleteAccountMsg,proto3,oneof"`
}
type ExecuteProposalBatchMsg_Union_BlueaccountUpdateConfigurationMsg struct {
	BlueaccountUpdateConfigurationMsg *blueaccount.UpdateConfigurationMsg `protobuf:"bytes,89,opt,name=blueaccount_update_configuration_msg,json=blueaccountUpdateConfigurationMsg,proto3,oneof"`
}

func (*ExecuteProposalBatchMsg_Union_SendMsg) isExecuteProposalBatchMsg_Union_Sum()                  {}
func (*ExecuteProposalBatchMsg_Union_EscrowReleaseMsg) isExecuteProposalBatchMsg_Union_Sum()         {}
func (*ExecuteProposalBatchMsg_Union_UpdateEscrowPartiesMsg) isExecuteProposalBatchMsg_Union_Sum()   {}
func (*ExecuteProposalBatchMsg_Union_MultisigUpdateMsg) isExecuteProposalBatchMsg_Union_Sum()        {}
func (*ExecuteProposalBatchMsg_Union_ValidatorsApplyDiffMsg) isExecuteProposalBatchMsg_Union_Sum()   {}
func (*ExecuteProposalBatchMsg_Union_UsernameRegisterTokenMsg) isExecuteProposalBatchMsg_Union_Sum() {}
func (*ExecuteProposalBatchMsg_Union_UsernameTransferTokenMsg) isExecuteProposalBatchMsg_Union_Sum() {}
func (*ExecuteProposalBatchMsg_Union_UsernameChangeTokenTargetsMsg) isExecuteProposalBatchMsg_Union_Sum() {
}
func (*ExecuteProposalBatchMsg_Union_UsernameUpdateConfigurationMsg) isExecuteProposalBatchMsg_Union_Sum() {
}
func (*ExecuteProposalBatchMsg_Union_DistributionCreateMsg) isExecuteProposalBatchMsg_Union_Sum()    {}
func (*ExecuteProposalBatchMsg_Union_DistributionMsg) isExecuteProposalBatchMsg_Union_Sum()          {}
func (*ExecuteProposalBatchMsg_Union_DistributionResetMsg) isExecuteProposalBatchMsg_Union_Sum()     {}
func (*ExecuteProposalBatchMsg_Union_GovUpdateElectorateMsg) isExecuteProposalBatchMsg_Union_Sum()   {}
func (*ExecuteProposalBatchMsg_Union_GovUpdateElectionRuleMsg) isExecuteProposalBatchMsg_Union_Sum() {}
func (*ExecuteProposalBatchMsg_Union_GovCreateTextResolutionMsg) isExecuteProposalBatchMsg_Union_Sum() {
}
func (*ExecuteProposalBatchMsg_Union_MsgfeeSetMsgFeeMsg) isExecuteProposalBatchMsg_Union_Sum() {}
func (*ExecuteProposalBatchMsg_Union_BlueaccountRegisterDomainMsg) isExecuteProposalBatchMsg_Union_Sum() {
}
func (*ExecuteProposalBatchMsg_Union_BlueaccountTransferDomainMsg) isExecuteProposalBatchMsg_Union_Sum() {
}
func (*ExecuteProposalBatchMsg_Union_BlueaccountRenewDomainMsg) isExecuteProposalBatchMsg_Union_Sum() {
}
func (*ExecuteProposalBatchMsg_Union_BlueaccountDeleteDomainMsg) isExecuteProposalBatchMsg_Union_Sum() {
}
func (*ExecuteProposalBatchMsg_Union_BlueaccountRegisterAccountMsg) isExecuteProposalBatchMsg_Union_Sum() {
}
func (*ExecuteProposalBatchMsg_Union_BlueaccountTransferAccountMsg) isExecuteProposalBatchMsg_Union_Sum() {
}
func (*ExecuteProposalBatchMsg_Union_BlueaccountReplaceAccountTargetMsg) isExecuteProposalBatchMsg_Union_Sum() {
}
func (*ExecuteProposalBatchMsg_Union_BlueaccountDeleteAccountMsg) isExecuteProposalBatchMsg_Union_Sum() {
}
func (*ExecuteProposalBatchMsg_Union_BlueaccountUpdateConfigurationMsg) isExecuteProposalBatchMsg_Union_Sum() {
}

func (m *ExecuteProposalBatchMsg_Union) GetSum() isExecuteProposalBatchMsg_Union_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *ExecuteProposalBatchMsg_Union) GetSendMsg() *cash.SendMsg {
	if x, ok := m.GetSum().(*ExecuteProposalBatchMsg_Union_SendMsg); ok {
		return x.SendMsg
	}
	return nil
}

func (m *ExecuteProposalBatchMsg_Union) GetEscrowReleaseMsg() *escrow.ReleaseMsg {
	if x, ok := m.GetSum().(*ExecuteProposalBatchMsg_Union_EscrowReleaseMsg); ok {
		return x.EscrowReleaseMsg
	}
	return nil
}

func (m *ExecuteProposalBatchMsg_Union) GetUpdateEscrowPartiesMsg() *escrow.UpdatePartiesMsg {
	if x, ok := m.GetSum().(*ExecuteProposalBatchMsg_Union_UpdateEscrowPartiesMsg); ok {
		return x.UpdateEscrowPartiesMsg
	}
	return nil
}

func (m *ExecuteProposalBatchMsg_Union) GetMultisigUpdateMsg() *multisig.UpdateMsg {
	if x, ok := m.GetSum().(*ExecuteProposalBatchMsg_Union_MultisigUpdateMsg); ok {
		return x.MultisigUpdateMsg
	}
	return nil
}

func (m *ExecuteProposalBatchMsg_Union) GetValidatorsApplyDiffMsg() *validators.ApplyDiffMsg {
	if x, ok := m.GetSum().(*ExecuteProposalBatchMsg_Union_ValidatorsApplyDiffMsg); ok {
		return x.ValidatorsApplyDiffMsg
	}
	return nil
}

func (m *ExecuteProposalBatchMsg_Union) GetUsernameRegisterTokenMsg() *username.RegisterTokenMsg {
	if x, ok := m.GetSum().(*ExecuteProposalBatchMsg_Union_UsernameRegisterTokenMsg); ok {
		return x.UsernameRegisterTokenMsg
	}
	return nil
}

func (m *ExecuteProposalBatchMsg_Union) GetUsernameTransferTokenMsg() *username.TransferTokenMsg {
	if x, ok := m.GetSum().(*ExecuteProposalBatchMsg_Union_UsernameTransferTokenMsg); ok {
		return x.UsernameTransferTokenMsg
	}
	return nil
}

func (m *ExecuteProposalBatchMsg_Union) GetUsernameChangeTokenTargetsMsg() *username.ChangeTokenTargetsMsg {
	if x, ok := m.GetSum().(*ExecuteProposalBatchMsg_Union_UsernameChangeTokenTargetsMsg); ok {
		return x.UsernameChangeTokenTargetsMsg
	}
	return nil
}

func (m *ExecuteProposalBatchMsg_Union) GetUsernameUpdateConfigurationMsg() *username.UpdateConfigurationMsg {
	if x, ok := m.GetSum().(*ExecuteProposalBatchMsg_Union_UsernameUpdateConfigurationMsg); ok {
		return x.UsernameUpdateConfigurationMsg
	}
	return nil
}

func (m *ExecuteProposalBatchMsg_Union) GetDistributionCreateMsg() *distribution.CreateMsg {
	if x, ok := m.GetSum().(*ExecuteProposalBatchMsg_Union_DistributionCreateMsg); ok {
		return x.DistributionCreateMsg
	}
	return nil
}

func (m *ExecuteProposalBatchMsg_Union) GetDistributionMsg() *distribution.DistributeMsg {
	if x, ok := m.GetSum().(*ExecuteProposalBatchMsg_Union_DistributionMsg); ok {
		return x.DistributionMsg
	}
	return nil
}

func (m *ExecuteProposalBatchMsg_Union) GetDistributionResetMsg() *distribution.ResetMsg {
	if x, ok := m.GetSum().(*ExecuteProposalBatchMsg_Union_DistributionResetMsg); ok {
		return x.DistributionResetMsg
	}
	return nil
}

func (m *ExecuteProposalBatchMsg_Union) GetGovUpdateElectorateMsg() *gov.UpdateElectorateMsg {
	if x, ok := m.GetSum().(*ExecuteProposalBatchMsg_Union_GovUpdateElectorateMsg); ok {
		return x.GovUpdateElectorateMsg
	}
	return nil
}

func (m *ExecuteProposalBatchMsg_Union) GetGovUpdateElectionRuleMsg() *gov.UpdateElectionRuleMsg {
	if x, ok := m.GetSum().(*ExecuteProposalBatchMsg_Union_GovUpdateElectionRuleMsg); ok {
		return x.GovUpdateElectionRuleMsg
	}
	return nil
}

func (m *ExecuteProposalBatchMsg_Union) GetGovCreateTextResolutionMsg() *gov.CreateTextResolutionMsg {
	if x, ok := m.GetSum().(*ExecuteProposalBatchMsg_Union_GovCreateTextResolutionMsg); ok {
		return x.GovCreateTextResolutionMsg
	}
	return nil
}

func (m *ExecuteProposalBatchMsg_Union) GetMsgfeeSetMsgFeeMsg() *msgfee.SetMsgFeeMsg {
	if x, ok := m.GetSum().(*ExecuteProposalBatchMsg_Union_MsgfeeSetMsgFeeMsg); ok {
		return x.MsgfeeSetMsgFeeMsg
	}
	return nil
}

func (m *ExecuteProposalBatchMsg_Union) GetBlueaccountRegisterDomainMsg() *blueaccount.RegisterDomainMsg {
	if x, ok := m.GetSum().(*ExecuteProposalBatchMsg_Union_BlueaccountRegisterDomainMsg); ok {
		return x.BlueaccountRegisterDomainMsg
	}
	return nil
}

func (m *ExecuteProposalBatchMsg_Union) GetBlueaccountTransferDomainMsg() *blueaccount.TransferDomainMsg {
	if x, ok := m.GetSum().(*ExecuteProposalBatchMsg_Union_BlueaccountTransferDomainMsg); ok {
		return x.BlueaccountTransferDomainMsg
	}
	return nil
}

func (m *ExecuteProposalBatchMsg_Union) GetBlueaccountRenewDomainMsg() *blueaccount.RenewDomainMsg {
	if x, ok := m.GetSum().(*ExecuteProposalBatchMsg_Union_BlueaccountRenewDomainMsg); ok {
		return x.BlueaccountRenewDomainMsg
	}
	return nil
}

func (m *ExecuteProposalBatchMsg_Union) GetBlueaccountDeleteDomainMsg() *blueaccount.DeleteDomainMsg {
	if x, ok := m.GetSum().(*ExecuteProposalBatchMsg_Union_BlueaccountDeleteDomainMsg); ok {
		return x.BlueaccountDeleteDomainMsg
	}
	return nil
}

func (m *ExecuteProposalBatchMsg_Union) GetBlueaccountRegisterAccountMsg() *blueaccount.RegisterAccountMsg {
	if x, ok := m.GetSum().(*ExecuteProposalBatchMsg_Union_BlueaccountRegisterAccountMsg); ok {
		return x.BlueaccountRegisterAccountMsg
	}
	return nil
}

func (m *ExecuteProposalBatchMsg_Union) GetBlueaccountTransferAccountMsg() *blueaccount.TransferAccountMsg {
	if x, ok := m.GetSum().(*ExecuteProposalBatchMsg_Union_BlueaccountTransferAccountMsg); ok {
		return x.BlueaccountTransferAccountMsg
	}
	return nil
}

func (m *ExecuteProposalBatchMsg_Union) GetBlueaccountReplaceAccountTargetMsg() *blueaccount.ReplaceAccountTargetsMsg {
	if x, ok := m.GetSum().(*ExecuteProposalBatchMsg_Union_BlueaccountReplaceAccountTargetMsg); ok {
		return x.BlueaccountReplaceAccountTargetMsg
	}
	return nil
}

func (m *ExecuteProposalBatchMsg_Union) GetBlueaccountDeleteAccountMsg() *blueaccount.DeleteAccountMsg {
	if x, ok := m.GetSum().(*ExecuteProposalBatchMsg_Union_BlueaccountDeleteAccountMsg); ok {
		return x.BlueaccountDeleteAccountMsg
	}
	return nil
}

func (m *ExecuteProposalBatchMsg_Union) GetBlueaccountUpdateConfigurationMsg() *blueaccount.UpdateConfigurationMsg {
	if x, ok := m.GetSum().(*ExecuteProposalBatchMsg_Union_BlueaccountUpdateConfigurationMsg); ok {
		return x.BlueaccountUpdateConfigurationMsg
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExecuteProposalBatchMsg_Union) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExecuteProposalBatchMsg_Union_OneofMarshaler, _ExecuteProposalBatchMsg_Union_OneofUnmarshaler, _ExecuteProposalBatchMsg_Union_OneofSizer, []interface{}{
		(*ExecuteProposalBatchMsg_Union_SendMsg)(nil),
		(*ExecuteProposalBatchMsg_Union_EscrowReleaseMsg)(nil),
		(*ExecuteProposalBatchMsg_Union_UpdateEscrowPartiesMsg)(nil),
		(*ExecuteProposalBatchMsg_Union_MultisigUpdateMsg)(nil),
		(*ExecuteProposalBatchMsg_Union_ValidatorsApplyDiffMsg)(nil),
		(*ExecuteProposalBatchMsg_Union_UsernameRegisterTokenMsg)(nil),
		(*ExecuteProposalBatchMsg_Union_UsernameTransferTokenMsg)(nil),
		(*ExecuteProposalBatchMsg_Union_UsernameChangeTokenTargetsMsg)(nil),
		(*ExecuteProposalBatchMsg_Union_UsernameUpdateConfigurationMsg)(nil),
		(*ExecuteProposalBatchMsg_Union_DistributionCreateMsg)(nil),
		(*ExecuteProposalBatchMsg_Union_DistributionMsg)(nil),
		(*ExecuteProposalBatchMsg_Union_DistributionResetMsg)(nil),
		(*ExecuteProposalBatchMsg_Union_GovUpdateElectorateMsg)(nil),
		(*ExecuteProposalBatchMsg_Union_GovUpdateElectionRuleMsg)(nil),
		(*ExecuteProposalBatchMsg_Union_GovCreateTextResolutionMsg)(nil),
		(*ExecuteProposalBatchMsg_Union_MsgfeeSetMsgFeeMsg)(nil),
		(*ExecuteProposalBatchMsg_Union_BlueaccountRegisterDomainMsg)(nil),
		(*ExecuteProposalBatchMsg_Union_BlueaccountTransferDomainMsg)(nil),
		(*ExecuteProposalBatchMsg_Union_BlueaccountRenewDomainMsg)(nil),
		(*ExecuteProposalBatchMsg_Union_BlueaccountDeleteDomainMsg)(nil),
		(*ExecuteProposalBatchMsg_Union_BlueaccountRegisterAccountMsg)(nil),
		(*ExecuteProposalBatchMsg_Union_BlueaccountTransferAccountMsg)(nil),
		(*ExecuteProposalBatchMsg_Union_BlueaccountReplaceAccountTargetMsg)(nil),
		(*ExecuteProposalBatchMsg_Union_BlueaccountDeleteAccountMsg)(nil),
		(*ExecuteProposalBatchMsg_Union_BlueaccountUpdateConfigurationMsg)(nil),
	}
}

func _ExecuteProposalBatchMsg_Union_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExecuteProposalBatchMsg_Union)
	// sum
	switch x := m.Sum.(type) {
	case *ExecuteProposalBatchMsg_Union_SendMsg:
		_ = b.EncodeVarint(51<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SendMsg); err != nil {
			return err
		}
	case *ExecuteProposalBatchMsg_Union_EscrowReleaseMsg:
		_ = b.EncodeVarint(53<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EscrowReleaseMsg); err != nil {
			return err
		}
	case *ExecuteProposalBatchMsg_Union_UpdateEscrowPartiesMsg:
		_ = b.EncodeVarint(55<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateEscrowPartiesMsg); err != nil {
			return err
		}
	case *ExecuteProposalBatchMsg_Union_MultisigUpdateMsg:
		_ = b.EncodeVarint(57<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MultisigUpdateMsg); err != nil {
			return err
		}
	case *ExecuteProposalBatchMsg_Union_ValidatorsApplyDiffMsg:
		_ = b.EncodeVarint(58<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ValidatorsApplyDiffMsg); err != nil {
			return err
		}
	case *ExecuteProposalBatchMsg_Union_UsernameRegisterTokenMsg:
		_ = b.EncodeVarint(61<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UsernameRegisterTokenMsg); err != nil {
			return err
		}
	case *ExecuteProposalBatchMsg_Union_UsernameTransferTokenMsg:
		_ = b.EncodeVarint(62<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UsernameTransferTokenMsg); err != nil {
			return err
		}
	case *ExecuteProposalBatchMsg_Union_UsernameChangeTokenTargetsMsg:
		_ = b.EncodeVarint(63<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UsernameChangeTokenTargetsMsg); err != nil {
			return err
		}
	case *ExecuteProposalBatchMsg_Union_UsernameUpdateConfigurationMsg:
		_ = b.EncodeVarint(64<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UsernameUpdateConfigurationMsg); err != nil {
			return err
		}
	case *ExecuteProposalBatchMsg_Union_DistributionCreateMsg:
		_ = b.EncodeVarint(66<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DistributionCreateMsg); err != nil {
			return err
		}
	case *ExecuteProposalBatchMsg_Union_DistributionMsg:
		_ = b.EncodeVarint(67<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DistributionMsg); err != nil {
			return err
		}
	case *ExecuteProposalBatchMsg_Union_DistributionResetMsg:
		_ = b.EncodeVarint(68<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DistributionResetMsg); err != nil {
			return err
		}
	case *ExecuteProposalBatchMsg_Union_GovUpdateElectorateMsg:
		_ = b.EncodeVarint(77<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GovUpdateElectorateMsg); err != nil {
			return err
		}
	case *ExecuteProposalBatchMsg_Union_GovUpdateElectionRuleMsg:
		_ = b.EncodeVarint(78<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GovUpdateElectionRuleMsg); err != nil {
			return err
		}
	case *ExecuteProposalBatchMsg_Union_GovCreateTextResolutionMsg:
		_ = b.EncodeVarint(79<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GovCreateTextResolutionMsg); err != nil {
			return err
		}
	case *ExecuteProposalBatchMsg_Union_MsgfeeSetMsgFeeMsg:
		_ = b.EncodeVarint(80<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MsgfeeSetMsgFeeMsg); err != nil {
			return err
		}
	case *ExecuteProposalBatchMsg_Union_BlueaccountRegisterDomainMsg:
		_ = b.EncodeVarint(81<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountRegisterDomainMsg); err != nil {
			return err
		}
	case *ExecuteProposalBatchMsg_Union_BlueaccountTransferDomainMsg:
		_ = b.EncodeVarint(82<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountTransferDomainMsg); err != nil {
			return err
		}
	case *ExecuteProposalBatchMsg_Union_BlueaccountRenewDomainMsg:
		_ = b.EncodeVarint(83<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountRenewDomainMsg); err != nil {
			return err
		}
	case *ExecuteProposalBatchMsg_Union_BlueaccountDeleteDomainMsg:
		_ = b.EncodeVarint(84<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountDeleteDomainMsg); err != nil {
			return err
		}
	case *ExecuteProposalBatchMsg_Union_BlueaccountRegisterAccountMsg:
		_ = b.EncodeVarint(85<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountRegisterAccountMsg); err != nil {
			return err
		}
	case *ExecuteProposalBatchMsg_Union_BlueaccountTransferAccountMsg:
		_ = b.EncodeVarint(86<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountTransferAccountMsg); err != nil {
			return err
		}
	case *ExecuteProposalBatchMsg_Union_BlueaccountReplaceAccountTargetMsg:
		_ = b.EncodeVarint(87<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountReplaceAccountTargetMsg); err != nil {
			return err
		}
	case *ExecuteProposalBatchMsg_Union_BlueaccountDeleteAccountMsg:
		_ = b.EncodeVarint(88<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountDeleteAccountMsg); err != nil {
			return err
		}
	case *ExecuteProposalBatchMsg_Union_BlueaccountUpdateConfigurationMsg:
		_ = b.EncodeVarint(89<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueaccountUpdateConfigurationMsg); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ExecuteProposalBatchMsg_Union.Sum has unexpected type %T", x)
	}
	return nil
}

func _ExecuteProposalBatchMsg_Union_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExecuteProposalBatchMsg_Union)
	switch tag {
	case 51: // sum.send_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(cash.SendMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteProposalBatchMsg_Union_SendMsg{msg}
		return true, err
	case 53: // sum.escrow_release_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.ReleaseMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteProposalBatchMsg_Union_EscrowReleaseMsg{msg}
		return true, err
	case 55: // sum.update_escrow_parties_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.UpdatePartiesMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteProposalBatchMsg_Union_UpdateEscrowPartiesMsg{msg}
		return true, err
	case 57: // sum.multisig_update_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(multisig.UpdateMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteProposalBatchMsg_Union_MultisigUpdateMsg{msg}
		return true, err
	case 58: // sum.validators_apply_diff_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(validators.ApplyDiffMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteProposalBatchMsg_Union_ValidatorsApplyDiffMsg{msg}
		return true, err
	case 61: // sum.username_register_token_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(username.RegisterTokenMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteProposalBatchMsg_Union_UsernameRegisterTokenMsg{msg}
		return true, err
	case 62: // sum.username_transfer_token_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(username.TransferTokenMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteProposalBatchMsg_Union_UsernameTransferTokenMsg{msg}
		return true, err
	case 63: // sum.username_change_token_targets_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(username.ChangeTokenTargetsMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteProposalBatchMsg_Union_UsernameChangeTokenTargetsMsg{msg}
		return true, err
	case 64: // sum.username_update_configuration_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(username.UpdateConfigurationMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteProposalBatchMsg_Union_UsernameUpdateConfigurationMsg{msg}
		return true, err
	case 66: // sum.distribution_create_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(distribution.CreateMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteProposalBatchMsg_Union_DistributionCreateMsg{msg}
		return true, err
	case 67: // sum.distribution_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(distribution.DistributeMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteProposalBatchMsg_Union_DistributionMsg{msg}
		return true, err
	case 68: // sum.distribution_reset_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(distribution.ResetMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteProposalBatchMsg_Union_DistributionResetMsg{msg}
		return true, err
	case 77: // sum.gov_update_electorate_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gov.UpdateElectorateMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteProposalBatchMsg_Union_GovUpdateElectorateMsg{msg}
		return true, err
	case 78: // sum.gov_update_election_rule_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gov.UpdateElectionRuleMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteProposalBatchMsg_Union_GovUpdateElectionRuleMsg{msg}
		return true, err
	case 79: // sum.gov_create_text_resolution_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gov.CreateTextResolutionMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteProposalBatchMsg_Union_GovCreateTextResolutionMsg{msg}
		return true, err
	case 80: // sum.msgfee_set_msg_fee_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(msgfee.SetMsgFeeMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteProposalBatchMsg_Union_MsgfeeSetMsgFeeMsg{msg}
		return true, err
	case 81: // sum.blueaccount_register_domain_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.RegisterDomainMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteProposalBatchMsg_Union_BlueaccountRegisterDomainMsg{msg}
		return true, err
	case 82: // sum.blueaccount_transfer_domain_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.TransferDomainMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteProposalBatchMsg_Union_BlueaccountTransferDomainMsg{msg}
		return true, err
	case 83: // sum.blueaccount_renew_domain_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.RenewDomainMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteProposalBatchMsg_Union_BlueaccountRenewDomainMsg{msg}
		return true, err
	case 84: // sum.blueaccount_delete_domain_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.DeleteDomainMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteProposalBatchMsg_Union_BlueaccountDeleteDomainMsg{msg}
		return true, err
	case 85: // sum.blueaccount_register_account_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.RegisterAccountMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteProposalBatchMsg_Union_BlueaccountRegisterAccountMsg{msg}
		return true, err
	case 86: // sum.blueaccount_transfer_account_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.TransferAccountMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteProposalBatchMsg_Union_BlueaccountTransferAccountMsg{msg}
		return true, err
	case 87: // sum.blueaccount_replace_account_target_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.ReplaceAccountTargetsMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteProposalBatchMsg_Union_BlueaccountReplaceAccountTargetMsg{msg}
		return true, err
	case 88: // sum.blueaccount_delete_account_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.DeleteAccountMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteProposalBatchMsg_Union_BlueaccountDeleteAccountMsg{msg}
		return true, err
	case 89: // sum.blueaccount_update_configuration_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blueaccount.UpdateConfigurationMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &ExecuteProposalBatchMsg_Union_BlueaccountUpdateConfigurationMsg{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ExecuteProposalBatchMsg_Union_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExecuteProposalBatchMsg_Union)
	// sum
	switch x := m.Sum.(type) {
	case *ExecuteProposalBatchMsg_Union_SendMsg:
		s := proto.Size(x.SendMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteProposalBatchMsg_Union_EscrowReleaseMsg:
		s := proto.Size(x.EscrowReleaseMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteProposalBatchMsg_Union_UpdateEscrowPartiesMsg:
		s := proto.Size(x.UpdateEscrowPartiesMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteProposalBatchMsg_Union_MultisigUpdateMsg:
		s := proto.Size(x.MultisigUpdateMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteProposalBatchMsg_Union_ValidatorsApplyDiffMsg:
		s := proto.Size(x.ValidatorsApplyDiffMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteProposalBatchMsg_Union_UsernameRegisterTokenMsg:
		s := proto.Size(x.UsernameRegisterTokenMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteProposalBatchMsg_Union_UsernameTransferTokenMsg:
		s := proto.Size(x.UsernameTransferTokenMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteProposalBatchMsg_Union_UsernameChangeTokenTargetsMsg:
		s := proto.Size(x.UsernameChangeTokenTargetsMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteProposalBatchMsg_Union_UsernameUpdateConfigurationMsg:
		s := proto.Size(x.UsernameUpdateConfigurationMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteProposalBatchMsg_Union_DistributionCreateMsg:
		s := proto.Size(x.DistributionCreateMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteProposalBatchMsg_Union_DistributionMsg:
		s := proto.Size(x.DistributionMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteProposalBatchMsg_Union_DistributionResetMsg:
		s := proto.Size(x.DistributionResetMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteProposalBatchMsg_Union_GovUpdateElectorateMsg:
		s := proto.Size(x.GovUpdateElectorateMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteProposalBatchMsg_Union_GovUpdateElectionRuleMsg:
		s := proto.Size(x.GovUpdateElectionRuleMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteProposalBatchMsg_Union_GovCreateTextResolutionMsg:
		s := proto.Size(x.GovCreateTextResolutionMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteProposalBatchMsg_Union_MsgfeeSetMsgFeeMsg:
		s := proto.Size(x.MsgfeeSetMsgFeeMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteProposalBatchMsg_Union_BlueaccountRegisterDomainMsg:
		s := proto.Size(x.BlueaccountRegisterDomainMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteProposalBatchMsg_Union_BlueaccountTransferDomainMsg:
		s := proto.Size(x.BlueaccountTransferDomainMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteProposalBatchMsg_Union_BlueaccountRenewDomainMsg:
		s := proto.Size(x.BlueaccountRenewDomainMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteProposalBatchMsg_Union_BlueaccountDeleteDomainMsg:
		s := proto.Size(x.BlueaccountDeleteDomainMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteProposalBatchMsg_Union_BlueaccountRegisterAccountMsg:
		s := proto.Size(x.BlueaccountRegisterAccountMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteProposalBatchMsg_Union_BlueaccountTransferAccountMsg:
		s := proto.Size(x.BlueaccountTransferAccountMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteProposalBatchMsg_Union_BlueaccountReplaceAccountTargetMsg:
		s := proto.Size(x.BlueaccountReplaceAccountTargetMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteProposalBatchMsg_Union_BlueaccountDeleteAccountMsg:
		s := proto.Size(x.BlueaccountDeleteAccountMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteProposalBatchMsg_Union_BlueaccountUpdateConfigurationMsg:
		s := proto.Size(x.BlueaccountUpdateConfigurationMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// CronTask is a format used by the CronMarshaler to marshal and unmarshal cron
// task.
//
// When there is a gap in message sequence numbers - that most likely means some
// old fields got deprecated. This is done to maintain binary compatibility.
type CronTask struct {
	// Authenticators contains a list of conditions that authenticate execution
	// of this task.
	// This is one of the main differences between the CronTask and Tx entities.
	// CronTask is created interanlly and does not have to be signed. Because we
	// use the same handlers as for the Tx to process a cron task, we must
	// provide authentication method. This attribute contains all authentication
	// conditions required for execution, that will be inserted into the context.
	Authenticators []github_com_iov_one_weave.Condition `protobuf:"bytes,1,rep,name=authenticators,proto3,casttype=github.com/iov-one/weave.Condition" json:"authenticators,omitempty"`
	// Use the same indexes for the messages as the Tx message.
	//
	// Types that are valid to be assigned to Sum:
	//	*CronTask_EscrowReleaseMsg
	//	*CronTask_EscrowReturnMsg
	//	*CronTask_DistributionDistributeMsg
	//	*CronTask_AswapReleaseMsg
	//	*CronTask_GovTallyMsg
	Sum isCronTask_Sum `protobuf_oneof:"sum"`
}

func (m *CronTask) Reset()         { *m = CronTask{} }
func (m *CronTask) String() string { return proto.CompactTextString(m) }
func (*CronTask) ProtoMessage()    {}
func (*CronTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8efb1d2ea3c411d, []int{4}
}
func (m *CronTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CronTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CronTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CronTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CronTask.Merge(m, src)
}
func (m *CronTask) XXX_Size() int {
	return m.Size()
}
func (m *CronTask) XXX_DiscardUnknown() {
	xxx_messageInfo_CronTask.DiscardUnknown(m)
}

var xxx_messageInfo_CronTask proto.InternalMessageInfo

type isCronTask_Sum interface {
	isCronTask_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CronTask_EscrowReleaseMsg struct {
	EscrowReleaseMsg *escrow.ReleaseMsg `protobuf:"bytes,53,opt,name=escrow_release_msg,json=escrowReleaseMsg,proto3,oneof"`
}
type CronTask_EscrowReturnMsg struct {
	EscrowReturnMsg *escrow.ReturnMsg `protobuf:"bytes,54,opt,name=escrow_return_msg,json=escrowReturnMsg,proto3,oneof"`
}
type CronTask_DistributionDistributeMsg struct {
	DistributionDistributeMsg *distribution.DistributeMsg `protobuf:"bytes,67,opt,name=distribution_distribute_msg,json=distributionDistributeMsg,proto3,oneof"`
}
type CronTask_AswapReleaseMsg struct {
	AswapReleaseMsg *aswap.ReleaseMsg `protobuf:"bytes,71,opt,name=aswap_release_msg,json=aswapReleaseMsg,proto3,oneof"`
}
type CronTask_GovTallyMsg struct {
	GovTallyMsg *gov.TallyMsg `protobuf:"bytes,76,opt,name=gov_tally_msg,json=govTallyMsg,proto3,oneof"`
}

func (*CronTask_EscrowReleaseMsg) isCronTask_Sum()          {}
func (*CronTask_EscrowReturnMsg) isCronTask_Sum()           {}
func (*CronTask_DistributionDistributeMsg) isCronTask_Sum() {}
func (*CronTask_AswapReleaseMsg) isCronTask_Sum()           {}
func (*CronTask_GovTallyMsg) isCronTask_Sum()               {}

func (m *CronTask) GetSum() isCronTask_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *CronTask) GetAuthenticators() []github_com_iov_one_weave.Condition {
	if m != nil {
		return m.Authenticators
	}
	return nil
}

func (m *CronTask) GetEscrowReleaseMsg() *escrow.ReleaseMsg {
	if x, ok := m.GetSum().(*CronTask_EscrowReleaseMsg); ok {
		return x.EscrowReleaseMsg
	}
	return nil
}

func (m *CronTask) GetEscrowReturnMsg() *escrow.ReturnMsg {
	if x, ok := m.GetSum().(*CronTask_EscrowReturnMsg); ok {
		return x.EscrowReturnMsg
	}
	return nil
}

func (m *CronTask) GetDistributionDistributeMsg() *distribution.DistributeMsg {
	if x, ok := m.GetSum().(*CronTask_DistributionDistributeMsg); ok {
		return x.DistributionDistributeMsg
	}
	return nil
}

func (m *CronTask) GetAswapReleaseMsg() *aswap.ReleaseMsg {
	if x, ok := m.GetSum().(*CronTask_AswapReleaseMsg); ok {
		return x.AswapReleaseMsg
	}
	return nil
}

func (m *CronTask) GetGovTallyMsg() *gov.TallyMsg {
	if x, ok := m.GetSum().(*CronTask_GovTallyMsg); ok {
		return x.GovTallyMsg
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CronTask) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CronTask_OneofMarshaler, _CronTask_OneofUnmarshaler, _CronTask_OneofSizer, []interface{}{
		(*CronTask_EscrowReleaseMsg)(nil),
		(*CronTask_EscrowReturnMsg)(nil),
		(*CronTask_DistributionDistributeMsg)(nil),
		(*CronTask_AswapReleaseMsg)(nil),
		(*CronTask_GovTallyMsg)(nil),
	}
}

func _CronTask_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CronTask)
	// sum
	switch x := m.Sum.(type) {
	case *CronTask_EscrowReleaseMsg:
		_ = b.EncodeVarint(53<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EscrowReleaseMsg); err != nil {
			return err
		}
	case *CronTask_EscrowReturnMsg:
		_ = b.EncodeVarint(54<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EscrowReturnMsg); err != nil {
			return err
		}
	case *CronTask_DistributionDistributeMsg:
		_ = b.EncodeVarint(67<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DistributionDistributeMsg); err != nil {
			return err
		}
	case *CronTask_AswapReleaseMsg:
		_ = b.EncodeVarint(71<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AswapReleaseMsg); err != nil {
			return err
		}
	case *CronTask_GovTallyMsg:
		_ = b.EncodeVarint(76<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GovTallyMsg); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CronTask.Sum has unexpected type %T", x)
	}
	return nil
}

func _CronTask_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CronTask)
	switch tag {
	case 53: // sum.escrow_release_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.ReleaseMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &CronTask_EscrowReleaseMsg{msg}
		return true, err
	case 54: // sum.escrow_return_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.ReturnMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &CronTask_EscrowReturnMsg{msg}
		return true, err
	case 67: // sum.distribution_distribute_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(distribution.DistributeMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &CronTask_DistributionDistributeMsg{msg}
		return true, err
	case 71: // sum.aswap_release_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(aswap.ReleaseMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &CronTask_AswapReleaseMsg{msg}
		return true, err
	case 76: // sum.gov_tally_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gov.TallyMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &CronTask_GovTallyMsg{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CronTask_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CronTask)
	// sum
	switch x := m.Sum.(type) {
	case *CronTask_EscrowReleaseMsg:
		s := proto.Size(x.EscrowReleaseMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CronTask_EscrowReturnMsg:
		s := proto.Size(x.EscrowReturnMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CronTask_DistributionDistributeMsg:
		s := proto.Size(x.DistributionDistributeMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CronTask_AswapReleaseMsg:
		s := proto.Size(x.AswapReleaseMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CronTask_GovTallyMsg:
		s := proto.Size(x.GovTallyMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Tx)(nil), "bnsd.Tx")
	proto.RegisterType((*ExecuteBatchMsg)(nil), "bnsd.ExecuteBatchMsg")
	proto.RegisterType((*ExecuteBatchMsg_Union)(nil), "bnsd.ExecuteBatchMsg.Union")
	proto.RegisterType((*ProposalOptions)(nil), "bnsd.ProposalOptions")
	proto.RegisterType((*ExecuteProposalBatchMsg)(nil), "bnsd.ExecuteProposalBatchMsg")
	proto.RegisterType((*ExecuteProposalBatchMsg_Union)(nil), "bnsd.ExecuteProposalBatchMsg.Union")
	proto.RegisterType((*CronTask)(nil), "bnsd.CronTask")
}

func init() { proto.RegisterFile("cmd/bnsd/app/codec.proto", fileDescriptor_a8efb1d2ea3c411d) }

var fileDescriptor_a8efb1d2ea3c411d = []byte{
	// 1621 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0x5b, 0x6f, 0xd4, 0x46,
	0x1b, 0x4e, 0x48, 0xe0, 0x8b, 0x86, 0x40, 0x92, 0x49, 0x48, 0x36, 0x9b, 0x64, 0x13, 0xc2, 0xf7,
	0x21, 0xf4, 0x49, 0xb5, 0x2b, 0xd2, 0x73, 0xa1, 0x94, 0xdd, 0x84, 0x02, 0x2d, 0xa7, 0xcd, 0x86,
	0xb6, 0x2a, 0xed, 0x6a, 0xd6, 0x9e, 0x75, 0x5c, 0xbc, 0x9e, 0x95, 0xc7, 0xde, 0x2c, 0xea, 0x7d,
	0xaf, 0xfb, 0x1f, 0xfa, 0x33, 0x2a, 0xf5, 0x9a, 0x4b, 0x2e, 0x7b, 0x85, 0x2a, 0xf8, 0x0f, 0xbd,
	0xe8, 0x45, 0x55, 0xcd, 0xc9, 0x9e, 0xf1, 0x3a, 0x85, 0x96, 0x4a, 0xb4, 0xc8, 0x77, 0xeb, 0xf7,
	0x79, 0xe7, 0x79, 0xe6, 0xe4, 0x77, 0x1e, 0x4f, 0x02, 0x2a, 0x4e, 0xcf, 0xb5, 0x3b, 0x21, 0x75,
	0x6d, 0xd4, 0xef, 0xdb, 0x0e, 0x71, 0xb1, 0x63, 0xf5, 0x23, 0x12, 0x13, 0x38, 0xc9, 0xa2, 0xd5,
	0xcd, 0x14, 0x1f, 0xda, 0x9d, 0x20, 0xc1, 0xc8, 0x71, 0x48, 0x12, 0xc6, 0x7a, 0x66, 0x75, 0x5d,
	0xcb, 0x49, 0x28, 0x8e, 0x42, 0xd4, 0xc3, 0x46, 0xc2, 0x82, 0x47, 0x3c, 0xc2, 0x7f, 0xda, 0xec,
	0x97, 0x8c, 0x9e, 0xea, 0xf9, 0x5e, 0x84, 0x62, 0x9f, 0x84, 0x46, 0xf2, 0xfc, 0xd0, 0x46, 0xf4,
	0x00, 0x19, 0x9d, 0xa9, 0xc2, 0xa1, 0xed, 0x20, 0xba, 0x6f, 0xc4, 0x16, 0x87, 0xb6, 0x93, 0x44,
	0x11, 0x0e, 0x9d, 0x07, 0x46, 0xbc, 0x3a, 0xb4, 0x5d, 0x9f, 0xc6, 0x91, 0xdf, 0x49, 0x46, 0xc8,
	0x17, 0x86, 0x36, 0xa6, 0x4e, 0x44, 0x0e, 0x8c, 0xe8, 0xdc, 0xd0, 0xf6, 0xc8, 0x20, 0x9f, 0xd8,
	0xa3, 0x5e, 0x17, 0xe3, 0xbc, 0x64, 0x2f, 0x09, 0x62, 0x9f, 0xfa, 0x5e, 0xbe, 0x7b, 0xd4, 0xf7,
	0xa8, 0x11, 0xab, 0x0c, 0xed, 0x01, 0x0a, 0x7c, 0x17, 0xc5, 0x24, 0x32, 0x90, 0xcd, 0xdf, 0x2a,
	0xe0, 0x48, 0x6b, 0x08, 0x4f, 0x83, 0xc9, 0x2e, 0xc6, 0xb4, 0x32, 0xbe, 0x31, 0x7e, 0xee, 0xf8,
	0xf9, 0x13, 0x16, 0x1b, 0xa0, 0x75, 0x05, 0xe3, 0x6b, 0x61, 0x97, 0x34, 0x39, 0x04, 0xcf, 0x03,
	0x40, 0x7d, 0x2f, 0x44, 0x71, 0x12, 0x61, 0x5a, 0x39, 0xb2, 0x31, 0x71, 0xee, 0xf8, 0x79, 0x68,
	0x31, 0x29, 0x6b, 0x37, 0x76, 0x77, 0x15, 0xd4, 0xd4, 0xb2, 0x60, 0x15, 0x4c, 0xa9, 0x3e, 0x56,
	0x26, 0x37, 0x26, 0xce, 0x4d, 0x37, 0xd3, 0x67, 0xb8, 0x05, 0x4e, 0x30, 0x95, 0x36, 0xc5, 0xa1,
	0xdb, 0xee, 0x51, 0xaf, 0xb2, 0xa5, 0x6b, 0xef, 0xe2, 0xd0, 0xbd, 0x41, 0xbd, 0xab, 0x63, 0xcd,
	0xe3, 0xec, 0x59, 0x3e, 0xc2, 0x4b, 0x60, 0x4e, 0xcc, 0x59, 0xdb, 0x89, 0x30, 0x8a, 0x31, 0x6f,
	0xf8, 0x06, 0x6f, 0x38, 0x67, 0x09, 0xc4, 0x6a, 0x70, 0x44, 0x34, 0x9e, 0x11, 0xb1, 0x34, 0x04,
	0xeb, 0x00, 0x4a, 0x82, 0x08, 0x07, 0x18, 0x51, 0xc1, 0xf0, 0x26, 0x67, 0x80, 0x8a, 0xa1, 0x29,
	0x20, 0x41, 0x31, 0x2b, 0x82, 0x59, 0x4c, 0xeb, 0x44, 0x84, 0xe3, 0x24, 0x0a, 0x39, 0xc5, 0x5b,
	0x66, 0x27, 0x9a, 0x1c, 0x31, 0x3a, 0x91, 0x86, 0xe0, 0x1e, 0x58, 0x96, 0x04, 0x49, 0xdf, 0x65,
	0xa3, 0xe8, 0xa3, 0x28, 0xf6, 0x31, 0xe5, 0x44, 0x6f, 0x73, 0xa2, 0x8a, 0x22, 0xda, 0xe3, 0x19,
	0xb7, 0x45, 0x82, 0xe0, 0x5b, 0x14, 0x50, 0x1e, 0x81, 0x3b, 0x60, 0x5e, 0xcd, 0xae, 0x3e, 0x3d,
	0xef, 0x70, 0xc2, 0x79, 0x4b, 0x61, 0xc6, 0x04, 0xcd, 0xa9, 0x68, 0x36, 0x45, 0x3a, 0x8d, 0xec,
	0x1f, 0xa3, 0x79, 0x37, 0x4f, 0x23, 0xf4, 0x73, 0x34, 0x69, 0x90, 0x0d, 0x32, 0xdb, 0x73, 0x6d,
	0xd4, 0xef, 0x07, 0x0f, 0xda, 0xae, 0xdf, 0xed, 0x72, 0xb2, 0xf7, 0xe4, 0x20, 0xb3, 0x0c, 0xeb,
	0x32, 0xcb, 0xd8, 0xf6, 0xbb, 0x5d, 0x39, 0xc8, 0x0c, 0xd2, 0x11, 0xd6, 0x3b, 0xf5, 0xa6, 0xe9,
	0x83, 0x7c, 0x5f, 0xf6, 0x4e, 0x61, 0xe6, 0x20, 0x55, 0x34, 0x1b, 0x64, 0x03, 0xcc, 0xe1, 0x21,
	0x76, 0x92, 0x18, 0xb7, 0x3b, 0x28, 0x76, 0xf6, 0x39, 0xc9, 0x05, 0x4e, 0x72, 0xca, 0x62, 0xf5,
	0xc3, 0xda, 0x11, 0x70, 0x9d, 0xa1, 0x6a, 0x1d, 0xcd, 0x10, 0xfc, 0x02, 0xac, 0xa8, 0x1a, 0xd3,
	0x8e, 0xb0, 0xe7, 0xd3, 0x18, 0x47, 0xed, 0x98, 0xdc, 0xc7, 0x62, 0x4b, 0x5c, 0xe4, 0x74, 0x55,
	0x4b, 0xe5, 0x58, 0x4d, 0x99, 0xd3, 0x62, 0x29, 0x82, 0xb3, 0xa2, 0xc0, 0x3c, 0x66, 0x90, 0xc7,
	0x11, 0x0a, 0x69, 0xd7, 0x20, 0xff, 0x20, 0x4f, 0xde, 0x92, 0x39, 0x45, 0xe4, 0x79, 0x0c, 0xde,
	0x07, 0xa7, 0x53, 0x72, 0x67, 0x1f, 0x85, 0x1e, 0x96, 0xd4, 0x31, 0x8a, 0x3c, 0x1c, 0x8b, 0x9d,
	0x78, 0x89, 0x4b, 0xac, 0x67, 0x12, 0x0d, 0x9e, 0xc9, 0x49, 0x5a, 0x22, 0x4f, 0xe8, 0xac, 0xa9,
	0x8c, 0xc2, 0x04, 0xd8, 0xd3, 0xc4, 0xe4, 0x86, 0x72, 0x48, 0xd8, 0xf5, 0xbd, 0x44, 0x94, 0x5c,
	0x2e, 0xf6, 0x21, 0x17, 0xdb, 0xc8, 0xc4, 0xc4, 0x4e, 0x6a, 0xe8, 0x89, 0x42, 0xad, 0xa6, 0x52,
	0x8a, 0x33, 0xe0, 0x1d, 0xb0, 0xa4, 0xd7, 0x5c, 0x7d, 0x97, 0xd4, 0xb9, 0xc8, 0x92, 0xa5, 0xe3,
	0xc6, 0x4e, 0x39, 0xa5, 0x23, 0xd9, 0x6e, 0xb9, 0x0a, 0x66, 0x0d, 0x4a, 0xc6, 0xd5, 0xe0, 0x5c,
	0x2b, 0x26, 0xd7, 0xb6, 0x7a, 0x50, 0xf5, 0x47, 0x47, 0x19, 0xd3, 0x4d, 0xb0, 0x68, 0x30, 0x45,
	0x98, 0xe2, 0x98, 0xf3, 0x6d, 0x73, 0xbe, 0x45, 0x93, 0xaf, 0xc9, 0x60, 0x41, 0xb5, 0xa0, 0x03,
	0x2a, 0x0e, 0xbf, 0x02, 0xab, 0xe9, 0xd1, 0xd5, 0x4e, 0xfa, 0x5e, 0x84, 0x5c, 0xdc, 0xa6, 0xce,
	0x3e, 0xee, 0x21, 0xce, 0xba, 0x23, 0x7b, 0x99, 0x26, 0x59, 0x7b, 0x22, 0x69, 0x97, 0xe7, 0x08,
	0xea, 0xe5, 0x14, 0xcd, 0x83, 0xf0, 0x02, 0x98, 0xe5, 0x27, 0xa0, 0x3e, 0x8b, 0x57, 0x38, 0xe7,
	0xac, 0xc5, 0x01, 0x63, 0xfa, 0x4e, 0xf2, 0x50, 0x36, 0x6f, 0x97, 0xc0, 0x9c, 0x68, 0xad, 0x17,
	0xdb, 0x8f, 0x64, 0xa5, 0x14, 0xcd, 0x8d, 0x5a, 0x3b, 0xc3, 0x63, 0x5a, 0xa9, 0x4d, 0xe5, 0xb5,
	0x4a, 0x7b, 0xd5, 0x90, 0xd7, 0x0b, 0xed, 0x49, 0xd9, 0x5c, 0xd5, 0xd9, 0x5b, 0x60, 0xc9, 0x23,
	0x03, 0xd5, 0xf5, 0x7e, 0x44, 0xfa, 0x84, 0xa2, 0x80, 0x93, 0x5c, 0x93, 0xb3, 0xed, 0x91, 0x81,
	0x1c, 0xc1, 0x6d, 0x09, 0xcb, 0xd9, 0xf6, 0xc8, 0x60, 0x24, 0xae, 0x08, 0x5d, 0x1c, 0xe0, 0x3c,
	0xe1, 0x75, 0x8d, 0x70, 0x9b, 0xe3, 0xa3, 0x84, 0x23, 0x71, 0xf8, 0x3a, 0x98, 0x66, 0x84, 0x03,
	0x22, 0xa7, 0xf6, 0x63, 0xce, 0x32, 0xcd, 0x59, 0xee, 0x12, 0x35, 0xad, 0xc0, 0x23, 0x03, 0xf9,
	0xc4, 0xca, 0x2a, 0x6b, 0x21, 0xdf, 0x23, 0x1c, 0x60, 0x27, 0x26, 0x91, 0x5a, 0x99, 0x1b, 0xb2,
	0xac, 0xb2, 0xe6, 0xe2, 0xed, 0xd8, 0x49, 0x13, 0x64, 0x59, 0xf5, 0xc8, 0xa0, 0x00, 0x81, 0xf7,
	0xc0, 0x6a, 0x9e, 0x96, 0x6f, 0xcf, 0x24, 0x10, 0xcc, 0x37, 0x65, 0xb9, 0xc9, 0x31, 0xb3, 0xad,
	0x98, 0x04, 0x92, 0xbb, 0x62, 0x72, 0x67, 0x18, 0xbc, 0x0e, 0x16, 0x85, 0x83, 0x69, 0xcb, 0xdd,
	0xde, 0x66, 0xbf, 0x19, 0xef, 0x6d, 0xce, 0xbb, 0x60, 0x09, 0xd8, 0xda, 0xe5, 0xbb, 0xfa, 0x0a,
	0x96, 0x8c, 0x50, 0x84, 0xf5, 0x28, 0xf4, 0xc0, 0xba, 0x66, 0xfe, 0xb2, 0xba, 0xeb, 0x92, 0x1e,
	0xf2, 0xc5, 0x0e, 0xb9, 0xc3, 0x49, 0x6b, 0x96, 0x96, 0x97, 0xd6, 0xde, 0x6d, 0x9e, 0x26, 0xe8,
	0x57, 0xb5, 0x84, 0x11, 0x3c, 0x2f, 0x94, 0xd6, 0x60, 0x4d, 0xa8, 0x59, 0x20, 0xa4, 0x6a, 0xed,
	0x61, 0x42, 0x23, 0x38, 0x7b, 0x87, 0xcd, 0x11, 0x85, 0xf8, 0x40, 0x57, 0xd9, 0x95, 0xef, 0xb0,
	0x39, 0x9c, 0x10, 0x1f, 0xe8, 0x12, 0xcb, 0xc6, 0x58, 0x74, 0x10, 0x22, 0xb0, 0xa6, 0xf3, 0xcb,
	0xdd, 0xab, 0x09, 0xb4, 0xb8, 0xc0, 0xaa, 0x21, 0x20, 0xf6, 0xaa, 0xae, 0x50, 0xd5, 0xe0, 0x1c,
	0x0a, 0xbf, 0x06, 0x1b, 0x85, 0x8b, 0xa2, 0x02, 0x4c, 0x65, 0x4f, 0x1e, 0x27, 0x45, 0xab, 0x72,
	0x59, 0x3c, 0xcb, 0xe3, 0xa4, 0x60, 0x59, 0xb2, 0x84, 0xbc, 0x56, 0xba, 0x2e, 0xba, 0xd6, 0xdd,
	0x02, 0x2d, 0x35, 0xf1, 0x87, 0x6a, 0x8d, 0x26, 0xc0, 0x6f, 0xc0, 0x59, 0x73, 0x5c, 0xfd, 0x00,
	0x39, 0x38, 0x95, 0x12, 0xa7, 0x25, 0x57, 0xfc, 0x94, 0x2b, 0xfe, 0x2f, 0x37, 0x3a, 0x9e, 0x2e,
	0xf9, 0x8c, 0x23, 0x73, 0xd3, 0x18, 0xe3, 0x68, 0x1a, 0x13, 0x77, 0x41, 0xad, 0x60, 0xdd, 0xf4,
	0x61, 0x7e, 0xc6, 0x45, 0xd7, 0x0a, 0x16, 0xce, 0x18, 0xe4, 0xca, 0xc8, 0xca, 0x69, 0x43, 0x1c,
	0x80, 0xff, 0xea, 0x2a, 0x87, 0x1e, 0xd0, 0x9f, 0x73, 0xad, 0x33, 0x86, 0xd6, 0xa1, 0x67, 0xf4,
	0x69, 0x2d, 0xab, 0x38, 0xa9, 0x7e, 0x14, 0x4c, 0xd0, 0xa4, 0xb7, 0xf9, 0x0b, 0x04, 0x33, 0x39,
	0xab, 0x05, 0x2f, 0x82, 0xa9, 0x1e, 0xa6, 0x14, 0x79, 0xfc, 0x8b, 0x64, 0x42, 0x6c, 0xfe, 0x02,
	0x4f, 0x66, 0xed, 0x85, 0x3e, 0x09, 0xeb, 0x93, 0x0f, 0x1f, 0xaf, 0x8f, 0x35, 0xd3, 0x26, 0xd5,
	0xef, 0x21, 0x38, 0xca, 0x91, 0xf2, 0x1b, 0xa3, 0xfc, 0xc6, 0x78, 0x89, 0xdf, 0x18, 0xe5, 0xe7,
	0x41, 0xf9, 0x79, 0xf0, 0x92, 0x3f, 0x0f, 0x4a, 0xe3, 0x55, 0x1a, 0xaf, 0xd2, 0x78, 0x95, 0xc6,
	0xab, 0xc0, 0x78, 0xfd, 0xb8, 0x00, 0x66, 0xd4, 0xa7, 0xe8, 0xad, 0x3e, 0x03, 0xe9, 0x5f, 0xf3,
	0x4b, 0x7f, 0x87, 0xdd, 0xd9, 0x03, 0xcb, 0xea, 0xd3, 0x53, 0x50, 0xfd, 0x49, 0xb7, 0x22, 0x1a,
	0xef, 0xf0, 0x84, 0x43, 0xdc, 0xca, 0x2b, 0x6b, 0x33, 0xee, 0x81, 0xaa, 0xba, 0xca, 0x4c, 0x6f,
	0x24, 0xf2, 0x77, 0x9a, 0x6b, 0x86, 0x7f, 0x56, 0xcb, 0xae, 0xdd, 0x6d, 0x2e, 0xe1, 0x62, 0xa8,
	0x34, 0x31, 0xa5, 0x89, 0x79, 0xd5, 0xef, 0x38, 0xff, 0x95, 0x57, 0x6a, 0x1d, 0x50, 0xd3, 0xee,
	0x36, 0x63, 0x3c, 0x64, 0x87, 0x24, 0x25, 0x41, 0xb6, 0x78, 0xb7, 0xa4, 0xb9, 0xc8, 0xae, 0x38,
	0x5b, 0x78, 0x18, 0x37, 0xd3, 0x24, 0x69, 0x2e, 0xd2, 0x8b, 0xce, 0x11, 0xb4, 0x74, 0x8f, 0xa5,
	0x7b, 0x2c, 0xdd, 0x63, 0xe9, 0x1e, 0x0d, 0xf7, 0x38, 0x05, 0x8e, 0x11, 0xee, 0x16, 0x37, 0xbf,
	0x9d, 0x07, 0x4b, 0x87, 0x18, 0x0a, 0xb8, 0x33, 0x72, 0x83, 0x77, 0xe6, 0x0f, 0x1d, 0xc8, 0x33,
	0x6f, 0xf2, 0xfe, 0x0f, 0xa6, 0x9e, 0x65, 0x4a, 0xff, 0x43, 0x4b, 0x43, 0xfa, 0x62, 0x86, 0xb4,
	0xf4, 0x7a, 0xa5, 0xd7, 0x7b, 0xc9, 0x5e, 0xaf, 0xf4, 0x62, 0xa5, 0x17, 0x2b, 0xbd, 0x58, 0xe9,
	0xc5, 0x4a, 0x2f, 0xf6, 0xfc, 0x37, 0x79, 0x3f, 0x4c, 0x80, 0xa9, 0x46, 0x44, 0xc2, 0x16, 0xa2,
	0xf7, 0xe1, 0x4d, 0x70, 0x12, 0x25, 0xf1, 0x3e, 0x0e, 0x63, 0xdf, 0xe1, 0x27, 0x3c, 0xf7, 0x5f,
	0xd3, 0xf5, 0xb3, 0xbf, 0x3e, 0x5e, 0xdf, 0xf4, 0xfc, 0x78, 0x3f, 0xe9, 0x58, 0x0e, 0xe9, 0xd9,
	0x3e, 0x19, 0xbc, 0x46, 0x42, 0x6c, 0x1f, 0x60, 0x34, 0xc0, 0x56, 0x83, 0x84, 0xae, 0xcf, 0x4b,
	0x5a, 0xae, 0xf5, 0x3f, 0xe3, 0x8f, 0x99, 0x5f, 0x82, 0x15, 0xe3, 0x94, 0x49, 0x1f, 0xf0, 0xf3,
	0x1f, 0x5d, 0xcb, 0x3a, 0x6a, 0x80, 0x2f, 0xfe, 0x6f, 0x4a, 0x5b, 0xe0, 0x04, 0x3b, 0x00, 0x62,
	0x14, 0x04, 0x0f, 0x78, 0xe3, 0x4f, 0xa4, 0x45, 0x65, 0xf5, 0xbe, 0xc5, 0xa2, 0xf2, 0xde, 0xd4,
	0x23, 0x03, 0xf5, 0x28, 0x57, 0xaf, 0x5e, 0x79, 0xf8, 0xa4, 0x36, 0xfe, 0xe8, 0x49, 0x6d, 0xfc,
	0xe7, 0x27, 0xb5, 0xf1, 0xef, 0x9e, 0xd6, 0xc6, 0x1e, 0x3d, 0xad, 0x8d, 0xfd, 0xf4, 0xb4, 0x36,
	0xd6, 0x39, 0xc6, 0xff, 0x45, 0x77, 0xeb, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x74, 0x5e, 0x0d,
	0x53, 0x18, 0x2d, 0x00, 0x00,
}

func (m *Tx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tx) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fees != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Fees.Size()))
		n1, err := m.Fees.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Signatures) > 0 {
		for _, msg := range m.Signatures {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCodec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Multisig) > 0 {
		for _, b := range m.Multisig {
			dAtA[i] = 0x22
			i++
			i = encodeVarintCodec(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Sum != nil {
		nn2, err := m.Sum.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *Tx_CashSendMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CashSendMsg != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.CashSendMsg.Size()))
		n3, err := m.CashSendMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Tx_EscrowCreateMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EscrowCreateMsg != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.EscrowCreateMsg.Size()))
		n4, err := m.EscrowCreateMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Tx_EscrowReleaseMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EscrowReleaseMsg != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.EscrowReleaseMsg.Size()))
		n5, err := m.EscrowReleaseMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Tx_EscrowReturnMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EscrowReturnMsg != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.EscrowReturnMsg.Size()))
		n6, err := m.EscrowReturnMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Tx_EscrowUpdatePartiesMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EscrowUpdatePartiesMsg != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.EscrowUpdatePartiesMsg.Size()))
		n7, err := m.EscrowUpdatePartiesMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Tx_MultisigCreateMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MultisigCreateMsg != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.MultisigCreateMsg.Size()))
		n8, err := m.MultisigCreateMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Tx_MultisigUpdateMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MultisigUpdateMsg != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.MultisigUpdateMsg.Size()))
		n9, err := m.MultisigUpdateMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Tx_ValidatorsApplyDiffMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ValidatorsApplyDiffMsg != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.ValidatorsApplyDiffMsg.Size()))
		n10, err := m.ValidatorsApplyDiffMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *Tx_CurrencyCreateMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CurrencyCreateMsg != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.CurrencyCreateMsg.Size()))
		n11, err := m.CurrencyCreateMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *Tx_ExecuteBatchMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ExecuteBatchMsg != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.ExecuteBatchMsg.Size()))
		n12, err := m.ExecuteBatchMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *Tx_UsernameRegisterTokenMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UsernameRegisterTokenMsg != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UsernameRegisterTokenMsg.Size()))
		n13, err := m.UsernameRegisterTokenMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *Tx_UsernameTransferTokenMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UsernameTransferTokenMsg != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UsernameTransferTokenMsg.Size()))
		n14, err := m.UsernameTransferTokenMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *Tx_UsernameChangeTokenTargetsMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UsernameChangeTokenTargetsMsg != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UsernameChangeTokenTargetsMsg.Size()))
		n15, err := m.UsernameChangeTokenTargetsMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *Tx_UsernameUpdateConfigurationMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UsernameUpdateConfigurationMsg != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UsernameUpdateConfigurationMsg.Size()))
		n16, err := m.UsernameUpdateConfigurationMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *Tx_DistributionCreateMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DistributionCreateMsg != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.DistributionCreateMsg.Size()))
		n17, err := m.DistributionCreateMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *Tx_DistributionMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DistributionMsg != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.DistributionMsg.Size()))
		n18, err := m.DistributionMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *Tx_DistributionResetMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DistributionResetMsg != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.DistributionResetMsg.Size()))
		n19, err := m.DistributionResetMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *Tx_MigrationUpgradeSchemaMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MigrationUpgradeSchemaMsg != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.MigrationUpgradeSchemaMsg.Size()))
		n20, err := m.MigrationUpgradeSchemaMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *Tx_AswapCreateMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AswapCreateMsg != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.AswapCreateMsg.Size()))
		n21, err := m.AswapCreateMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *Tx_AswapReleaseMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AswapReleaseMsg != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.AswapReleaseMsg.Size()))
		n22, err := m.AswapReleaseMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *Tx_AswapReturnMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AswapReturnMsg != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.AswapReturnMsg.Size()))
		n23, err := m.AswapReturnMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *Tx_GovCreateProposalMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GovCreateProposalMsg != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.GovCreateProposalMsg.Size()))
		n24, err := m.GovCreateProposalMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *Tx_GovDeleteProposalMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GovDeleteProposalMsg != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.GovDeleteProposalMsg.Size()))
		n25, err := m.GovDeleteProposalMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *Tx_GovVoteMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GovVoteMsg != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.GovVoteMsg.Size()))
		n26, err := m.GovVoteMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *Tx_GovUpdateElectorateMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GovUpdateElectorateMsg != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.GovUpdateElectorateMsg.Size()))
		n27, err := m.GovUpdateElectorateMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *Tx_GovUpdateElectionRuleMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GovUpdateElectionRuleMsg != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.GovUpdateElectionRuleMsg.Size()))
		n28, err := m.GovUpdateElectionRuleMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *Tx_MsgfeeSetMsgFeeMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MsgfeeSetMsgFeeMsg != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.MsgfeeSetMsgFeeMsg.Size()))
		n29, err := m.MsgfeeSetMsgFeeMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *Tx_BlueaccountRegisterDomainMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountRegisterDomainMsg != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountRegisterDomainMsg.Size()))
		n30, err := m.BlueaccountRegisterDomainMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}
func (m *Tx_BlueaccountTransferDomainMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountTransferDomainMsg != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountTransferDomainMsg.Size()))
		n31, err := m.BlueaccountTransferDomainMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}
func (m *Tx_BlueaccountRenewDomainMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountRenewDomainMsg != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountRenewDomainMsg.Size()))
		n32, err := m.BlueaccountRenewDomainMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}
func (m *Tx_BlueaccountDeleteDomainMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountDeleteDomainMsg != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountDeleteDomainMsg.Size()))
		n33, err := m.BlueaccountDeleteDomainMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}
func (m *Tx_BlueaccountRegisterAccountMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountRegisterAccountMsg != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountRegisterAccountMsg.Size()))
		n34, err := m.BlueaccountRegisterAccountMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}
func (m *Tx_BlueaccountTransferAccountMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountTransferAccountMsg != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountTransferAccountMsg.Size()))
		n35, err := m.BlueaccountTransferAccountMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}
func (m *Tx_BlueaccountReplaceAccountTargetMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountReplaceAccountTargetMsg != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountReplaceAccountTargetMsg.Size()))
		n36, err := m.BlueaccountReplaceAccountTargetMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}
func (m *Tx_BlueaccountDeleteAccountMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountDeleteAccountMsg != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountDeleteAccountMsg.Size()))
		n37, err := m.BlueaccountDeleteAccountMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}
func (m *Tx_BlueaccountUpdateConfigurationMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountUpdateConfigurationMsg != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountUpdateConfigurationMsg.Size()))
		n38, err := m.BlueaccountUpdateConfigurationMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}
func (m *ExecuteBatchMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteBatchMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCodec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ExecuteBatchMsg_Union) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteBatchMsg_Union) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		nn39, err := m.Sum.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn39
	}
	return i, nil
}

func (m *ExecuteBatchMsg_Union_CashSendMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CashSendMsg != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.CashSendMsg.Size()))
		n40, err := m.CashSendMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Union_EscrowCreateMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EscrowCreateMsg != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.EscrowCreateMsg.Size()))
		n41, err := m.EscrowCreateMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Union_EscrowReleaseMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EscrowReleaseMsg != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.EscrowReleaseMsg.Size()))
		n42, err := m.EscrowReleaseMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Union_EscrowReturnMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EscrowReturnMsg != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.EscrowReturnMsg.Size()))
		n43, err := m.EscrowReturnMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Union_EscrowUpdatePartiesMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EscrowUpdatePartiesMsg != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.EscrowUpdatePartiesMsg.Size()))
		n44, err := m.EscrowUpdatePartiesMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Union_MultisigCreateMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MultisigCreateMsg != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.MultisigCreateMsg.Size()))
		n45, err := m.MultisigCreateMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Union_MultisigUpdateMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MultisigUpdateMsg != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.MultisigUpdateMsg.Size()))
		n46, err := m.MultisigUpdateMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Union_ValidatorsApplyDiffMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ValidatorsApplyDiffMsg != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.ValidatorsApplyDiffMsg.Size()))
		n47, err := m.ValidatorsApplyDiffMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Union_CurrencyCreateMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CurrencyCreateMsg != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.CurrencyCreateMsg.Size()))
		n48, err := m.CurrencyCreateMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Union_UsernameRegisterTokenMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UsernameRegisterTokenMsg != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UsernameRegisterTokenMsg.Size()))
		n49, err := m.UsernameRegisterTokenMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Union_UsernameTransferTokenMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UsernameTransferTokenMsg != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UsernameTransferTokenMsg.Size()))
		n50, err := m.UsernameTransferTokenMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Union_UsernameChangeTokenTargetsMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UsernameChangeTokenTargetsMsg != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UsernameChangeTokenTargetsMsg.Size()))
		n51, err := m.UsernameChangeTokenTargetsMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Union_UsernameUpdateConfigurationMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UsernameUpdateConfigurationMsg != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UsernameUpdateConfigurationMsg.Size()))
		n52, err := m.UsernameUpdateConfigurationMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Union_DistributionCreateMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DistributionCreateMsg != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.DistributionCreateMsg.Size()))
		n53, err := m.DistributionCreateMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Union_DistributionMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DistributionMsg != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.DistributionMsg.Size()))
		n54, err := m.DistributionMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Union_DistributionResetMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DistributionResetMsg != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.DistributionResetMsg.Size()))
		n55, err := m.DistributionResetMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Union_MsgfeeSetMsgFeeMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MsgfeeSetMsgFeeMsg != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.MsgfeeSetMsgFeeMsg.Size()))
		n56, err := m.MsgfeeSetMsgFeeMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Union_BlueaccountRegisterDomainMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountRegisterDomainMsg != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountRegisterDomainMsg.Size()))
		n57, err := m.BlueaccountRegisterDomainMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Union_BlueaccountTransferDomainMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountTransferDomainMsg != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountTransferDomainMsg.Size()))
		n58, err := m.BlueaccountTransferDomainMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Union_BlueaccountRenewDomainMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountRenewDomainMsg != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountRenewDomainMsg.Size()))
		n59, err := m.BlueaccountRenewDomainMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Union_BlueaccountDeleteDomainMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountDeleteDomainMsg != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountDeleteDomainMsg.Size()))
		n60, err := m.BlueaccountDeleteDomainMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n60
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Union_BlueaccountRegisterAccountMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountRegisterAccountMsg != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountRegisterAccountMsg.Size()))
		n61, err := m.BlueaccountRegisterAccountMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n61
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Union_BlueaccountTransferAccountMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountTransferAccountMsg != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountTransferAccountMsg.Size()))
		n62, err := m.BlueaccountTransferAccountMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n62
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Union_BlueaccountReplaceAccountTargetMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountReplaceAccountTargetMsg != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountReplaceAccountTargetMsg.Size()))
		n63, err := m.BlueaccountReplaceAccountTargetMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n63
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Union_BlueaccountDeleteAccountMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountDeleteAccountMsg != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountDeleteAccountMsg.Size()))
		n64, err := m.BlueaccountDeleteAccountMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Union_BlueaccountUpdateConfigurationMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountUpdateConfigurationMsg != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountUpdateConfigurationMsg.Size()))
		n65, err := m.BlueaccountUpdateConfigurationMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	return i, nil
}
func (m *ProposalOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Option != nil {
		nn66, err := m.Option.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn66
	}
	return i, nil
}

func (m *ProposalOptions_CashSendMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CashSendMsg != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.CashSendMsg.Size()))
		n67, err := m.CashSendMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n67
	}
	return i, nil
}
func (m *ProposalOptions_EscrowReleaseMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EscrowReleaseMsg != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.EscrowReleaseMsg.Size()))
		n68, err := m.EscrowReleaseMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n68
	}
	return i, nil
}
func (m *ProposalOptions_UpdateEscrowPartiesMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateEscrowPartiesMsg != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UpdateEscrowPartiesMsg.Size()))
		n69, err := m.UpdateEscrowPartiesMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n69
	}
	return i, nil
}
func (m *ProposalOptions_MultisigUpdateMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MultisigUpdateMsg != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.MultisigUpdateMsg.Size()))
		n70, err := m.MultisigUpdateMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n70
	}
	return i, nil
}
func (m *ProposalOptions_ValidatorsApplyDiffMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ValidatorsApplyDiffMsg != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.ValidatorsApplyDiffMsg.Size()))
		n71, err := m.ValidatorsApplyDiffMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n71
	}
	return i, nil
}
func (m *ProposalOptions_CurrencyCreateMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CurrencyCreateMsg != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.CurrencyCreateMsg.Size()))
		n72, err := m.CurrencyCreateMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n72
	}
	return i, nil
}
func (m *ProposalOptions_ExecuteProposalBatchMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ExecuteProposalBatchMsg != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.ExecuteProposalBatchMsg.Size()))
		n73, err := m.ExecuteProposalBatchMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n73
	}
	return i, nil
}
func (m *ProposalOptions_UsernameRegisterTokenMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UsernameRegisterTokenMsg != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UsernameRegisterTokenMsg.Size()))
		n74, err := m.UsernameRegisterTokenMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	return i, nil
}
func (m *ProposalOptions_UsernameTransferTokenMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UsernameTransferTokenMsg != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UsernameTransferTokenMsg.Size()))
		n75, err := m.UsernameTransferTokenMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	return i, nil
}
func (m *ProposalOptions_UsernameChangeTokenTargetsMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UsernameChangeTokenTargetsMsg != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UsernameChangeTokenTargetsMsg.Size()))
		n76, err := m.UsernameChangeTokenTargetsMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	return i, nil
}
func (m *ProposalOptions_UsernameUpdateConfigurationMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UsernameUpdateConfigurationMsg != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UsernameUpdateConfigurationMsg.Size()))
		n77, err := m.UsernameUpdateConfigurationMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n77
	}
	return i, nil
}
func (m *ProposalOptions_DistributionCreateMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DistributionCreateMsg != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.DistributionCreateMsg.Size()))
		n78, err := m.DistributionCreateMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n78
	}
	return i, nil
}
func (m *ProposalOptions_DistributionMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DistributionMsg != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.DistributionMsg.Size()))
		n79, err := m.DistributionMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n79
	}
	return i, nil
}
func (m *ProposalOptions_DistributionResetMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DistributionResetMsg != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.DistributionResetMsg.Size()))
		n80, err := m.DistributionResetMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n80
	}
	return i, nil
}
func (m *ProposalOptions_MigrationUpgradeSchemaMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MigrationUpgradeSchemaMsg != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.MigrationUpgradeSchemaMsg.Size()))
		n81, err := m.MigrationUpgradeSchemaMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n81
	}
	return i, nil
}
func (m *ProposalOptions_GovUpdateElectorateMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GovUpdateElectorateMsg != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.GovUpdateElectorateMsg.Size()))
		n82, err := m.GovUpdateElectorateMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n82
	}
	return i, nil
}
func (m *ProposalOptions_GovUpdateElectionRuleMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GovUpdateElectionRuleMsg != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.GovUpdateElectionRuleMsg.Size()))
		n83, err := m.GovUpdateElectionRuleMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n83
	}
	return i, nil
}
func (m *ProposalOptions_GovCreateTextResolutionMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GovCreateTextResolutionMsg != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.GovCreateTextResolutionMsg.Size()))
		n84, err := m.GovCreateTextResolutionMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n84
	}
	return i, nil
}
func (m *ProposalOptions_MsgfeeSetMsgFeeMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MsgfeeSetMsgFeeMsg != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.MsgfeeSetMsgFeeMsg.Size()))
		n85, err := m.MsgfeeSetMsgFeeMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n85
	}
	return i, nil
}
func (m *ProposalOptions_BlueaccountRegisterDomainMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountRegisterDomainMsg != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountRegisterDomainMsg.Size()))
		n86, err := m.BlueaccountRegisterDomainMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n86
	}
	return i, nil
}
func (m *ProposalOptions_BlueaccountTransferDomainMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountTransferDomainMsg != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountTransferDomainMsg.Size()))
		n87, err := m.BlueaccountTransferDomainMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n87
	}
	return i, nil
}
func (m *ProposalOptions_BlueaccountRenewDomainMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountRenewDomainMsg != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountRenewDomainMsg.Size()))
		n88, err := m.BlueaccountRenewDomainMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n88
	}
	return i, nil
}
func (m *ProposalOptions_BlueaccountDeleteDomainMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountDeleteDomainMsg != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountDeleteDomainMsg.Size()))
		n89, err := m.BlueaccountDeleteDomainMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n89
	}
	return i, nil
}
func (m *ProposalOptions_BlueaccountRegisterAccountMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountRegisterAccountMsg != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountRegisterAccountMsg.Size()))
		n90, err := m.BlueaccountRegisterAccountMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n90
	}
	return i, nil
}
func (m *ProposalOptions_BlueaccountTransferAccountMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountTransferAccountMsg != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountTransferAccountMsg.Size()))
		n91, err := m.BlueaccountTransferAccountMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n91
	}
	return i, nil
}
func (m *ProposalOptions_BlueaccountReplaceAccountTargetMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountReplaceAccountTargetMsg != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountReplaceAccountTargetMsg.Size()))
		n92, err := m.BlueaccountReplaceAccountTargetMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n92
	}
	return i, nil
}
func (m *ProposalOptions_BlueaccountDeleteAccountMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountDeleteAccountMsg != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountDeleteAccountMsg.Size()))
		n93, err := m.BlueaccountDeleteAccountMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n93
	}
	return i, nil
}
func (m *ProposalOptions_BlueaccountUpdateConfigurationMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountUpdateConfigurationMsg != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountUpdateConfigurationMsg.Size()))
		n94, err := m.BlueaccountUpdateConfigurationMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n94
	}
	return i, nil
}
func (m *ExecuteProposalBatchMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteProposalBatchMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCodec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ExecuteProposalBatchMsg_Union) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteProposalBatchMsg_Union) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		nn95, err := m.Sum.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn95
	}
	return i, nil
}

func (m *ExecuteProposalBatchMsg_Union_SendMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SendMsg != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.SendMsg.Size()))
		n96, err := m.SendMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n96
	}
	return i, nil
}
func (m *ExecuteProposalBatchMsg_Union_EscrowReleaseMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EscrowReleaseMsg != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.EscrowReleaseMsg.Size()))
		n97, err := m.EscrowReleaseMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n97
	}
	return i, nil
}
func (m *ExecuteProposalBatchMsg_Union_UpdateEscrowPartiesMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateEscrowPartiesMsg != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UpdateEscrowPartiesMsg.Size()))
		n98, err := m.UpdateEscrowPartiesMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n98
	}
	return i, nil
}
func (m *ExecuteProposalBatchMsg_Union_MultisigUpdateMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MultisigUpdateMsg != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.MultisigUpdateMsg.Size()))
		n99, err := m.MultisigUpdateMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n99
	}
	return i, nil
}
func (m *ExecuteProposalBatchMsg_Union_ValidatorsApplyDiffMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ValidatorsApplyDiffMsg != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.ValidatorsApplyDiffMsg.Size()))
		n100, err := m.ValidatorsApplyDiffMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n100
	}
	return i, nil
}
func (m *ExecuteProposalBatchMsg_Union_UsernameRegisterTokenMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UsernameRegisterTokenMsg != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UsernameRegisterTokenMsg.Size()))
		n101, err := m.UsernameRegisterTokenMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n101
	}
	return i, nil
}
func (m *ExecuteProposalBatchMsg_Union_UsernameTransferTokenMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UsernameTransferTokenMsg != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UsernameTransferTokenMsg.Size()))
		n102, err := m.UsernameTransferTokenMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n102
	}
	return i, nil
}
func (m *ExecuteProposalBatchMsg_Union_UsernameChangeTokenTargetsMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UsernameChangeTokenTargetsMsg != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UsernameChangeTokenTargetsMsg.Size()))
		n103, err := m.UsernameChangeTokenTargetsMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n103
	}
	return i, nil
}
func (m *ExecuteProposalBatchMsg_Union_UsernameUpdateConfigurationMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UsernameUpdateConfigurationMsg != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UsernameUpdateConfigurationMsg.Size()))
		n104, err := m.UsernameUpdateConfigurationMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n104
	}
	return i, nil
}
func (m *ExecuteProposalBatchMsg_Union_DistributionCreateMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DistributionCreateMsg != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.DistributionCreateMsg.Size()))
		n105, err := m.DistributionCreateMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n105
	}
	return i, nil
}
func (m *ExecuteProposalBatchMsg_Union_DistributionMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DistributionMsg != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.DistributionMsg.Size()))
		n106, err := m.DistributionMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n106
	}
	return i, nil
}
func (m *ExecuteProposalBatchMsg_Union_DistributionResetMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DistributionResetMsg != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.DistributionResetMsg.Size()))
		n107, err := m.DistributionResetMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n107
	}
	return i, nil
}
func (m *ExecuteProposalBatchMsg_Union_GovUpdateElectorateMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GovUpdateElectorateMsg != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.GovUpdateElectorateMsg.Size()))
		n108, err := m.GovUpdateElectorateMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n108
	}
	return i, nil
}
func (m *ExecuteProposalBatchMsg_Union_GovUpdateElectionRuleMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GovUpdateElectionRuleMsg != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.GovUpdateElectionRuleMsg.Size()))
		n109, err := m.GovUpdateElectionRuleMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n109
	}
	return i, nil
}
func (m *ExecuteProposalBatchMsg_Union_GovCreateTextResolutionMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GovCreateTextResolutionMsg != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.GovCreateTextResolutionMsg.Size()))
		n110, err := m.GovCreateTextResolutionMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n110
	}
	return i, nil
}
func (m *ExecuteProposalBatchMsg_Union_MsgfeeSetMsgFeeMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MsgfeeSetMsgFeeMsg != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.MsgfeeSetMsgFeeMsg.Size()))
		n111, err := m.MsgfeeSetMsgFeeMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n111
	}
	return i, nil
}
func (m *ExecuteProposalBatchMsg_Union_BlueaccountRegisterDomainMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountRegisterDomainMsg != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountRegisterDomainMsg.Size()))
		n112, err := m.BlueaccountRegisterDomainMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n112
	}
	return i, nil
}
func (m *ExecuteProposalBatchMsg_Union_BlueaccountTransferDomainMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountTransferDomainMsg != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountTransferDomainMsg.Size()))
		n113, err := m.BlueaccountTransferDomainMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n113
	}
	return i, nil
}
func (m *ExecuteProposalBatchMsg_Union_BlueaccountRenewDomainMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountRenewDomainMsg != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountRenewDomainMsg.Size()))
		n114, err := m.BlueaccountRenewDomainMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n114
	}
	return i, nil
}
func (m *ExecuteProposalBatchMsg_Union_BlueaccountDeleteDomainMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountDeleteDomainMsg != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountDeleteDomainMsg.Size()))
		n115, err := m.BlueaccountDeleteDomainMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n115
	}
	return i, nil
}
func (m *ExecuteProposalBatchMsg_Union_BlueaccountRegisterAccountMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountRegisterAccountMsg != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountRegisterAccountMsg.Size()))
		n116, err := m.BlueaccountRegisterAccountMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n116
	}
	return i, nil
}
func (m *ExecuteProposalBatchMsg_Union_BlueaccountTransferAccountMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountTransferAccountMsg != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountTransferAccountMsg.Size()))
		n117, err := m.BlueaccountTransferAccountMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n117
	}
	return i, nil
}
func (m *ExecuteProposalBatchMsg_Union_BlueaccountReplaceAccountTargetMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountReplaceAccountTargetMsg != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountReplaceAccountTargetMsg.Size()))
		n118, err := m.BlueaccountReplaceAccountTargetMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n118
	}
	return i, nil
}
func (m *ExecuteProposalBatchMsg_Union_BlueaccountDeleteAccountMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountDeleteAccountMsg != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountDeleteAccountMsg.Size()))
		n119, err := m.BlueaccountDeleteAccountMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n119
	}
	return i, nil
}
func (m *ExecuteProposalBatchMsg_Union_BlueaccountUpdateConfigurationMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlueaccountUpdateConfigurationMsg != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BlueaccountUpdateConfigurationMsg.Size()))
		n120, err := m.BlueaccountUpdateConfigurationMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n120
	}
	return i, nil
}
func (m *CronTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CronTask) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Authenticators) > 0 {
		for _, b := range m.Authenticators {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCodec(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Sum != nil {
		nn121, err := m.Sum.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn121
	}
	return i, nil
}

func (m *CronTask_EscrowReleaseMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EscrowReleaseMsg != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.EscrowReleaseMsg.Size()))
		n122, err := m.EscrowReleaseMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n122
	}
	return i, nil
}
func (m *CronTask_EscrowReturnMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EscrowReturnMsg != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.EscrowReturnMsg.Size()))
		n123, err := m.EscrowReturnMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n123
	}
	return i, nil
}
func (m *CronTask_DistributionDistributeMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DistributionDistributeMsg != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.DistributionDistributeMsg.Size()))
		n124, err := m.DistributionDistributeMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n124
	}
	return i, nil
}
func (m *CronTask_AswapReleaseMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AswapReleaseMsg != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.AswapReleaseMsg.Size()))
		n125, err := m.AswapReleaseMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n125
	}
	return i, nil
}
func (m *CronTask_GovTallyMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GovTallyMsg != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.GovTallyMsg.Size()))
		n126, err := m.GovTallyMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n126
	}
	return i, nil
}
func encodeVarintCodec(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Tx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fees != nil {
		l = m.Fees.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	if len(m.Signatures) > 0 {
		for _, e := range m.Signatures {
			l = e.Size()
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	if len(m.Multisig) > 0 {
		for _, b := range m.Multisig {
			l = len(b)
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *Tx_CashSendMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CashSendMsg != nil {
		l = m.CashSendMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_EscrowCreateMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EscrowCreateMsg != nil {
		l = m.EscrowCreateMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_EscrowReleaseMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EscrowReleaseMsg != nil {
		l = m.EscrowReleaseMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_EscrowReturnMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EscrowReturnMsg != nil {
		l = m.EscrowReturnMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_EscrowUpdatePartiesMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EscrowUpdatePartiesMsg != nil {
		l = m.EscrowUpdatePartiesMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_MultisigCreateMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MultisigCreateMsg != nil {
		l = m.MultisigCreateMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_MultisigUpdateMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MultisigUpdateMsg != nil {
		l = m.MultisigUpdateMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_ValidatorsApplyDiffMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidatorsApplyDiffMsg != nil {
		l = m.ValidatorsApplyDiffMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_CurrencyCreateMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrencyCreateMsg != nil {
		l = m.CurrencyCreateMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_ExecuteBatchMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecuteBatchMsg != nil {
		l = m.ExecuteBatchMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_UsernameRegisterTokenMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsernameRegisterTokenMsg != nil {
		l = m.UsernameRegisterTokenMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_UsernameTransferTokenMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsernameTransferTokenMsg != nil {
		l = m.UsernameTransferTokenMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_UsernameChangeTokenTargetsMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsernameChangeTokenTargetsMsg != nil {
		l = m.UsernameChangeTokenTargetsMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_UsernameUpdateConfigurationMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsernameUpdateConfigurationMsg != nil {
		l = m.UsernameUpdateConfigurationMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_DistributionCreateMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DistributionCreateMsg != nil {
		l = m.DistributionCreateMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_DistributionMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DistributionMsg != nil {
		l = m.DistributionMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_DistributionResetMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DistributionResetMsg != nil {
		l = m.DistributionResetMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_MigrationUpgradeSchemaMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MigrationUpgradeSchemaMsg != nil {
		l = m.MigrationUpgradeSchemaMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_AswapCreateMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AswapCreateMsg != nil {
		l = m.AswapCreateMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_AswapReleaseMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AswapReleaseMsg != nil {
		l = m.AswapReleaseMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_AswapReturnMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AswapReturnMsg != nil {
		l = m.AswapReturnMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_GovCreateProposalMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GovCreateProposalMsg != nil {
		l = m.GovCreateProposalMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_GovDeleteProposalMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GovDeleteProposalMsg != nil {
		l = m.GovDeleteProposalMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_GovVoteMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GovVoteMsg != nil {
		l = m.GovVoteMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_GovUpdateElectorateMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GovUpdateElectorateMsg != nil {
		l = m.GovUpdateElectorateMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_GovUpdateElectionRuleMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GovUpdateElectionRuleMsg != nil {
		l = m.GovUpdateElectionRuleMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_MsgfeeSetMsgFeeMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgfeeSetMsgFeeMsg != nil {
		l = m.MsgfeeSetMsgFeeMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_BlueaccountRegisterDomainMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountRegisterDomainMsg != nil {
		l = m.BlueaccountRegisterDomainMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_BlueaccountTransferDomainMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountTransferDomainMsg != nil {
		l = m.BlueaccountTransferDomainMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_BlueaccountRenewDomainMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountRenewDomainMsg != nil {
		l = m.BlueaccountRenewDomainMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_BlueaccountDeleteDomainMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountDeleteDomainMsg != nil {
		l = m.BlueaccountDeleteDomainMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_BlueaccountRegisterAccountMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountRegisterAccountMsg != nil {
		l = m.BlueaccountRegisterAccountMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_BlueaccountTransferAccountMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountTransferAccountMsg != nil {
		l = m.BlueaccountTransferAccountMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_BlueaccountReplaceAccountTargetMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountReplaceAccountTargetMsg != nil {
		l = m.BlueaccountReplaceAccountTargetMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_BlueaccountDeleteAccountMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountDeleteAccountMsg != nil {
		l = m.BlueaccountDeleteAccountMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_BlueaccountUpdateConfigurationMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountUpdateConfigurationMsg != nil {
		l = m.BlueaccountUpdateConfigurationMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	return n
}

func (m *ExecuteBatchMsg_Union) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *ExecuteBatchMsg_Union_CashSendMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CashSendMsg != nil {
		l = m.CashSendMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Union_EscrowCreateMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EscrowCreateMsg != nil {
		l = m.EscrowCreateMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Union_EscrowReleaseMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EscrowReleaseMsg != nil {
		l = m.EscrowReleaseMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Union_EscrowReturnMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EscrowReturnMsg != nil {
		l = m.EscrowReturnMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Union_EscrowUpdatePartiesMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EscrowUpdatePartiesMsg != nil {
		l = m.EscrowUpdatePartiesMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Union_MultisigCreateMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MultisigCreateMsg != nil {
		l = m.MultisigCreateMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Union_MultisigUpdateMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MultisigUpdateMsg != nil {
		l = m.MultisigUpdateMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Union_ValidatorsApplyDiffMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidatorsApplyDiffMsg != nil {
		l = m.ValidatorsApplyDiffMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Union_CurrencyCreateMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrencyCreateMsg != nil {
		l = m.CurrencyCreateMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Union_UsernameRegisterTokenMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsernameRegisterTokenMsg != nil {
		l = m.UsernameRegisterTokenMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Union_UsernameTransferTokenMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsernameTransferTokenMsg != nil {
		l = m.UsernameTransferTokenMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Union_UsernameChangeTokenTargetsMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsernameChangeTokenTargetsMsg != nil {
		l = m.UsernameChangeTokenTargetsMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Union_UsernameUpdateConfigurationMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsernameUpdateConfigurationMsg != nil {
		l = m.UsernameUpdateConfigurationMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Union_DistributionCreateMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DistributionCreateMsg != nil {
		l = m.DistributionCreateMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Union_DistributionMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DistributionMsg != nil {
		l = m.DistributionMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Union_DistributionResetMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DistributionResetMsg != nil {
		l = m.DistributionResetMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Union_MsgfeeSetMsgFeeMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgfeeSetMsgFeeMsg != nil {
		l = m.MsgfeeSetMsgFeeMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Union_BlueaccountRegisterDomainMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountRegisterDomainMsg != nil {
		l = m.BlueaccountRegisterDomainMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Union_BlueaccountTransferDomainMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountTransferDomainMsg != nil {
		l = m.BlueaccountTransferDomainMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Union_BlueaccountRenewDomainMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountRenewDomainMsg != nil {
		l = m.BlueaccountRenewDomainMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Union_BlueaccountDeleteDomainMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountDeleteDomainMsg != nil {
		l = m.BlueaccountDeleteDomainMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Union_BlueaccountRegisterAccountMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountRegisterAccountMsg != nil {
		l = m.BlueaccountRegisterAccountMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Union_BlueaccountTransferAccountMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountTransferAccountMsg != nil {
		l = m.BlueaccountTransferAccountMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Union_BlueaccountReplaceAccountTargetMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountReplaceAccountTargetMsg != nil {
		l = m.BlueaccountReplaceAccountTargetMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Union_BlueaccountDeleteAccountMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountDeleteAccountMsg != nil {
		l = m.BlueaccountDeleteAccountMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Union_BlueaccountUpdateConfigurationMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountUpdateConfigurationMsg != nil {
		l = m.BlueaccountUpdateConfigurationMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Option != nil {
		n += m.Option.Size()
	}
	return n
}

func (m *ProposalOptions_CashSendMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CashSendMsg != nil {
		l = m.CashSendMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_EscrowReleaseMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EscrowReleaseMsg != nil {
		l = m.EscrowReleaseMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_UpdateEscrowPartiesMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateEscrowPartiesMsg != nil {
		l = m.UpdateEscrowPartiesMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_MultisigUpdateMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MultisigUpdateMsg != nil {
		l = m.MultisigUpdateMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_ValidatorsApplyDiffMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidatorsApplyDiffMsg != nil {
		l = m.ValidatorsApplyDiffMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_CurrencyCreateMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrencyCreateMsg != nil {
		l = m.CurrencyCreateMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_ExecuteProposalBatchMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecuteProposalBatchMsg != nil {
		l = m.ExecuteProposalBatchMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_UsernameRegisterTokenMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsernameRegisterTokenMsg != nil {
		l = m.UsernameRegisterTokenMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_UsernameTransferTokenMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsernameTransferTokenMsg != nil {
		l = m.UsernameTransferTokenMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_UsernameChangeTokenTargetsMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsernameChangeTokenTargetsMsg != nil {
		l = m.UsernameChangeTokenTargetsMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_UsernameUpdateConfigurationMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsernameUpdateConfigurationMsg != nil {
		l = m.UsernameUpdateConfigurationMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_DistributionCreateMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DistributionCreateMsg != nil {
		l = m.DistributionCreateMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_DistributionMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DistributionMsg != nil {
		l = m.DistributionMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_DistributionResetMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DistributionResetMsg != nil {
		l = m.DistributionResetMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_MigrationUpgradeSchemaMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MigrationUpgradeSchemaMsg != nil {
		l = m.MigrationUpgradeSchemaMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_GovUpdateElectorateMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GovUpdateElectorateMsg != nil {
		l = m.GovUpdateElectorateMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_GovUpdateElectionRuleMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GovUpdateElectionRuleMsg != nil {
		l = m.GovUpdateElectionRuleMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_GovCreateTextResolutionMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GovCreateTextResolutionMsg != nil {
		l = m.GovCreateTextResolutionMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_MsgfeeSetMsgFeeMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgfeeSetMsgFeeMsg != nil {
		l = m.MsgfeeSetMsgFeeMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_BlueaccountRegisterDomainMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountRegisterDomainMsg != nil {
		l = m.BlueaccountRegisterDomainMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_BlueaccountTransferDomainMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountTransferDomainMsg != nil {
		l = m.BlueaccountTransferDomainMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_BlueaccountRenewDomainMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountRenewDomainMsg != nil {
		l = m.BlueaccountRenewDomainMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_BlueaccountDeleteDomainMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountDeleteDomainMsg != nil {
		l = m.BlueaccountDeleteDomainMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_BlueaccountRegisterAccountMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountRegisterAccountMsg != nil {
		l = m.BlueaccountRegisterAccountMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_BlueaccountTransferAccountMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountTransferAccountMsg != nil {
		l = m.BlueaccountTransferAccountMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_BlueaccountReplaceAccountTargetMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountReplaceAccountTargetMsg != nil {
		l = m.BlueaccountReplaceAccountTargetMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_BlueaccountDeleteAccountMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountDeleteAccountMsg != nil {
		l = m.BlueaccountDeleteAccountMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ProposalOptions_BlueaccountUpdateConfigurationMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountUpdateConfigurationMsg != nil {
		l = m.BlueaccountUpdateConfigurationMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteProposalBatchMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	return n
}

func (m *ExecuteProposalBatchMsg_Union) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *ExecuteProposalBatchMsg_Union_SendMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SendMsg != nil {
		l = m.SendMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteProposalBatchMsg_Union_EscrowReleaseMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EscrowReleaseMsg != nil {
		l = m.EscrowReleaseMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteProposalBatchMsg_Union_UpdateEscrowPartiesMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateEscrowPartiesMsg != nil {
		l = m.UpdateEscrowPartiesMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteProposalBatchMsg_Union_MultisigUpdateMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MultisigUpdateMsg != nil {
		l = m.MultisigUpdateMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteProposalBatchMsg_Union_ValidatorsApplyDiffMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidatorsApplyDiffMsg != nil {
		l = m.ValidatorsApplyDiffMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteProposalBatchMsg_Union_UsernameRegisterTokenMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsernameRegisterTokenMsg != nil {
		l = m.UsernameRegisterTokenMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteProposalBatchMsg_Union_UsernameTransferTokenMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsernameTransferTokenMsg != nil {
		l = m.UsernameTransferTokenMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteProposalBatchMsg_Union_UsernameChangeTokenTargetsMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsernameChangeTokenTargetsMsg != nil {
		l = m.UsernameChangeTokenTargetsMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteProposalBatchMsg_Union_UsernameUpdateConfigurationMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsernameUpdateConfigurationMsg != nil {
		l = m.UsernameUpdateConfigurationMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteProposalBatchMsg_Union_DistributionCreateMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DistributionCreateMsg != nil {
		l = m.DistributionCreateMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteProposalBatchMsg_Union_DistributionMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DistributionMsg != nil {
		l = m.DistributionMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteProposalBatchMsg_Union_DistributionResetMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DistributionResetMsg != nil {
		l = m.DistributionResetMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteProposalBatchMsg_Union_GovUpdateElectorateMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GovUpdateElectorateMsg != nil {
		l = m.GovUpdateElectorateMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteProposalBatchMsg_Union_GovUpdateElectionRuleMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GovUpdateElectionRuleMsg != nil {
		l = m.GovUpdateElectionRuleMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteProposalBatchMsg_Union_GovCreateTextResolutionMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GovCreateTextResolutionMsg != nil {
		l = m.GovCreateTextResolutionMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteProposalBatchMsg_Union_MsgfeeSetMsgFeeMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgfeeSetMsgFeeMsg != nil {
		l = m.MsgfeeSetMsgFeeMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteProposalBatchMsg_Union_BlueaccountRegisterDomainMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountRegisterDomainMsg != nil {
		l = m.BlueaccountRegisterDomainMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteProposalBatchMsg_Union_BlueaccountTransferDomainMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountTransferDomainMsg != nil {
		l = m.BlueaccountTransferDomainMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteProposalBatchMsg_Union_BlueaccountRenewDomainMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountRenewDomainMsg != nil {
		l = m.BlueaccountRenewDomainMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteProposalBatchMsg_Union_BlueaccountDeleteDomainMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountDeleteDomainMsg != nil {
		l = m.BlueaccountDeleteDomainMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteProposalBatchMsg_Union_BlueaccountRegisterAccountMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountRegisterAccountMsg != nil {
		l = m.BlueaccountRegisterAccountMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteProposalBatchMsg_Union_BlueaccountTransferAccountMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountTransferAccountMsg != nil {
		l = m.BlueaccountTransferAccountMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteProposalBatchMsg_Union_BlueaccountReplaceAccountTargetMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountReplaceAccountTargetMsg != nil {
		l = m.BlueaccountReplaceAccountTargetMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteProposalBatchMsg_Union_BlueaccountDeleteAccountMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountDeleteAccountMsg != nil {
		l = m.BlueaccountDeleteAccountMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteProposalBatchMsg_Union_BlueaccountUpdateConfigurationMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlueaccountUpdateConfigurationMsg != nil {
		l = m.BlueaccountUpdateConfigurationMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *CronTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Authenticators) > 0 {
		for _, b := range m.Authenticators {
			l = len(b)
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *CronTask_EscrowReleaseMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EscrowReleaseMsg != nil {
		l = m.EscrowReleaseMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *CronTask_EscrowReturnMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EscrowReturnMsg != nil {
		l = m.EscrowReturnMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *CronTask_DistributionDistributeMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DistributionDistributeMsg != nil {
		l = m.DistributionDistributeMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *CronTask_AswapReleaseMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AswapReleaseMsg != nil {
		l = m.AswapReleaseMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *CronTask_GovTallyMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GovTallyMsg != nil {
		l = m.GovTallyMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}

func sovCodec(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCodec(x uint64) (n int) {
	return sovCodec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fees == nil {
				m.Fees = &cash.FeeInfo{}
			}
			if err := m.Fees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, &sigs.StdSignature{})
			if err := m.Signatures[len(m.Signatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multisig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Multisig = append(m.Multisig, make([]byte, postIndex-iNdEx))
			copy(m.Multisig[len(m.Multisig)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CashSendMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &cash.SendMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_CashSendMsg{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowCreateMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.CreateMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_EscrowCreateMsg{v}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowReleaseMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.ReleaseMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_EscrowReleaseMsg{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowReturnMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.ReturnMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_EscrowReturnMsg{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowUpdatePartiesMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.UpdatePartiesMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_EscrowUpdatePartiesMsg{v}
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigCreateMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &multisig.CreateMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_MultisigCreateMsg{v}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigUpdateMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &multisig.UpdateMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_MultisigUpdateMsg{v}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsApplyDiffMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &validators.ApplyDiffMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_ValidatorsApplyDiffMsg{v}
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyCreateMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &currency.CreateMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_CurrencyCreateMsg{v}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecuteBatchMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExecuteBatchMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_ExecuteBatchMsg{v}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsernameRegisterTokenMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &username.RegisterTokenMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_UsernameRegisterTokenMsg{v}
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsernameTransferTokenMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &username.TransferTokenMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_UsernameTransferTokenMsg{v}
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsernameChangeTokenTargetsMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &username.ChangeTokenTargetsMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_UsernameChangeTokenTargetsMsg{v}
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsernameUpdateConfigurationMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &username.UpdateConfigurationMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_UsernameUpdateConfigurationMsg{v}
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionCreateMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &distribution.CreateMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_DistributionCreateMsg{v}
			iNdEx = postIndex
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &distribution.DistributeMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_DistributionMsg{v}
			iNdEx = postIndex
		case 68:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionResetMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &distribution.ResetMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_DistributionResetMsg{v}
			iNdEx = postIndex
		case 69:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigrationUpgradeSchemaMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &migration.UpgradeSchemaMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_MigrationUpgradeSchemaMsg{v}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AswapCreateMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &aswap.CreateMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_AswapCreateMsg{v}
			iNdEx = postIndex
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AswapReleaseMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &aswap.ReleaseMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_AswapReleaseMsg{v}
			iNdEx = postIndex
		case 72:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AswapReturnMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &aswap.ReturnMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_AswapReturnMsg{v}
			iNdEx = postIndex
		case 73:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovCreateProposalMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gov.CreateProposalMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_GovCreateProposalMsg{v}
			iNdEx = postIndex
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovDeleteProposalMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gov.DeleteProposalMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_GovDeleteProposalMsg{v}
			iNdEx = postIndex
		case 75:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovVoteMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gov.VoteMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_GovVoteMsg{v}
			iNdEx = postIndex
		case 77:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovUpdateElectorateMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gov.UpdateElectorateMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_GovUpdateElectorateMsg{v}
			iNdEx = postIndex
		case 78:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovUpdateElectionRuleMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gov.UpdateElectionRuleMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_GovUpdateElectionRuleMsg{v}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgfeeSetMsgFeeMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &msgfee.SetMsgFeeMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_MsgfeeSetMsgFeeMsg{v}
			iNdEx = postIndex
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountRegisterDomainMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.RegisterDomainMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_BlueaccountRegisterDomainMsg{v}
			iNdEx = postIndex
		case 82:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountTransferDomainMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.TransferDomainMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_BlueaccountTransferDomainMsg{v}
			iNdEx = postIndex
		case 83:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountRenewDomainMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.RenewDomainMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_BlueaccountRenewDomainMsg{v}
			iNdEx = postIndex
		case 84:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountDeleteDomainMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.DeleteDomainMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_BlueaccountDeleteDomainMsg{v}
			iNdEx = postIndex
		case 85:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountRegisterAccountMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.RegisterAccountMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_BlueaccountRegisterAccountMsg{v}
			iNdEx = postIndex
		case 86:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountTransferAccountMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.TransferAccountMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_BlueaccountTransferAccountMsg{v}
			iNdEx = postIndex
		case 87:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountReplaceAccountTargetMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.ReplaceAccountTargetsMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_BlueaccountReplaceAccountTargetMsg{v}
			iNdEx = postIndex
		case 88:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountDeleteAccountMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.DeleteAccountMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_BlueaccountDeleteAccountMsg{v}
			iNdEx = postIndex
		case 89:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountUpdateConfigurationMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.UpdateConfigurationMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_BlueaccountUpdateConfigurationMsg{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteBatchMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteBatchMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteBatchMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, ExecuteBatchMsg_Union{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteBatchMsg_Union) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Union: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Union: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CashSendMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &cash.SendMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteBatchMsg_Union_CashSendMsg{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowCreateMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.CreateMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteBatchMsg_Union_EscrowCreateMsg{v}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowReleaseMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.ReleaseMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteBatchMsg_Union_EscrowReleaseMsg{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowReturnMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.ReturnMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteBatchMsg_Union_EscrowReturnMsg{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowUpdatePartiesMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.UpdatePartiesMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteBatchMsg_Union_EscrowUpdatePartiesMsg{v}
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigCreateMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &multisig.CreateMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteBatchMsg_Union_MultisigCreateMsg{v}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigUpdateMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &multisig.UpdateMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteBatchMsg_Union_MultisigUpdateMsg{v}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsApplyDiffMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &validators.ApplyDiffMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteBatchMsg_Union_ValidatorsApplyDiffMsg{v}
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyCreateMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &currency.CreateMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteBatchMsg_Union_CurrencyCreateMsg{v}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsernameRegisterTokenMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &username.RegisterTokenMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteBatchMsg_Union_UsernameRegisterTokenMsg{v}
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsernameTransferTokenMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &username.TransferTokenMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteBatchMsg_Union_UsernameTransferTokenMsg{v}
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsernameChangeTokenTargetsMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &username.ChangeTokenTargetsMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteBatchMsg_Union_UsernameChangeTokenTargetsMsg{v}
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsernameUpdateConfigurationMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &username.UpdateConfigurationMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteBatchMsg_Union_UsernameUpdateConfigurationMsg{v}
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionCreateMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &distribution.CreateMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteBatchMsg_Union_DistributionCreateMsg{v}
			iNdEx = postIndex
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &distribution.DistributeMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteBatchMsg_Union_DistributionMsg{v}
			iNdEx = postIndex
		case 68:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionResetMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &distribution.ResetMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteBatchMsg_Union_DistributionResetMsg{v}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgfeeSetMsgFeeMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &msgfee.SetMsgFeeMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteBatchMsg_Union_MsgfeeSetMsgFeeMsg{v}
			iNdEx = postIndex
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountRegisterDomainMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.RegisterDomainMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteBatchMsg_Union_BlueaccountRegisterDomainMsg{v}
			iNdEx = postIndex
		case 82:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountTransferDomainMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.TransferDomainMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteBatchMsg_Union_BlueaccountTransferDomainMsg{v}
			iNdEx = postIndex
		case 83:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountRenewDomainMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.RenewDomainMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteBatchMsg_Union_BlueaccountRenewDomainMsg{v}
			iNdEx = postIndex
		case 84:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountDeleteDomainMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.DeleteDomainMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteBatchMsg_Union_BlueaccountDeleteDomainMsg{v}
			iNdEx = postIndex
		case 85:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountRegisterAccountMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.RegisterAccountMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteBatchMsg_Union_BlueaccountRegisterAccountMsg{v}
			iNdEx = postIndex
		case 86:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountTransferAccountMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.TransferAccountMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteBatchMsg_Union_BlueaccountTransferAccountMsg{v}
			iNdEx = postIndex
		case 87:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountReplaceAccountTargetMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.ReplaceAccountTargetsMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteBatchMsg_Union_BlueaccountReplaceAccountTargetMsg{v}
			iNdEx = postIndex
		case 88:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountDeleteAccountMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.DeleteAccountMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteBatchMsg_Union_BlueaccountDeleteAccountMsg{v}
			iNdEx = postIndex
		case 89:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountUpdateConfigurationMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.UpdateConfigurationMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteBatchMsg_Union_BlueaccountUpdateConfigurationMsg{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CashSendMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &cash.SendMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_CashSendMsg{v}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowReleaseMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.ReleaseMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_EscrowReleaseMsg{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateEscrowPartiesMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.UpdatePartiesMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_UpdateEscrowPartiesMsg{v}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigUpdateMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &multisig.UpdateMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_MultisigUpdateMsg{v}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsApplyDiffMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &validators.ApplyDiffMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_ValidatorsApplyDiffMsg{v}
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyCreateMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &currency.CreateMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_CurrencyCreateMsg{v}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecuteProposalBatchMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExecuteProposalBatchMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_ExecuteProposalBatchMsg{v}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsernameRegisterTokenMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &username.RegisterTokenMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_UsernameRegisterTokenMsg{v}
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsernameTransferTokenMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &username.TransferTokenMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_UsernameTransferTokenMsg{v}
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsernameChangeTokenTargetsMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &username.ChangeTokenTargetsMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_UsernameChangeTokenTargetsMsg{v}
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsernameUpdateConfigurationMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &username.UpdateConfigurationMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_UsernameUpdateConfigurationMsg{v}
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionCreateMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &distribution.CreateMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_DistributionCreateMsg{v}
			iNdEx = postIndex
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &distribution.DistributeMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_DistributionMsg{v}
			iNdEx = postIndex
		case 68:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionResetMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &distribution.ResetMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_DistributionResetMsg{v}
			iNdEx = postIndex
		case 69:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigrationUpgradeSchemaMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &migration.UpgradeSchemaMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_MigrationUpgradeSchemaMsg{v}
			iNdEx = postIndex
		case 77:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovUpdateElectorateMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gov.UpdateElectorateMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_GovUpdateElectorateMsg{v}
			iNdEx = postIndex
		case 78:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovUpdateElectionRuleMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gov.UpdateElectionRuleMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_GovUpdateElectionRuleMsg{v}
			iNdEx = postIndex
		case 79:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovCreateTextResolutionMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gov.CreateTextResolutionMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_GovCreateTextResolutionMsg{v}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgfeeSetMsgFeeMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &msgfee.SetMsgFeeMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_MsgfeeSetMsgFeeMsg{v}
			iNdEx = postIndex
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountRegisterDomainMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.RegisterDomainMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_BlueaccountRegisterDomainMsg{v}
			iNdEx = postIndex
		case 82:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountTransferDomainMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.TransferDomainMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_BlueaccountTransferDomainMsg{v}
			iNdEx = postIndex
		case 83:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountRenewDomainMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.RenewDomainMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_BlueaccountRenewDomainMsg{v}
			iNdEx = postIndex
		case 84:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountDeleteDomainMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.DeleteDomainMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_BlueaccountDeleteDomainMsg{v}
			iNdEx = postIndex
		case 85:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountRegisterAccountMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.RegisterAccountMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_BlueaccountRegisterAccountMsg{v}
			iNdEx = postIndex
		case 86:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountTransferAccountMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.TransferAccountMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_BlueaccountTransferAccountMsg{v}
			iNdEx = postIndex
		case 87:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountReplaceAccountTargetMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.ReplaceAccountTargetsMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_BlueaccountReplaceAccountTargetMsg{v}
			iNdEx = postIndex
		case 88:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountDeleteAccountMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.DeleteAccountMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_BlueaccountDeleteAccountMsg{v}
			iNdEx = postIndex
		case 89:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountUpdateConfigurationMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.UpdateConfigurationMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Option = &ProposalOptions_BlueaccountUpdateConfigurationMsg{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteProposalBatchMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteProposalBatchMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteProposalBatchMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, ExecuteProposalBatchMsg_Union{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteProposalBatchMsg_Union) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Union: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Union: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &cash.SendMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteProposalBatchMsg_Union_SendMsg{v}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowReleaseMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.ReleaseMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteProposalBatchMsg_Union_EscrowReleaseMsg{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateEscrowPartiesMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.UpdatePartiesMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteProposalBatchMsg_Union_UpdateEscrowPartiesMsg{v}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigUpdateMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &multisig.UpdateMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteProposalBatchMsg_Union_MultisigUpdateMsg{v}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsApplyDiffMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &validators.ApplyDiffMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteProposalBatchMsg_Union_ValidatorsApplyDiffMsg{v}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsernameRegisterTokenMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &username.RegisterTokenMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteProposalBatchMsg_Union_UsernameRegisterTokenMsg{v}
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsernameTransferTokenMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &username.TransferTokenMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteProposalBatchMsg_Union_UsernameTransferTokenMsg{v}
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsernameChangeTokenTargetsMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &username.ChangeTokenTargetsMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteProposalBatchMsg_Union_UsernameChangeTokenTargetsMsg{v}
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsernameUpdateConfigurationMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &username.UpdateConfigurationMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteProposalBatchMsg_Union_UsernameUpdateConfigurationMsg{v}
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionCreateMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &distribution.CreateMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteProposalBatchMsg_Union_DistributionCreateMsg{v}
			iNdEx = postIndex
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &distribution.DistributeMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteProposalBatchMsg_Union_DistributionMsg{v}
			iNdEx = postIndex
		case 68:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionResetMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &distribution.ResetMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteProposalBatchMsg_Union_DistributionResetMsg{v}
			iNdEx = postIndex
		case 77:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovUpdateElectorateMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gov.UpdateElectorateMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteProposalBatchMsg_Union_GovUpdateElectorateMsg{v}
			iNdEx = postIndex
		case 78:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovUpdateElectionRuleMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gov.UpdateElectionRuleMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteProposalBatchMsg_Union_GovUpdateElectionRuleMsg{v}
			iNdEx = postIndex
		case 79:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovCreateTextResolutionMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gov.CreateTextResolutionMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteProposalBatchMsg_Union_GovCreateTextResolutionMsg{v}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgfeeSetMsgFeeMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &msgfee.SetMsgFeeMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteProposalBatchMsg_Union_MsgfeeSetMsgFeeMsg{v}
			iNdEx = postIndex
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountRegisterDomainMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.RegisterDomainMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteProposalBatchMsg_Union_BlueaccountRegisterDomainMsg{v}
			iNdEx = postIndex
		case 82:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountTransferDomainMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.TransferDomainMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteProposalBatchMsg_Union_BlueaccountTransferDomainMsg{v}
			iNdEx = postIndex
		case 83:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountRenewDomainMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.RenewDomainMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteProposalBatchMsg_Union_BlueaccountRenewDomainMsg{v}
			iNdEx = postIndex
		case 84:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountDeleteDomainMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.DeleteDomainMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteProposalBatchMsg_Union_BlueaccountDeleteDomainMsg{v}
			iNdEx = postIndex
		case 85:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountRegisterAccountMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.RegisterAccountMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteProposalBatchMsg_Union_BlueaccountRegisterAccountMsg{v}
			iNdEx = postIndex
		case 86:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountTransferAccountMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.TransferAccountMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteProposalBatchMsg_Union_BlueaccountTransferAccountMsg{v}
			iNdEx = postIndex
		case 87:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountReplaceAccountTargetMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.ReplaceAccountTargetsMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteProposalBatchMsg_Union_BlueaccountReplaceAccountTargetMsg{v}
			iNdEx = postIndex
		case 88:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountDeleteAccountMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.DeleteAccountMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteProposalBatchMsg_Union_BlueaccountDeleteAccountMsg{v}
			iNdEx = postIndex
		case 89:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlueaccountUpdateConfigurationMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blueaccount.UpdateConfigurationMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ExecuteProposalBatchMsg_Union_BlueaccountUpdateConfigurationMsg{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CronTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CronTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CronTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authenticators", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authenticators = append(m.Authenticators, make([]byte, postIndex-iNdEx))
			copy(m.Authenticators[len(m.Authenticators)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowReleaseMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.ReleaseMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &CronTask_EscrowReleaseMsg{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowReturnMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.ReturnMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &CronTask_EscrowReturnMsg{v}
			iNdEx = postIndex
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionDistributeMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &distribution.DistributeMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &CronTask_DistributionDistributeMsg{v}
			iNdEx = postIndex
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AswapReleaseMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &aswap.ReleaseMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &CronTask_AswapReleaseMsg{v}
			iNdEx = postIndex
		case 76:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovTallyMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &gov.TallyMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &CronTask_GovTallyMsg{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCodec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCodec
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCodec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCodec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCodec(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCodec
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCodec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCodec   = fmt.Errorf("proto: integer overflow")
)
