// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/codec.proto

package app

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_iov_one_weave "github.com/iov-one/weave"
	username "github.com/iov-one/weave/cmd/bnsd/x/nft/username"
	coin "github.com/iov-one/weave/coin"
	cash "github.com/iov-one/weave/x/cash"
	currency "github.com/iov-one/weave/x/currency"
	distribution "github.com/iov-one/weave/x/distribution"
	escrow "github.com/iov-one/weave/x/escrow"
	multisig "github.com/iov-one/weave/x/multisig"
	nft "github.com/iov-one/weave/x/nft"
	sigs "github.com/iov-one/weave/x/sigs"
	validators "github.com/iov-one/weave/x/validators"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Configuration contains a dynamic configuration. Names of the attributes are
// important as each extension requires certain interface to be implemented.
// Protobuf compiler generates getter method for each attribute.
type Configuration struct {
	// Collector address is required by x/cash extension.
	CollectorAddress github_com_iov_one_weave.Address `protobuf:"bytes,1,opt,name=collector_address,json=collectorAddress,proto3,casttype=github.com/iov-one/weave.Address" json:"collector_address,omitempty"`
	// Minimal fee is required by x/cash extension.
	MinimalFee coin.Coin `protobuf:"bytes,2,opt,name=minimal_fee,json=minimalFee,proto3" json:"minimal_fee"`
}

func (m *Configuration) Reset()         { *m = Configuration{} }
func (m *Configuration) String() string { return proto.CompactTextString(m) }
func (*Configuration) ProtoMessage()    {}
func (*Configuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_e43b82f4f03f64b8, []int{0}
}
func (m *Configuration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Configuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Configuration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Configuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Configuration.Merge(m, src)
}
func (m *Configuration) XXX_Size() int {
	return m.Size()
}
func (m *Configuration) XXX_DiscardUnknown() {
	xxx_messageInfo_Configuration.DiscardUnknown(m)
}

var xxx_messageInfo_Configuration proto.InternalMessageInfo

func (m *Configuration) GetCollectorAddress() github_com_iov_one_weave.Address {
	if m != nil {
		return m.CollectorAddress
	}
	return nil
}

func (m *Configuration) GetMinimalFee() coin.Coin {
	if m != nil {
		return m.MinimalFee
	}
	return coin.Coin{}
}

// Tx contains the message.
//
// When extending Tx, follow the rules:
// - range 1-50 is reserved for middlewares,
// - range 51-inf is reserved for different message types,
// - keep the same numbers for the same message types in both bcpd and bnsd
//   applications. For example, FeeInfo field is used by both and indexed at
//   first position. Skip unused fields (leave index unused or comment out for
//   clarity).
type Tx struct {
	Fees       *cash.FeeInfo        `protobuf:"bytes,1,opt,name=fees,proto3" json:"fees,omitempty"`
	Signatures []*sigs.StdSignature `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
	// Preimage for hashlock.
	Preimage []byte `protobuf:"bytes,3,opt,name=preimage,proto3" json:"preimage,omitempty"`
	// ID of a multisig contract.
	Multisig [][]byte `protobuf:"bytes,4,rep,name=multisig,proto3" json:"multisig,omitempty"`
	// msg is a sum type over all allowed messages on this chain.
	//
	// Types that are valid to be assigned to Sum:
	//	*Tx_SendMsg
	//	*Tx_CreateEscrowMsg
	//	*Tx_ReleaseEscrowMsg
	//	*Tx_ReturnEscrowMsg
	//	*Tx_UpdateEscrowMsg
	//	*Tx_CreateContractMsg
	//	*Tx_UpdateContractMsg
	//	*Tx_SetValidatorsMsg
	//	*Tx_NewTokenInfoMsg
	//	*Tx_AddApprovalMsg
	//	*Tx_RemoveApprovalMsg
	//	*Tx_IssueUsernameNftMsg
	//	*Tx_AddUsernameAddressNftMsg
	//	*Tx_RemoveUsernameAddressMsg
	//	*Tx_NewRevenueMsg
	//	*Tx_DistributeMsg
	//	*Tx_ResetRevenueMsg
	Sum isTx_Sum `protobuf_oneof:"sum"`
}

func (m *Tx) Reset()         { *m = Tx{} }
func (m *Tx) String() string { return proto.CompactTextString(m) }
func (*Tx) ProtoMessage()    {}
func (*Tx) Descriptor() ([]byte, []int) {
	return fileDescriptor_e43b82f4f03f64b8, []int{1}
}
func (m *Tx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tx.Merge(m, src)
}
func (m *Tx) XXX_Size() int {
	return m.Size()
}
func (m *Tx) XXX_DiscardUnknown() {
	xxx_messageInfo_Tx.DiscardUnknown(m)
}

var xxx_messageInfo_Tx proto.InternalMessageInfo

type isTx_Sum interface {
	isTx_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Tx_SendMsg struct {
	SendMsg *cash.SendMsg `protobuf:"bytes,51,opt,name=send_msg,json=sendMsg,proto3,oneof"`
}
type Tx_CreateEscrowMsg struct {
	CreateEscrowMsg *escrow.CreateEscrowMsg `protobuf:"bytes,52,opt,name=create_escrow_msg,json=createEscrowMsg,proto3,oneof"`
}
type Tx_ReleaseEscrowMsg struct {
	ReleaseEscrowMsg *escrow.ReleaseEscrowMsg `protobuf:"bytes,53,opt,name=release_escrow_msg,json=releaseEscrowMsg,proto3,oneof"`
}
type Tx_ReturnEscrowMsg struct {
	ReturnEscrowMsg *escrow.ReturnEscrowMsg `protobuf:"bytes,54,opt,name=return_escrow_msg,json=returnEscrowMsg,proto3,oneof"`
}
type Tx_UpdateEscrowMsg struct {
	UpdateEscrowMsg *escrow.UpdateEscrowPartiesMsg `protobuf:"bytes,55,opt,name=update_escrow_msg,json=updateEscrowMsg,proto3,oneof"`
}
type Tx_CreateContractMsg struct {
	CreateContractMsg *multisig.CreateContractMsg `protobuf:"bytes,56,opt,name=create_contract_msg,json=createContractMsg,proto3,oneof"`
}
type Tx_UpdateContractMsg struct {
	UpdateContractMsg *multisig.UpdateContractMsg `protobuf:"bytes,57,opt,name=update_contract_msg,json=updateContractMsg,proto3,oneof"`
}
type Tx_SetValidatorsMsg struct {
	SetValidatorsMsg *validators.SetValidatorsMsg `protobuf:"bytes,58,opt,name=set_validators_msg,json=setValidatorsMsg,proto3,oneof"`
}
type Tx_NewTokenInfoMsg struct {
	NewTokenInfoMsg *currency.NewTokenInfoMsg `protobuf:"bytes,59,opt,name=new_token_info_msg,json=newTokenInfoMsg,proto3,oneof"`
}
type Tx_AddApprovalMsg struct {
	AddApprovalMsg *nft.AddApprovalMsg `protobuf:"bytes,61,opt,name=add_approval_msg,json=addApprovalMsg,proto3,oneof"`
}
type Tx_RemoveApprovalMsg struct {
	RemoveApprovalMsg *nft.RemoveApprovalMsg `protobuf:"bytes,62,opt,name=remove_approval_msg,json=removeApprovalMsg,proto3,oneof"`
}
type Tx_IssueUsernameNftMsg struct {
	IssueUsernameNftMsg *username.IssueTokenMsg `protobuf:"bytes,63,opt,name=issue_username_nft_msg,json=issueUsernameNftMsg,proto3,oneof"`
}
type Tx_AddUsernameAddressNftMsg struct {
	AddUsernameAddressNftMsg *username.AddChainAddressMsg `protobuf:"bytes,64,opt,name=add_username_address_nft_msg,json=addUsernameAddressNftMsg,proto3,oneof"`
}
type Tx_RemoveUsernameAddressMsg struct {
	RemoveUsernameAddressMsg *username.RemoveChainAddressMsg `protobuf:"bytes,65,opt,name=remove_username_address_msg,json=removeUsernameAddressMsg,proto3,oneof"`
}
type Tx_NewRevenueMsg struct {
	NewRevenueMsg *distribution.NewRevenueMsg `protobuf:"bytes,66,opt,name=new_revenue_msg,json=newRevenueMsg,proto3,oneof"`
}
type Tx_DistributeMsg struct {
	DistributeMsg *distribution.DistributeMsg `protobuf:"bytes,67,opt,name=distribute_msg,json=distributeMsg,proto3,oneof"`
}
type Tx_ResetRevenueMsg struct {
	ResetRevenueMsg *distribution.ResetRevenueMsg `protobuf:"bytes,68,opt,name=reset_revenue_msg,json=resetRevenueMsg,proto3,oneof"`
}

func (*Tx_SendMsg) isTx_Sum()                  {}
func (*Tx_CreateEscrowMsg) isTx_Sum()          {}
func (*Tx_ReleaseEscrowMsg) isTx_Sum()         {}
func (*Tx_ReturnEscrowMsg) isTx_Sum()          {}
func (*Tx_UpdateEscrowMsg) isTx_Sum()          {}
func (*Tx_CreateContractMsg) isTx_Sum()        {}
func (*Tx_UpdateContractMsg) isTx_Sum()        {}
func (*Tx_SetValidatorsMsg) isTx_Sum()         {}
func (*Tx_NewTokenInfoMsg) isTx_Sum()          {}
func (*Tx_AddApprovalMsg) isTx_Sum()           {}
func (*Tx_RemoveApprovalMsg) isTx_Sum()        {}
func (*Tx_IssueUsernameNftMsg) isTx_Sum()      {}
func (*Tx_AddUsernameAddressNftMsg) isTx_Sum() {}
func (*Tx_RemoveUsernameAddressMsg) isTx_Sum() {}
func (*Tx_NewRevenueMsg) isTx_Sum()            {}
func (*Tx_DistributeMsg) isTx_Sum()            {}
func (*Tx_ResetRevenueMsg) isTx_Sum()          {}

func (m *Tx) GetSum() isTx_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *Tx) GetFees() *cash.FeeInfo {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *Tx) GetSignatures() []*sigs.StdSignature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *Tx) GetPreimage() []byte {
	if m != nil {
		return m.Preimage
	}
	return nil
}

func (m *Tx) GetMultisig() [][]byte {
	if m != nil {
		return m.Multisig
	}
	return nil
}

func (m *Tx) GetSendMsg() *cash.SendMsg {
	if x, ok := m.GetSum().(*Tx_SendMsg); ok {
		return x.SendMsg
	}
	return nil
}

func (m *Tx) GetCreateEscrowMsg() *escrow.CreateEscrowMsg {
	if x, ok := m.GetSum().(*Tx_CreateEscrowMsg); ok {
		return x.CreateEscrowMsg
	}
	return nil
}

func (m *Tx) GetReleaseEscrowMsg() *escrow.ReleaseEscrowMsg {
	if x, ok := m.GetSum().(*Tx_ReleaseEscrowMsg); ok {
		return x.ReleaseEscrowMsg
	}
	return nil
}

func (m *Tx) GetReturnEscrowMsg() *escrow.ReturnEscrowMsg {
	if x, ok := m.GetSum().(*Tx_ReturnEscrowMsg); ok {
		return x.ReturnEscrowMsg
	}
	return nil
}

func (m *Tx) GetUpdateEscrowMsg() *escrow.UpdateEscrowPartiesMsg {
	if x, ok := m.GetSum().(*Tx_UpdateEscrowMsg); ok {
		return x.UpdateEscrowMsg
	}
	return nil
}

func (m *Tx) GetCreateContractMsg() *multisig.CreateContractMsg {
	if x, ok := m.GetSum().(*Tx_CreateContractMsg); ok {
		return x.CreateContractMsg
	}
	return nil
}

func (m *Tx) GetUpdateContractMsg() *multisig.UpdateContractMsg {
	if x, ok := m.GetSum().(*Tx_UpdateContractMsg); ok {
		return x.UpdateContractMsg
	}
	return nil
}

func (m *Tx) GetSetValidatorsMsg() *validators.SetValidatorsMsg {
	if x, ok := m.GetSum().(*Tx_SetValidatorsMsg); ok {
		return x.SetValidatorsMsg
	}
	return nil
}

func (m *Tx) GetNewTokenInfoMsg() *currency.NewTokenInfoMsg {
	if x, ok := m.GetSum().(*Tx_NewTokenInfoMsg); ok {
		return x.NewTokenInfoMsg
	}
	return nil
}

func (m *Tx) GetAddApprovalMsg() *nft.AddApprovalMsg {
	if x, ok := m.GetSum().(*Tx_AddApprovalMsg); ok {
		return x.AddApprovalMsg
	}
	return nil
}

func (m *Tx) GetRemoveApprovalMsg() *nft.RemoveApprovalMsg {
	if x, ok := m.GetSum().(*Tx_RemoveApprovalMsg); ok {
		return x.RemoveApprovalMsg
	}
	return nil
}

func (m *Tx) GetIssueUsernameNftMsg() *username.IssueTokenMsg {
	if x, ok := m.GetSum().(*Tx_IssueUsernameNftMsg); ok {
		return x.IssueUsernameNftMsg
	}
	return nil
}

func (m *Tx) GetAddUsernameAddressNftMsg() *username.AddChainAddressMsg {
	if x, ok := m.GetSum().(*Tx_AddUsernameAddressNftMsg); ok {
		return x.AddUsernameAddressNftMsg
	}
	return nil
}

func (m *Tx) GetRemoveUsernameAddressMsg() *username.RemoveChainAddressMsg {
	if x, ok := m.GetSum().(*Tx_RemoveUsernameAddressMsg); ok {
		return x.RemoveUsernameAddressMsg
	}
	return nil
}

func (m *Tx) GetNewRevenueMsg() *distribution.NewRevenueMsg {
	if x, ok := m.GetSum().(*Tx_NewRevenueMsg); ok {
		return x.NewRevenueMsg
	}
	return nil
}

func (m *Tx) GetDistributeMsg() *distribution.DistributeMsg {
	if x, ok := m.GetSum().(*Tx_DistributeMsg); ok {
		return x.DistributeMsg
	}
	return nil
}

func (m *Tx) GetResetRevenueMsg() *distribution.ResetRevenueMsg {
	if x, ok := m.GetSum().(*Tx_ResetRevenueMsg); ok {
		return x.ResetRevenueMsg
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Tx) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Tx_OneofMarshaler, _Tx_OneofUnmarshaler, _Tx_OneofSizer, []interface{}{
		(*Tx_SendMsg)(nil),
		(*Tx_CreateEscrowMsg)(nil),
		(*Tx_ReleaseEscrowMsg)(nil),
		(*Tx_ReturnEscrowMsg)(nil),
		(*Tx_UpdateEscrowMsg)(nil),
		(*Tx_CreateContractMsg)(nil),
		(*Tx_UpdateContractMsg)(nil),
		(*Tx_SetValidatorsMsg)(nil),
		(*Tx_NewTokenInfoMsg)(nil),
		(*Tx_AddApprovalMsg)(nil),
		(*Tx_RemoveApprovalMsg)(nil),
		(*Tx_IssueUsernameNftMsg)(nil),
		(*Tx_AddUsernameAddressNftMsg)(nil),
		(*Tx_RemoveUsernameAddressMsg)(nil),
		(*Tx_NewRevenueMsg)(nil),
		(*Tx_DistributeMsg)(nil),
		(*Tx_ResetRevenueMsg)(nil),
	}
}

func _Tx_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Tx)
	// sum
	switch x := m.Sum.(type) {
	case *Tx_SendMsg:
		_ = b.EncodeVarint(51<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SendMsg); err != nil {
			return err
		}
	case *Tx_CreateEscrowMsg:
		_ = b.EncodeVarint(52<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateEscrowMsg); err != nil {
			return err
		}
	case *Tx_ReleaseEscrowMsg:
		_ = b.EncodeVarint(53<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReleaseEscrowMsg); err != nil {
			return err
		}
	case *Tx_ReturnEscrowMsg:
		_ = b.EncodeVarint(54<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReturnEscrowMsg); err != nil {
			return err
		}
	case *Tx_UpdateEscrowMsg:
		_ = b.EncodeVarint(55<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateEscrowMsg); err != nil {
			return err
		}
	case *Tx_CreateContractMsg:
		_ = b.EncodeVarint(56<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateContractMsg); err != nil {
			return err
		}
	case *Tx_UpdateContractMsg:
		_ = b.EncodeVarint(57<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateContractMsg); err != nil {
			return err
		}
	case *Tx_SetValidatorsMsg:
		_ = b.EncodeVarint(58<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetValidatorsMsg); err != nil {
			return err
		}
	case *Tx_NewTokenInfoMsg:
		_ = b.EncodeVarint(59<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewTokenInfoMsg); err != nil {
			return err
		}
	case *Tx_AddApprovalMsg:
		_ = b.EncodeVarint(61<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddApprovalMsg); err != nil {
			return err
		}
	case *Tx_RemoveApprovalMsg:
		_ = b.EncodeVarint(62<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RemoveApprovalMsg); err != nil {
			return err
		}
	case *Tx_IssueUsernameNftMsg:
		_ = b.EncodeVarint(63<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IssueUsernameNftMsg); err != nil {
			return err
		}
	case *Tx_AddUsernameAddressNftMsg:
		_ = b.EncodeVarint(64<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddUsernameAddressNftMsg); err != nil {
			return err
		}
	case *Tx_RemoveUsernameAddressMsg:
		_ = b.EncodeVarint(65<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RemoveUsernameAddressMsg); err != nil {
			return err
		}
	case *Tx_NewRevenueMsg:
		_ = b.EncodeVarint(66<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewRevenueMsg); err != nil {
			return err
		}
	case *Tx_DistributeMsg:
		_ = b.EncodeVarint(67<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DistributeMsg); err != nil {
			return err
		}
	case *Tx_ResetRevenueMsg:
		_ = b.EncodeVarint(68<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ResetRevenueMsg); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Tx.Sum has unexpected type %T", x)
	}
	return nil
}

func _Tx_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Tx)
	switch tag {
	case 51: // sum.send_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(cash.SendMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_SendMsg{msg}
		return true, err
	case 52: // sum.create_escrow_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.CreateEscrowMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_CreateEscrowMsg{msg}
		return true, err
	case 53: // sum.release_escrow_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.ReleaseEscrowMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_ReleaseEscrowMsg{msg}
		return true, err
	case 54: // sum.return_escrow_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.ReturnEscrowMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_ReturnEscrowMsg{msg}
		return true, err
	case 55: // sum.update_escrow_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.UpdateEscrowPartiesMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_UpdateEscrowMsg{msg}
		return true, err
	case 56: // sum.create_contract_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(multisig.CreateContractMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_CreateContractMsg{msg}
		return true, err
	case 57: // sum.update_contract_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(multisig.UpdateContractMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_UpdateContractMsg{msg}
		return true, err
	case 58: // sum.set_validators_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(validators.SetValidatorsMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_SetValidatorsMsg{msg}
		return true, err
	case 59: // sum.new_token_info_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(currency.NewTokenInfoMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_NewTokenInfoMsg{msg}
		return true, err
	case 61: // sum.add_approval_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(nft.AddApprovalMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_AddApprovalMsg{msg}
		return true, err
	case 62: // sum.remove_approval_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(nft.RemoveApprovalMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_RemoveApprovalMsg{msg}
		return true, err
	case 63: // sum.issue_username_nft_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(username.IssueTokenMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_IssueUsernameNftMsg{msg}
		return true, err
	case 64: // sum.add_username_address_nft_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(username.AddChainAddressMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_AddUsernameAddressNftMsg{msg}
		return true, err
	case 65: // sum.remove_username_address_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(username.RemoveChainAddressMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_RemoveUsernameAddressMsg{msg}
		return true, err
	case 66: // sum.new_revenue_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(distribution.NewRevenueMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_NewRevenueMsg{msg}
		return true, err
	case 67: // sum.distribute_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(distribution.DistributeMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_DistributeMsg{msg}
		return true, err
	case 68: // sum.reset_revenue_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(distribution.ResetRevenueMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_ResetRevenueMsg{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Tx_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Tx)
	// sum
	switch x := m.Sum.(type) {
	case *Tx_SendMsg:
		s := proto.Size(x.SendMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_CreateEscrowMsg:
		s := proto.Size(x.CreateEscrowMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_ReleaseEscrowMsg:
		s := proto.Size(x.ReleaseEscrowMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_ReturnEscrowMsg:
		s := proto.Size(x.ReturnEscrowMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_UpdateEscrowMsg:
		s := proto.Size(x.UpdateEscrowMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_CreateContractMsg:
		s := proto.Size(x.CreateContractMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_UpdateContractMsg:
		s := proto.Size(x.UpdateContractMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_SetValidatorsMsg:
		s := proto.Size(x.SetValidatorsMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_NewTokenInfoMsg:
		s := proto.Size(x.NewTokenInfoMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_AddApprovalMsg:
		s := proto.Size(x.AddApprovalMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_RemoveApprovalMsg:
		s := proto.Size(x.RemoveApprovalMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_IssueUsernameNftMsg:
		s := proto.Size(x.IssueUsernameNftMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_AddUsernameAddressNftMsg:
		s := proto.Size(x.AddUsernameAddressNftMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_RemoveUsernameAddressMsg:
		s := proto.Size(x.RemoveUsernameAddressMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_NewRevenueMsg:
		s := proto.Size(x.NewRevenueMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_DistributeMsg:
		s := proto.Size(x.DistributeMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_ResetRevenueMsg:
		s := proto.Size(x.ResetRevenueMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Configuration)(nil), "app.Configuration")
	proto.RegisterType((*Tx)(nil), "app.Tx")
}

func init() { proto.RegisterFile("app/codec.proto", fileDescriptor_e43b82f4f03f64b8) }

var fileDescriptor_e43b82f4f03f64b8 = []byte{
	// 886 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0x4d, 0x6f, 0xdb, 0x36,
	0x18, 0xc7, 0xed, 0x38, 0xdb, 0x0a, 0x7a, 0x69, 0x12, 0x06, 0xe8, 0xbc, 0xb4, 0x73, 0xbc, 0x62,
	0x87, 0xac, 0x43, 0x24, 0x34, 0xd9, 0xfb, 0x5b, 0x17, 0x3b, 0x2d, 0x52, 0xac, 0x0d, 0x36, 0xa5,
	0xdd, 0x71, 0x1a, 0x2d, 0x3d, 0x52, 0x88, 0x59, 0xa4, 0x40, 0x52, 0x4e, 0xf6, 0x2d, 0x76, 0xd9,
	0x61, 0xdf, 0xa8, 0xc7, 0x1e, 0x77, 0x2a, 0x86, 0xe4, 0x5b, 0xec, 0x34, 0xf0, 0x45, 0x8e, 0xe8,
	0x36, 0x46, 0x6e, 0xe2, 0xf3, 0xfc, 0xff, 0x3f, 0x3e, 0x7c, 0xf8, 0x22, 0xb4, 0x4a, 0xca, 0x32,
	0x4c, 0x78, 0x0a, 0x49, 0x50, 0x0a, 0xae, 0x38, 0xee, 0x90, 0xb2, 0xdc, 0xdc, 0xc9, 0xa9, 0x3a,
	0xa9, 0xc6, 0x41, 0xc2, 0x8b, 0x30, 0xe7, 0x39, 0x0f, 0x4d, 0x6e, 0x5c, 0x65, 0x66, 0x64, 0x06,
	0xe6, 0xcb, 0x7a, 0x36, 0xbf, 0x6d, 0xc8, 0x29, 0x9f, 0xee, 0x70, 0x06, 0xe1, 0x29, 0x90, 0x29,
	0x84, 0x49, 0x91, 0x86, 0x63, 0x26, 0xd3, 0xf0, 0x2c, 0x64, 0x99, 0x0a, 0x2b, 0x09, 0x82, 0x91,
	0x02, 0x9a, 0x33, 0x6e, 0x7e, 0x72, 0xa5, 0xfb, 0x2c, 0x4c, 0x88, 0x3c, 0xf1, 0xc4, 0xe1, 0x22,
	0x71, 0x25, 0x04, 0xb0, 0xe4, 0x0f, 0xcf, 0xb0, 0xb3, 0xc0, 0x00, 0x32, 0x11, 0xfc, 0xf4, 0xda,
	0xfc, 0xa2, 0x9a, 0x28, 0x2a, 0x69, 0xee, 0x19, 0xee, 0x2d, 0x30, 0xe8, 0x25, 0x5f, 0x77, 0xa5,
	0x92, 0xe6, 0xd2, 0x13, 0xdf, 0x5f, 0x20, 0x9e, 0x92, 0x09, 0x4d, 0x89, 0xe2, 0xc2, 0xb7, 0xec,
	0x2d, 0xb0, 0xa4, 0x54, 0x2a, 0x41, 0xc7, 0x95, 0xa2, 0x9c, 0x79, 0xa6, 0x8f, 0xaf, 0xde, 0x3c,
	0x4e, 0x3d, 0xe9, 0xdd, 0xbf, 0xda, 0x68, 0x65, 0xc4, 0x59, 0x46, 0xf3, 0x4a, 0x10, 0x0d, 0xc2,
	0x3f, 0xa3, 0xf5, 0x84, 0x4f, 0x26, 0x90, 0x28, 0x2e, 0x62, 0x92, 0xa6, 0x02, 0xa4, 0xec, 0xb5,
	0x07, 0xed, 0xed, 0x77, 0x87, 0x1f, 0xfd, 0xf7, 0x6a, 0x6b, 0x70, 0x15, 0x3b, 0xd8, 0xb7, 0xda,
	0x68, 0x6d, 0x66, 0x77, 0x11, 0x7c, 0x1f, 0x75, 0x0b, 0xca, 0x68, 0x41, 0x26, 0x71, 0x06, 0xd0,
	0x5b, 0x1a, 0xb4, 0xb7, 0xbb, 0xbb, 0x28, 0xd0, 0xc5, 0x04, 0x23, 0x4e, 0xd9, 0x70, 0xf9, 0xc5,
	0xab, 0xad, 0x56, 0x84, 0x9c, 0xe8, 0x11, 0xc0, 0xdd, 0xbf, 0xbb, 0x68, 0xe9, 0xd9, 0x19, 0xfe,
	0x10, 0x2d, 0x67, 0x00, 0x76, 0xfe, 0xee, 0xee, 0x4a, 0xa0, 0x0f, 0x4f, 0xf0, 0x08, 0xe0, 0x31,
	0xcb, 0x78, 0x64, 0x52, 0x78, 0x17, 0x21, 0x49, 0x73, 0x46, 0x54, 0x25, 0x40, 0xf6, 0x96, 0x06,
	0x9d, 0xed, 0xee, 0x2e, 0x0e, 0x74, 0xef, 0x83, 0x63, 0x95, 0x1e, 0xd7, 0xa9, 0xa8, 0xa1, 0xc2,
	0x9b, 0xe8, 0x46, 0x29, 0x80, 0x16, 0x24, 0x87, 0x5e, 0x47, 0x2f, 0x2d, 0x9a, 0x8d, 0x75, 0xae,
	0x3e, 0x15, 0xbd, 0xe5, 0x41, 0x47, 0xe7, 0xea, 0x31, 0xbe, 0x87, 0x6e, 0x48, 0x60, 0x69, 0x5c,
	0xc8, 0xbc, 0xb7, 0xd7, 0x2c, 0xe9, 0x18, 0x58, 0xfa, 0x54, 0xe6, 0x87, 0xad, 0xe8, 0x1d, 0x69,
	0x3f, 0xf1, 0x43, 0xb4, 0x9e, 0x08, 0x20, 0x0a, 0x62, 0x7b, 0x26, 0x8d, 0xe9, 0x53, 0x63, 0x7a,
	0x2f, 0xb0, 0xa1, 0x60, 0x64, 0x04, 0x0f, 0xcd, 0xc0, 0xda, 0x57, 0x13, 0x3f, 0x84, 0x0f, 0x11,
	0x16, 0x30, 0x01, 0x22, 0x3d, 0xce, 0x67, 0x86, 0xd3, 0xab, 0x39, 0x91, 0x55, 0x34, 0x41, 0x6b,
	0x62, 0x2e, 0xa6, 0x0b, 0x12, 0xa0, 0x2a, 0xc1, 0x9a, 0xa0, 0xcf, 0xfd, 0x82, 0x22, 0x23, 0xf0,
	0x0a, 0x12, 0x7e, 0x08, 0x3f, 0x41, 0xeb, 0x55, 0x99, 0xce, 0xad, 0xeb, 0x0b, 0x83, 0xe9, 0xd7,
	0x98, 0xe7, 0x46, 0x60, 0x3d, 0x3f, 0x11, 0xa1, 0x28, 0x48, 0x47, 0xab, 0x1a, 0x19, 0x4d, 0x7b,
	0x8a, 0x36, 0x5c, 0x97, 0x12, 0xce, 0x94, 0x20, 0x89, 0x32, 0xbc, 0x2f, 0x0d, 0xef, 0x76, 0x50,
	0x77, 0xde, 0x75, 0x6a, 0xe4, 0x34, 0x16, 0xe6, 0xfa, 0xdb, 0x08, 0x6a, 0x9c, 0x2b, 0xce, 0xc3,
	0x7d, 0x35, 0x8f, 0xb3, 0x05, 0xce, 0xe1, 0xaa, 0xf9, 0x20, 0x7e, 0x82, 0xb0, 0x04, 0x15, 0x5f,
	0xde, 0x4d, 0x43, 0xfb, 0xda, 0xd0, 0xee, 0x04, 0x97, 0xe1, 0xe0, 0x18, 0xd4, 0x2f, 0xb3, 0x91,
	0xdb, 0x00, 0x39, 0x17, 0xd3, 0x5b, 0xc9, 0xe0, 0x34, 0x56, 0xfc, 0x77, 0x60, 0x31, 0x65, 0x19,
	0x37, 0xb4, 0x6f, 0x0c, 0xed, 0xfd, 0xa0, 0x7e, 0xea, 0x82, 0x23, 0x38, 0x7d, 0xa6, 0x25, 0xfa,
	0x8c, 0xbb, 0xae, 0x31, 0x3f, 0x84, 0x1f, 0xa0, 0x35, 0x92, 0xa6, 0x31, 0x29, 0x4b, 0xc1, 0xa7,
	0x64, 0x62, 0x38, 0xdf, 0x19, 0xce, 0x46, 0xc0, 0x32, 0xa5, 0xaf, 0xe2, 0xbe, 0xcb, 0x59, 0xc2,
	0x4d, 0xe2, 0x45, 0xf0, 0x21, 0xda, 0x10, 0x50, 0xf0, 0x29, 0xf8, 0x8c, 0xef, 0x0d, 0xe3, 0x96,
	0x61, 0x44, 0x26, 0xef, 0x63, 0xd6, 0xc5, 0x7c, 0x10, 0x1f, 0xa1, 0x5b, 0x54, 0xca, 0x0a, 0xe2,
	0xfa, 0x47, 0x10, 0xb3, 0xcc, 0x36, 0xfd, 0x81, 0x3b, 0x5a, 0x75, 0x22, 0x78, 0xac, 0x75, 0x66,
	0x1d, 0x96, 0xb6, 0x61, 0x8c, 0xcf, 0x5d, 0xfa, 0x28, 0x33, 0x2d, 0xff, 0x15, 0xdd, 0xd1, 0x4b,
	0x9b, 0xd1, 0xdc, 0x0b, 0x34, 0xa3, 0xfe, 0xe0, 0x9a, 0x3f, 0xa3, 0xee, 0xa7, 0xe9, 0xe8, 0x84,
	0x50, 0xe6, 0x1e, 0x1b, 0x8b, 0xee, 0x91, 0x34, 0xad, 0xc1, 0x2e, 0xe1, 0xf8, 0xbf, 0xa1, 0xdb,
	0x6e, 0xe5, 0xaf, 0x4d, 0xa1, 0xf1, 0xfb, 0x06, 0xbf, 0x75, 0x89, 0xb7, 0x6d, 0x78, 0xc3, 0x0c,
	0x96, 0x32, 0x37, 0x89, 0xbd, 0x67, 0x7a, 0xbf, 0x62, 0x01, 0x53, 0x60, 0x15, 0x18, 0xea, 0xd0,
	0x9d, 0xbf, 0xe6, 0x8b, 0xad, 0xf7, 0x39, 0xb2, 0x1a, 0x4b, 0x5c, 0x61, 0xcd, 0x00, 0x3e, 0x40,
	0x37, 0x67, 0x72, 0x4b, 0x19, 0xbd, 0x89, 0x72, 0x30, 0xd3, 0x38, 0x4a, 0xda, 0x0c, 0xe0, 0x1f,
	0xf5, 0xa5, 0xd7, 0x67, 0xb8, 0x59, 0xce, 0x81, 0x01, 0x7d, 0xe0, 0x83, 0x22, 0x2d, 0xf3, 0x0a,
	0x5a, 0x15, 0x7e, 0x68, 0xf8, 0x16, 0xea, 0xc8, 0xaa, 0x18, 0xf6, 0x5e, 0x9c, 0xf7, 0xdb, 0x2f,
	0xcf, 0xfb, 0xed, 0x7f, 0xcf, 0xfb, 0xed, 0x3f, 0x2f, 0xfa, 0xad, 0x97, 0x17, 0xfd, 0xd6, 0x3f,
	0x17, 0xfd, 0xd6, 0xf8, 0x6d, 0xf3, 0x53, 0xd9, 0xfb, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xc8, 0xa7,
	0x8b, 0x71, 0x83, 0x08, 0x00, 0x00,
}

func (m *Configuration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Configuration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CollectorAddress) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.CollectorAddress)))
		i += copy(dAtA[i:], m.CollectorAddress)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintCodec(dAtA, i, uint64(m.MinimalFee.Size()))
	n1, err := m.MinimalFee.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *Tx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tx) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fees != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Fees.Size()))
		n2, err := m.Fees.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Signatures) > 0 {
		for _, msg := range m.Signatures {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCodec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Preimage) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Preimage)))
		i += copy(dAtA[i:], m.Preimage)
	}
	if len(m.Multisig) > 0 {
		for _, b := range m.Multisig {
			dAtA[i] = 0x22
			i++
			i = encodeVarintCodec(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Sum != nil {
		nn3, err := m.Sum.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	return i, nil
}

func (m *Tx_SendMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SendMsg != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.SendMsg.Size()))
		n4, err := m.SendMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Tx_CreateEscrowMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateEscrowMsg != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.CreateEscrowMsg.Size()))
		n5, err := m.CreateEscrowMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Tx_ReleaseEscrowMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReleaseEscrowMsg != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.ReleaseEscrowMsg.Size()))
		n6, err := m.ReleaseEscrowMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Tx_ReturnEscrowMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReturnEscrowMsg != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.ReturnEscrowMsg.Size()))
		n7, err := m.ReturnEscrowMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Tx_UpdateEscrowMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateEscrowMsg != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UpdateEscrowMsg.Size()))
		n8, err := m.UpdateEscrowMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Tx_CreateContractMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateContractMsg != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.CreateContractMsg.Size()))
		n9, err := m.CreateContractMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Tx_UpdateContractMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateContractMsg != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UpdateContractMsg.Size()))
		n10, err := m.UpdateContractMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *Tx_SetValidatorsMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SetValidatorsMsg != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.SetValidatorsMsg.Size()))
		n11, err := m.SetValidatorsMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *Tx_NewTokenInfoMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NewTokenInfoMsg != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.NewTokenInfoMsg.Size()))
		n12, err := m.NewTokenInfoMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *Tx_AddApprovalMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AddApprovalMsg != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.AddApprovalMsg.Size()))
		n13, err := m.AddApprovalMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *Tx_RemoveApprovalMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RemoveApprovalMsg != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.RemoveApprovalMsg.Size()))
		n14, err := m.RemoveApprovalMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *Tx_IssueUsernameNftMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IssueUsernameNftMsg != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.IssueUsernameNftMsg.Size()))
		n15, err := m.IssueUsernameNftMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *Tx_AddUsernameAddressNftMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AddUsernameAddressNftMsg != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.AddUsernameAddressNftMsg.Size()))
		n16, err := m.AddUsernameAddressNftMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *Tx_RemoveUsernameAddressMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RemoveUsernameAddressMsg != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.RemoveUsernameAddressMsg.Size()))
		n17, err := m.RemoveUsernameAddressMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *Tx_NewRevenueMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NewRevenueMsg != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.NewRevenueMsg.Size()))
		n18, err := m.NewRevenueMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *Tx_DistributeMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DistributeMsg != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.DistributeMsg.Size()))
		n19, err := m.DistributeMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *Tx_ResetRevenueMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ResetRevenueMsg != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.ResetRevenueMsg.Size()))
		n20, err := m.ResetRevenueMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func encodeVarintCodec(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Configuration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectorAddress)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = m.MinimalFee.Size()
	n += 1 + l + sovCodec(uint64(l))
	return n
}

func (m *Tx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fees != nil {
		l = m.Fees.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	if len(m.Signatures) > 0 {
		for _, e := range m.Signatures {
			l = e.Size()
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	l = len(m.Preimage)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	if len(m.Multisig) > 0 {
		for _, b := range m.Multisig {
			l = len(b)
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *Tx_SendMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SendMsg != nil {
		l = m.SendMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_CreateEscrowMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateEscrowMsg != nil {
		l = m.CreateEscrowMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_ReleaseEscrowMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReleaseEscrowMsg != nil {
		l = m.ReleaseEscrowMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_ReturnEscrowMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReturnEscrowMsg != nil {
		l = m.ReturnEscrowMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_UpdateEscrowMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateEscrowMsg != nil {
		l = m.UpdateEscrowMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_CreateContractMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateContractMsg != nil {
		l = m.CreateContractMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_UpdateContractMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateContractMsg != nil {
		l = m.UpdateContractMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_SetValidatorsMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SetValidatorsMsg != nil {
		l = m.SetValidatorsMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_NewTokenInfoMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewTokenInfoMsg != nil {
		l = m.NewTokenInfoMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_AddApprovalMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddApprovalMsg != nil {
		l = m.AddApprovalMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_RemoveApprovalMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemoveApprovalMsg != nil {
		l = m.RemoveApprovalMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_IssueUsernameNftMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IssueUsernameNftMsg != nil {
		l = m.IssueUsernameNftMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_AddUsernameAddressNftMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddUsernameAddressNftMsg != nil {
		l = m.AddUsernameAddressNftMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_RemoveUsernameAddressMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemoveUsernameAddressMsg != nil {
		l = m.RemoveUsernameAddressMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_NewRevenueMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewRevenueMsg != nil {
		l = m.NewRevenueMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_DistributeMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DistributeMsg != nil {
		l = m.DistributeMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_ResetRevenueMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResetRevenueMsg != nil {
		l = m.ResetRevenueMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}

func sovCodec(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCodec(x uint64) (n int) {
	return sovCodec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Configuration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Configuration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Configuration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectorAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectorAddress = append(m.CollectorAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.CollectorAddress == nil {
				m.CollectorAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimalFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimalFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fees == nil {
				m.Fees = &cash.FeeInfo{}
			}
			if err := m.Fees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, &sigs.StdSignature{})
			if err := m.Signatures[len(m.Signatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preimage", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Preimage = append(m.Preimage[:0], dAtA[iNdEx:postIndex]...)
			if m.Preimage == nil {
				m.Preimage = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multisig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Multisig = append(m.Multisig, make([]byte, postIndex-iNdEx))
			copy(m.Multisig[len(m.Multisig)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &cash.SendMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_SendMsg{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateEscrowMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.CreateEscrowMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_CreateEscrowMsg{v}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseEscrowMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.ReleaseEscrowMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_ReleaseEscrowMsg{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnEscrowMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.ReturnEscrowMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_ReturnEscrowMsg{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateEscrowMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.UpdateEscrowPartiesMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_UpdateEscrowMsg{v}
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateContractMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &multisig.CreateContractMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_CreateContractMsg{v}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateContractMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &multisig.UpdateContractMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_UpdateContractMsg{v}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetValidatorsMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &validators.SetValidatorsMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_SetValidatorsMsg{v}
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTokenInfoMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &currency.NewTokenInfoMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_NewTokenInfoMsg{v}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddApprovalMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &nft.AddApprovalMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_AddApprovalMsg{v}
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveApprovalMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &nft.RemoveApprovalMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_RemoveApprovalMsg{v}
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueUsernameNftMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &username.IssueTokenMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_IssueUsernameNftMsg{v}
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddUsernameAddressNftMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &username.AddChainAddressMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_AddUsernameAddressNftMsg{v}
			iNdEx = postIndex
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveUsernameAddressMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &username.RemoveChainAddressMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_RemoveUsernameAddressMsg{v}
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewRevenueMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &distribution.NewRevenueMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_NewRevenueMsg{v}
			iNdEx = postIndex
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributeMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &distribution.DistributeMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_DistributeMsg{v}
			iNdEx = postIndex
		case 68:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetRevenueMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &distribution.ResetRevenueMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_ResetRevenueMsg{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCodec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCodec
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCodec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCodec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCodec(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCodec
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCodec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCodec   = fmt.Errorf("proto: integer overflow")
)
